%!PS-Adobe-2.0 EPSF-1.2
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 3 2 277 320
%%HiResBoundingBox: 3.708000 2.862000 276.990882 319.391990
%%EndComments

%%BeginProlog
%%BeginPreview: 273 318 8 2226
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000011444444444444444444
% 444444444444444444444444444444444444444444444444444444444444443300
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000077ffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffcc1100000000000000000000ddddbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbff55
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb77000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000011dd4400000000000000000000ff000000000000000000
% 000000000000000000000000000000000000000000000000000000000000008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb44000000000008415b5b4f1800000000
% 0000000000000008415b5b4f180000000000000000000000083b5b5b4f1800000000000000000000
% 00083b5b5b4f180000000000000000000000083b5b5b4f180000000000000000000000083b5b5b57
% 18000000000000000000000008315b5b5718000000000000000000000008315b5b57180000000000
% 00000000000008315b5b5718000000000000bb4400000000000000000000ff000000000000000000
% 000000000000000000000000000000000000000000000000000000000000008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb44000000005b7fa5b9bfac8e77230000
% 0000000000005b7da5b9bfac94772300000000000000005b7da5b9bfac9477230000000000000000
% 5b7da5b9bfac94772300000000000000005b7da5b9bfac94772300000000000000005b7da5b9bfac
% 94772300000000000000005b7da5b9bfac94772300000000000000005b7da5b9bfac947723000000
% 00000000005b7da5b9bfac94772300000000bb4400000000000000000000ff000000000000000000
% 000000000000000000000000000000000000000000000000000000000000008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb440000107aa5d3d9d9d9d9d9b97f4a00
% 000000001077a5d3d9d9d9d9d9b97c4a00000000001077a5d3d9d9d9d9d9bf7c4a00000000001077
% a5d3d9d9d9d9d9bf7f4a00000000001077a5d3d9d9d9d9d9bf814a00000000000877a5d3d9d9d9d9
% d9bf814a00000000000877a5d3d9d9d9d9d9bf814f00000000000877a5d3d9d9d9d9d9bf814f0000
% 00000008779fd3d9d9d9d9d9bf814f000000bb4400000000000000000000ff000000000000000000
% 000000000000000000000000000000000000000000000000000000000000008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb44000077b2d9d9d9d9d9d9d9d9d38123
% 0000000077b2d9d9d9d9d9d9d9d9d381230000000077b2d9d9d9d9d9d9d9d9d381230000000077b2
% d9d9d9d9d9d9d9d9d381230000000077acd9d9d9d9d9d9d9d9d381230000000072acd9d9d9d9d9d9
% d9d9d3812a0000000072acd9d9d9d9d9d9d9d9d3832a0000000072acd9d9d9d9d9d9d9d9d3892a00
% 00000072acd9d9d9d9d9d9d9d9d3892a0000bb4400000000000000000000ff000000001188778899
% 550000000000000000001111000000000000000000000000000000111100008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb44004798d9d9d9d9d9d9d9d9d9d9bf77
% 0000004798d9d9d9d9d9d9d9d9d9d9bf7a0000004798d9d9d9d9d9d9d9d9d9d9bf7a0000004798d9
% d9d9d9d9d9d9d9d9d9bf7a0000004798d9d9d9d9d9d9d9d9d9d9bf7a0800004792d9d9d9d9d9d9d9
% d9d9d9bf790800004192d9d9d9d9d9d9d9d9d9d9c6790800003b92d9d9d9d9d9d9d9d9d9d9c67908
% 00003b92d9d9d9d9d9d9d9d9d9d9c6790800bb4400000000000000000000ff00000000bb88000011
% ee5500000000000000007744000000000000000000000000000000774400008888
% 00000000000000000000000000000000000000000000000000000000000000000033554488000000
% 0000776600110000000000000000000000000000000000bb440077d3d9d9d9d9d9d9d9d9d9d9d99f
% 28000077d3d9d9d9d9d9d9d9d9d9d9d99f31000077d3d9d9d9d9d9d9d9d9d9d9d99f31000077d3d9
% d9d9d9d9d9d9d9d9d9d99f31000077d3d9d9d9d9d9d9d9d9d9d9d99f31000077ccd9d9d9d9d9d9d9
% d9d9d9d9a531000077ccd9d9d9d9d9d9d9d9d9d9d9a531000077ccd9d9d9d9d9d9d9d9d9d9d9a531
% 000077ccd9d9d9d9d9d9d9d9d9d9d9a53800bb4400000000000000110000ff00000033ff44000000
% aabb4488224488440055ee99444488558855004488224488440055ee9944008888
% 00000000000000000000000000000000000000000000000000000000000000000088110044000011
% 1100880011880000000000000000002200000000000000bb44108ad9d9d9d9d9d9d9d9d9d9d9d9b2
% 5b001086d9d9d9d9d9d9d9d9d9d9d9d9b25b001083d9d9d9d9d9d9d9d9d9d9d9d9b95b001083d9d9
% d9d9d9d9d9d9d9d9d9d9b95b001083d9d9d9d9d9d9d9d9d9d9d9d9b962000883d9d9d9d9d9d9d9d9
% d9d9d9d9b965000883d9d9d9d9d9d9d9d9d9d9d9d9b965000880d9d9d9d9d9d9d9d9d9d9d9d9b965
% 000880d9d9d9d9d9d9d9d9d9d9d9d9b96a00c07644444444330044ee8811ff00000044ff44000000
% 88ff00dd4400bb880000ff440000ff6600aa8800dd4400bb880000ff4400008888
% 00000000000000000000000000000000000000000000000000000000000000000011999955005544
% 44779911669922339922993388004433881144aa555500bb4420a5d9d9d9d9d9d9d9d9d9d9d9d9d3
% 770020a5d9d9d9d9d9d9d9d9d9d9d9d9d3770020a5d9d9d9d9d9d9d9d9d9d9d9d9d3770020a5d9d9
% d9d9d9d9d9d9d9d9d9d9d3770020a5d9d9d9d9d9d9d9d9d9d9d9d9d3770020a5d9d9d9d9d9d9d9d9
% d9d9d9d9d3770020a5d9d9d9d9d9d9d9d9d9d9d9d9d3770020a5d9d9d9d9d9d9d9d9d9d9d9d9d977
% 0020a5d9d9d9d9d9d9d9d9d9d9d9d9d97700c9cdccffffffffffffffffeeff00000044ff44000000
% 99cc00bb4400bb880000ff440000ff440055ee00bb4400bb880000ff4400008888
% 0000000000000000000000000000000000000000000000000000000000000000002200009900bb00
% 00bb8800448811008800bb008800335588440055660000bb4420a5d9d9d9d9d9d9d9d9d9d9d9d9cc
% 730020a5d9d9d9d9d9d9d9d9d9d9d9d9cc730020a5d9d9d9d9d9d9d9d9d9d9d9d9cc730020a5d9d9
% d9d9d9d9d9d9d9d9d9d9cc770020a5d9d9d9d9d9d9d9d9d9d9d9d9d3770020a5d9d9d9d9d9d9d9d9
% d9d9d9d9d37700209fd9d9d9d9d9d9d9d9d9d9d9d9d37700209fd9d9d9d9d9d9d9d9d9d9d9d9d377
% 002099d9d9d9d9d9d9d9d9d9d9d9d9d37700bb4400000000000044ee8822ff00000000cc88000011
% dd8800bb4400bb880000ff446600ff440066dd00bb4400bb880000ff4466008888
% 00000000000000000000000000000000000000000000000000000000000000000077443355005544
% 446c9900118844229922cc229911774488884466777700bb440883d9d9d9d9d9d9d9d9d9d9d9d9b2
% 5b000883d9d9d9d9d9d9d9d9d9d9d9d9b25b000883d9d9d9d9d9d9d9d9d9d9d9d9b25b000883d9d9
% d9d9d9d9d9d9d9d9d9d9b25b00087dd9d9d9d9d9d9d9d9d9d9d9d9b25b00087dd9d9d9d9d9d9d9d9
% d9d9d9d9b25b00087dd9d9d9d9d9d9d9d9d9d9d9d9b25b00087dd9d9d9d9d9d9d9d9d9d9d9d9b962
% 00007dd9d9d9d9d9d9d9d9d9d9d9d9b96200bb4400000000000011110000ff0000000022bb8855aa
% 880000888855ddbb0000aa887700ff9955bb3300888855ddbb0000aa8877008888
% 00000000000000000000000000000000000000000000000000000000000000000011002200000000
% 0000000000000000000000000000000000000000000000bb440077ccd9d9d9d9d9d9d9d9d9d9d98e
% 20000077c6d9d9d9d9d9d9d9d9d9d9d99420000077c6d9d9d9d9d9d9d9d9d9d9d99420000077c6d9
% d9d9d9d9d9d9d9d9d9d99420000074c6d9d9d9d9d9d9d9d9d9d9d99420000074c6d9d9d9d9d9d9d9
% d9d9d9d99428000073c6d9d9d9d9d9d9d9d9d9d9d99428000073c6d9d9d9d9d9d9d9d9d9d9d99831
% 000073c6d9d9d9d9d9d9d9d9d9d9d9983100bb4400000000000000000000ff000000000000000000
% 0000000000000000000000000000ff440000000000000000000000000000008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb44003b8ed9d9d9d9d9d9d9d9d9d9b977
% 0000003189d9d9d9d9d9d9d9d9d9d9b9770000003189d9d9d9d9d9d9d9d9d9d9b9770000002a89d9
% d9d9d9d9d9d9d9d9d9b9770000002a89d9d9d9d9d9d9d9d9d9d9b9770000002a89d9d9d9d9d9d9d9
% d9d9d9b9770000002a89d9d9d9d9d9d9d9d9d9d9b9770000002a89d9d9d9d9d9d9d9d9d9d9b97700
% 00002a89d9d9d9d9d9d9d9d9d9d9b9770000bb4400000000000000000000ff000000000000000000
% 0000000000000000000000000044ff990000000000000000000000000000008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb4400006da5d9d9d9d9d9d9d9d9c67f10
% 000000006da5d9d9d9d9d9d9d9d9c67f100000000068a5d9d9d9d9d9d9d9d9c67f1c0000000068a5
% d9d9d9d9d9d9d9d9cc7f1c0000000068a5d9d9d9d9d9d9d9d9cc7f1c0000000068a5d9d9d9d9d9d9
% d9d9cc7f1c0000000068a5d9d9d9d9d9d9d9d9cc7f1c0000000068a5d9d9d9d9d9d9d9d9cc7f1c00
% 000000689fd9d9d9d9d9d9d9d9cc7f230000bb4400000000000000000000ff000000000000000000
% 000000000000000000000000000000000000000000000000000000000000008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb440000086d92ccd9d9d9d9d9a57b2a00
% 00000000086d92ccd9d9d9d9d9ac7b310000000000086d92ccd9d9d9d9d9ac7d310000000000086d
% 92ccd9d9d9d9d9ac7d310000000000086d92ccd9d9d9d9d9ac7f310000000000086d92ccd9d9d9d9
% d9ac7f310000000000086d92ccd9d9d9d9d9ac7f310000000000086d8eccd9d9d9d9d9ac7f310000
% 000000086d8eccd9d9d9d9d9ac7f31000000bb4400000000000000000000ff000000000000000000
% 000000000000000000000000000000000000000000000000000000000000008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb44000000003b7994acb99f7d6a080000
% 0000000000003b7994acb99f7d6a0800000000000000003b7994acb99f7f6a080000000000000000
% 3b798eacb99f7f6a0800000000000000003b798eacb99f7f6a0800000000000000003b798eacb99f
% 7f6a0800000000000000003b798eacb99f7f6a0800000000000000003b798eacb99f7f6a08000000
% 00000000003b798eacb99f7f6a0800000000bb4400000000000000000000ff000000000000000000
% 000000000000000000000000000000000000000000000000000000000000008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb44000000000000183f54280800000000
% 0000000000000000183f542808000000000000000000000000183f54280800000000000000000000
% 0000183f542808000000000000000000000000183f542808000000000000000000000000183f5428
% 08000000000000000000000000183f542808000000000000000000000000183f5428080000000000
% 00000000000000183f542808000000000000bb4400000000000000000000ff000000000000000000
% 000000000000000000000000000000000000000000000000000000000000008888
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000bb88000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000022ee4400000000000000000000ff774444444444444444
% 44444444444444444444444444444444444444444444444444444444444444cc77
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044eeffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffaa000000000000000000000055bbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb9911
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbff440000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000044ffffbb4488005588004466000000000000004466
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000002276cd4400aa0033aa004400000000000000000088
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000004400000066000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000088334488224400005522000000000099
% 22880000552200000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000077770066ff000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000022884433883300334411000000000088
% 00880033441100000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000002266aacc66000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000bb0000bb0000444400002288000088
% 44770044440000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000044444444bb2266000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000110000000000556600000044000000
% 00000055660000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000ccffffffffffff000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000000000000000000000000011000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000044000000000044000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000003344444444
% 444444444444444444444444444444444444444469a8444444444444444444444444444444444444
% 44444444444444110000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 44444444444499000000000000001144000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000088eebbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbddee1100000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% bbbbbbbbbbbbdd0000000000000077aa000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb5500000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000dd4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 44000000000076000000000000003355444499000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb4400000000
% 00185b737765410800000000000000000000185b737765410800000000000000000000185b737765
% 41080000000000bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000011000000000000000000002222002288110000
% 00000088bbbbdd0000000000000088ffffffff000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb4400000008
% 728eb2ccd9b9a57b3b0000000000000008728eb2ccd9b9a57b3b0000000000000008728eacccd9b9
% a57d3b00000000bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088bbcc000000000000000000000088778800440000
% 00006688998888000000000000004411664444000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb440000187b
% acd9d9d9d9d9d9c689590000000000187bacd9d9d9d9d9d9cc895f0000000000187bacd9d9d9d9d9
% d9cc8e5f000000bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000220022000000000000000000000044558800330000
% 000066006600550000000000000011eeffff88000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb44000077bf
% d9d9d9d9d9d9d9d9d9893b0000000077bfd9d9d9d9d9d9d9d9d9893b0000000077bfd9d9d9d9d9d9
% d9d9d98e3b0000bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000998899000000000000000000000055554488110000
% 000066ee55aacc000000000000007711000088000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb44005ba5d9
% d9d9d9d9d9d9d9d9d9c67b0800005ba5d9d9d9d9d9d9d9d9d9d9cc7b0800005ba5d9d9d9d9d9d9d9
% d9d9d9cc7d0800bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000077bb6c000000000000000000000000001100000000
% 00000033008866000000000000007700000066000000000000000000000000000000000000000000
% 00000000000000004466446644000000000000000000000000000000002266000000000000000000
% 00226600000000776600000000000000001100000000000000000000000000000000bb440079d3d9
% d9d9d9d9d9d9d9d9d9d9a538000079d3d9d9d9d9d9d9d9d9d9d9d9a541000079d3d9d9d9d9d9d9d9
% d9d9d9d9a54100bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000011440044000000000000000000000088bbcc00000000
% 000000668888bb0000000000000033cc8899aa000000000000000000000000000000000000000000
% 00000000000000448800002244001111000000000000000000001111000088000000000011000000
% 00008800000000880011000000220000118800000000000000000000110000221100bb44108ad9d9
% d9d9d9d9d9d9d9d9d9d9b96500108ad9d9d9d9d9d9d9d9d9d9d9d9b965001086d9d9d9d9d9d9d9d9
% d9d9d9d9bf6500bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000011440044000000000000000000000022002200000000
% 000066bbbbbbdd000000000000000044aa8811000000000000000000000000000000000000000000
% 00000000000000884400000000554444553399228855881188554444550088558811885533662255
% 44338800000033996033662244338811669922338822bb0044885555336698006600bb4420a5d9d9
% d9d9d9d9d9d9d9d9d9d9d9770020a5d9d9d9d9d9d9d9d9d9d9d9d9d9770020a5d9d9d9d9d9d9d9d9
% d9d9d9d9d97700bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000055bb55000000000000000000000099889900000000
% 00007700000044000000000000008844000000000000000000000000000000000000000000000000
% 00000000000000666600001133bb0000bb008800bb00994400bb0000bb008800994400bb44552299
% 0000880000000088bb44552233558844448811008800bb00008800bb44555d997700bb44209fd9d9
% d9d9d9d9d9d9d9d9d9d9cc7300209fd9d9d9d9d9d9d9d9d9d9d9d9cc73002099d9d9d9d9d9d9d9d9
% d9d9d9d9cc7300bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000033002200000000
% 00003388444499000000000000006655886611000000000000000000000000000000000000000000
% 0000000000000000885522440055444455229922cc11446600554444552299004466005566442255
% 55449900000022995566442277448888118844008844cc1144990055664498446600bb44007dd9d9
% d9d9d9d9d9d9d9d9d9d9ac5b00007dd9d9d9d9d9d9d9d9d9d9d9d9b25b00007dd9d9d9d9d9d9d9d9
% d9d9d9d9b25b00bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000005500888899000000000000000000550088889900000000
% 000088ddbbbbdd00000000000000220033bbdd000000000000000000000000000000000000000000
% 00000000000000000000220000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb440072bfd9
% d9d9d9d9d9d9d9d9d9d98e18000072bfd9d9d9d9d9d9d9d9d9d9d98e18000072bfd9d9d9d9d9d9d9
% d9d9d9d98e1800bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000003300220022000000000000000000330022002200000000
% 000044000000440000000000000077ccbb6600000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb44002383d3
% d9d9d9d9d9d9d9d9d9ac720000002383d3d9d9d9d9d9d9d9d9d9ac720000002381d3d9d9d9d9d9d9
% d9d9d9ac720000bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000221144000000000000000000668888889900000000
% 00000011664400000000000000008844778822000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb440000549f
% d3d9d9d9d9d9d9d9bf7b0800000000549fd3d9d9d9d9d9d9d9bf7b0800000000549fd3d9d9d9d9d9
% d9d9bf7b080000bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000001188998888000000000000000000220033004400000000
% 000011eeffff8800000000000000443399eebb000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb4400000054
% 83bfd9d9d9d9d3a577180000000000005483bfd9d9d9d9d3a577180000000000005481bfd9d9d9d9
% d3a57718000000bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000011664411000000000000000000000044005500000000
% 000077110000880000000000000077ee992200000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb4400000000
% 23727d9fa58a795b00000000000000000023727d9fa58a795b00000000000000000023727d9fa58a
% 795b0000000000bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000114488000000000000000000000055995500000000
% 00007700000066000000000000006611000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000bb4400000000
% 00000020201000000000000000000000000000002020100000000000000000000000000000202010
% 00000000000000bb4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000888888000000000000000000000000000000000000
% 000033cc8899aa000000000000004400006677000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000aa9944444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444455ee3300000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000022335544000000000000000000668888889900000000
% 00000044aa8811000000000011449944444488000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000033aabbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc0dbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbb880000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000443380000000000000000000220033004400000000
% 3322224444448800000000001177eeffffffaa000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000088ee110000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000888899000000000000000000000044005500000000
% dd8888ccbbbbdd000000000000005500000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000011eeff880000000000000000000000000000000000
% 00000000000000000000000000226633550000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000033002200000000000000000000006ba76b00000000
% 22114400000044000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000033a0c8770000000000000022000000000000000000
% 00000000000011110000111100008800000000000000000000220000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000099bbcc000000000000000000000066554400000000
% 00000000000000000000000000001199aa2266000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb003399229933884433881144aa5555000000
% 44993388005544445555444455008822883399228800555588220000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000220022000000000000000000001133446600000000
% 00004400006677000000000000007744440077000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb00008800bb00883355884400556600668822
% 0088008800bb0000bbbb0000bb00880088008800bb00555577000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000998899000000000000000000000055bb5500000000
% 11449944444488000000000000006600440077000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb00229922cc22998044888844667777000000
% 0099448800554444555544445522992299229922cc11448888220000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000330022000000000000000000000000000000000000
% 1177eeffffffaa0000000000000033cc9999bb000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000000000000000000000000000000000
% 11880000000000000000000000000000000000000000880000880000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000002222
% 002288110000000000000000000000000000000000000000000088887700000000
% 00005500000000000000000000000055aa8811000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000000000000000000000000000000000
% 33440000000000000000000000000000000000000000114444110000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000088
% 778800440000000000000000550000000000000000000000000022003300000000
% 000044888888bb000000000044000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000028505858585858
% 58585858585858585858585858585858585858585858585858585858585858585858585858585858
% 58585858585858585858585858585858585858586379585858585858585858585858585858585858
% 58585858585858585858585858585858585858585858585858585858585858585858585858585858
% 58585858585858584828000000000000000000000000000000000000000000000000000000000044
% 558800330000000000000000888899000000000000000000668899888800000000
% 000088bbbbbbdd000000000099888888888888000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000004858200000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000002058480000000000000000000000000000000000000000000000000000000055
% 55508811000000000000000082bb82000000000000000000440000001100000000
% 0000440000005500000000008800000088ff66000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000285800000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000602800000000000000000000000000000000000000000000000000000088
% bbcc00000000000000000011440044000000000000000000000088889900000000
% 00002244444488000000000000001199ee4400000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000501800006688888888
% 88888888888888888888888888660000000000000000002288888888888888888888888888888888
% 88881100000000000000001177888888888888888888888888888888888844000000000000000000
% 66888888888888888888888888888888888866000000000000000000228888888888888888888888
% 88888888888888220000284800000000000000000000000000000000000000000000000000000022
% 002200000000000000000011440044000000000000000000000033002200000000
% 000088ddbbbb8800000000000011cccc330000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000066ee88888888
% 88888888888888888888888888ee660000000000000000eeaa888888888888888888888888888888
% 88bbbb000000000000000099dd8888888888888888888888888888888899ff220000000000000044
% ee8888888888888888888888888888888888ee770000000000000000eeaa88888888888888888888
% 888888888888bbcc0000005800000000000000000000000000000000000000000000000000000099
% 88990000000000000000000055bb55000000000000000000000099bbcc00000000
% 00004400000000000000000033eecc11000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 0000000000000000000000000088880000000000000000ff00000000000000000000000000000000
% 0011ff0000000000000000bb440000000000000000000000000000000000cc440000000000000088
% 88000000000000000000000000000000000088880000000000000000ff0000000000000000000000
% 00000000000011ff0000005800000000000000000000000000000000000000000000000000000033
% 002200000000000000007700110000000000000000000000000022002200000000
% 444444444444990000000000bb990000000088000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 003b6d79827b7241000000000088880000000000000000ff0000000000186277807d775408000000
% 0000ff0000000000000000bb4400000000084f777b82776a2a0000000000bb440000000000000088
% 880000000000316a79827b7247000000000088880000000000000000ff0000000000106277808077
% 54080000000000ff0000005800000000000000000000000000000000000000000000000000550088
% 889900000000000000007788998899000000000000000000000099889900000000
% bbbbbbbbbbbbdd0000000000998888888888bb000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000008
% 778ebfd9d9d9c698771000000088880000000000000000ff000000005b81b9d3d9d9ccac7d3b0000
% 0000ff0000000000000000bb440000002a7ba5ccd9d9d9b9896208000000bb440000000000000088
% 8800000008778ebfd9d9d9c698771000000088880000000000000000ff000000004f81b2d3d9d9cc
% ac7d4500000000ff0000005800000000000000000000000000000000000000000000000000330022
% 002200000000000000000000330031000000000000000000000033002200000000
% 44000000000044000000000044000000000044000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000879
% acd9d9d9d9d9d9d9b97f10000088880000000000000000ff0000006d98d3d9d9d9d9d9d9cc894f00
% 0000ff0000000000000000bb4400003186c6d9d9d9d9d9d9d9a574000000bb440000000000000088
% 8800000879acd9d9d9d9d9d9d9b97f23000088880000000000000000ff0000006598d3d9d9d9d9d9
% d9cc8e54000000ff0000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000088bbcc000000000000000000000022222200000000
% 00000011664400000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888000077ac
% d9d9d9d9d9d9d9d9d9b977000088880000000000000000ff00003b8ed9d9d9d9d9d9d9d9d9d37d23
% 0000ff0000000000000000bb4400087dccd9d9d9d9d9d9d9d9d9a55b0000bb440000000000000088
% 88000072acd9d9d9d9d9d9d9d9d9bf77000088880000000000000000ff00003b89d9d9d9d9d9d9d9
% d9d9d383230000ff0000005800000000000000000000000000000000000000000000000000668888
% 889900000000000000000000220022000000000000000000000066554400000000
% 000011eeffff88000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800318ed9
% d9d9d9d9d9d9d9d9d9d998470088880000000000000000ff000079ccd9d9d9d9d9d9d9d9d9d9b977
% 0000ff0000000000000000bb44006aacd9d9d9d9d9d9d9d9d9d9d37f1000bb440000000000000088
% 88002a8ed9d9d9d9d9d9d9d9d9d9d9a5470088880000000000000000ff000079c6d9d9d9d9d9d9d9
% d9d9d9bf770000ff0000005800000000000000000000000000000000000000000000000000220033
% 004400000000000000000000998899000000000000000000001133446600000000
% 00007711000088000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888006abfd9
% d9d9d9d9d9d9d9d9d9d9c6730088880000000000000000ff00319fd9d9d9d9d9d9d9d9d9d9d9d983
% 0800ff0000000000000000bb44007bd9d9d9d9d9d9d9d9d9d9d9d9a54f00bb440000000000000088
% 88006ab9d9d9d9d9d9d9d9d9d9d9d9cc770088880000000000000000ff00209fd9d9d9d9d9d9d9d9
% d9d9d9d9861000ff0000005800000000000000000000000000000000000000000000000000000044
% 005500000000000000000000330022000000000000000000000055bb5500000000
% 00007700000066000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000088880077d9d9
% d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb2d9d9d9d9d9d9d9d9d9d9d9d9a5
% 2800ff0000000000000000bb441894d9d9d9d9d9d9d9d9d9d9d9d9c66d00bb440000000000000088
% 880077d3d9d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb2d9d9d9d9d9d9d9d9
% d9d9d9d9a53000ff0000005800000000000000000000000000000000000000000000000000000055
% 995500000000000000000000000000000000000000000000000000000000000000
% 000033cc8899aa000000000044444444444499000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000088880082d9d9
% d9d9d9d9d9d9d9d9d9d9d9820088880000000000000000ff005bbfd9d9d9d9d9d9d9d9d9d9d9d9a5
% 2000ff0000000000000000bb4420a5d9d9d9d9d9d9d9d9d9d9d9d9d97700bb440000000000000088
% 880077d9d9d9d9d9d9d9d9d9d9d9d9d9820088880000000000000000ff005bbfd9d9d9d9d9d9d9d9
% d9d9d9d9bf5b00ff0000005800000000000000000000000000000000000000000000000000668888
% 889900000000000000005500888899000000000000000000000000000000000000
% 00000044aa88110000000000bbbbbbbbbbbbdd000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000088880077d9d9
% d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb2d9d9d9d9d9d9d9d9d9d9d9d9a5
% 2800ff0000000000000000bb441894d9d9d9d9d9d9d9d9d9d9d9d9c66d00bb440000000000000088
% 880077d3d9d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb2d9d9d9d9d9d9d9d9
% d9d9d9d9a53800ff0000005800000000000000000000000000000000000000000000000000220033
% 004400000000000000003300220022000000000000000000000000000000000000
% 00006611000000000000000044000000000076000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888006abfd9
% d9d9d9d9d9d9d9d9d9d9c6730088880000000000000000ff00319fd9d9d9d9d9d9d9d9d9d9d9d983
% 0800ff0000000000000000bb44007bd9d9d9d9d9d9d9d9d9d9d9d9ac4f00bb440000000000000088
% 88006ab9d9d9d9d9d9d9d9d9d9d9d9cc770088880000000000000000ff00209fd9d9d9d9d9d9d9d9
% d9d9d9d9861000ff0000005800000000000000000000000000000000000000000000000000000044
% 005500000000000000000000000000000000000000000000000088000000000000
% 00008888881100000000000000000088bbbbdd000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800318ed9
% d9d9d9d9d9d9d9d9d9d998470088880000000000000000ff00007bccd9d9d9d9d9d9d9d9d9d9bf77
% 0000ff0000000000000000bb44006aacd9d9d9d9d9d9d9d9d9d9d3811000bb440000000000000088
% 88002a8ed9d9d9d9d9d9d9d9d9d9d9a5470088880000000000000000ff000079ccd9d9d9d9d9d9d9
% d9d9d9bf770000ff0000005800000000000000000000000000000000000000000000000000000055
% 995500000000000000000000000000000000000000000000000011557711000000
% 00000000229988000000000000006688998888000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888000077ac
% d9d9d9d9d9d9d9d9d9b977000088880000000000000000ff00003b8ed9d9d9d9d9d9d9d9d9d37d23
% 0000ff0000000000000000bb4400087fccd9d9d9d9d9d9d9d9d9a55b0000bb440000000000000088
% 88000077acd9d9d9d9d9d9d9d9d9bf77000088880000000000000000ff00003b8ed9d9d9d9d9d9d9
% d9d9d383230000ff0000005800000000000000000000000000000000000000000000000000000022
% 222200000000000000000000000000000000000000000000000088994433220000
% 00006644bbee88000000000000006600660055000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000879
% acd9d9d9d9d9d9d9b97f10000088880000000000000000ff0000006d9fd3d9d9d9d9d9d9cc895400
% 0000ff0000000000000000bb4400003186c6d9d9d9d9d9d9d9a574000000bb440000000000000088
% 8800000879acd9d9d9d9d9d9d9b97c23000088880000000000000000ff0000006a98d3d9d9d9d9d9
% d9cc8e54000000ff0000005800000000000000000000000000000000000000000000000000000066
% 55440000000000000000668888889900000000000000000000006b002244440000
% 000077dd7711000000000000000066ee55aacc000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000008
% 778ec6d9d9d9c698771000000088880000000000000000ff000000005b81b9d3d9d9ccac7d450000
% 0000ff0000000000000000bb440000002a7da5ccd9d9d9b9896208000000bb440000000000000088
% 8800000008778ebfd9d9d9c6a5772300000088880000000000000000ff000000004f7db2d3d9d9cc
% ac7d4500000000ff0000005800000000000000000000000000000000000000000000000000001133
% 446600000000000000002200330044000000000000000000001166004400000000
% 00006600000000000000000000000033008866000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 0041727b827b7241000000000088880000000000000000ff00000000001862778080775408000000
% 0000ff0000000000000000bb4400000000084f777d82796a2a0000000000bb440000000000000088
% 880000000000316d79827a7247000000000088880000000000000000ff0000000000186277808077
% 62080000000000ff0000005800000000000000000000000000000000000000000000000000000055
% bb5500000000000000000000440055000000000000000000001155006600000000
% 000000668888bb000000000000001144000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 0000000000000000000000000088880000000000000000ff00000000000000000000000000000000
% 0000ff0000000000000000bb440000000000000000000000000000000000bb440000000000000088
% 88000000000000000000000000000000000088880000000000000000ff0000000000000000000000
% 00000000000000ff0000005800000000000000000000000000000000000000000000000000000088
% 8877000000000000000000006ba76b000000000000000000000055995500000000
% 000066bbbbbbdd0000000000000077aa000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 0000000000000000000000000088880000000000000000ff00000000000000000000000000000000
% 0000ff0000000000000000bb440000000000000000000000000000000000bb440000000000000088
% 88000000000000000000000000000000000088880000000000000000ff0000000000000000000000
% 00000000000000ff0000005800000000000000000000000000000000000000000000000000000022
% 003300000000000000000000665544000000000000000000000000001100000000
% 00007700000044000000000000003355444499000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 00316d7982797241000000000088880000000000000000ff0000000000186277807d775408000000
% 0000ff0000000000000000bb4400000000084f777b8277652a0000000000bb440000000000000088
% 880000000000316a7982797247000000000088880000000000000000ff0000000000106277807d77
% 54080000000000ff0000005800000000000000000000000000000000000000000000000000668899
% 888800000000000000000011334466000000000000000000000088bbcc00000000
% 000033884444990000000000000088ffffffff000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000008
% 778ebfd9d9d9c698771000000088880000000000000000ff000000005b7db9d3d9d9ccac7d3b0000
% 0000ff0000000000000000bb440000002a7ba5c6d9d9d3b9866208000000bb440000000000000088
% 8800000008778ebfd9d9d9c698771000000088880000000000000000ff000000004f81b2d3d9d9cc
% ac7d4500000000ff0000005800000000000000000000000000000000000000000000000000440000
% 00000000000000000000000055bb55000000000000000000000022002200000000
% 000088ddbbbbdd000000000000004400000044000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000879
% acd9d9d9d9d9d9d9b97f10000088880000000000000000ff0000006a98d3d9d9d9d9d9d9cc894f00
% 0000ff0000000000000000bb4400003186c6d9d9d9d9d9d9d3a571000000bb440000000000000088
% 8800000879acd9d9d9d9d9d9d9b97f23000088880000000000000000ff0000006598d3d9d9d9d9d9
% d9cc8e54000000ff0000005800000000000000000000000000000000000000000000000000000000
% 001100000000000000000000221144000000000000000000000099889900000000
% 000044000000440000000000000044888888bb000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888000077ac
% d9d9d9d9d9d9d9d9d9b977000088880000000000000000ff00003b8ed9d9d9d9d9d9d9d9d9d38123
% 0000ff0000000000000000bb4400087dccd9d9d9d9d9d9d9d9d99f5b0000bb440000000000000088
% 88000072acd9d9d9d9d9d9d9d9d9bf77000088880000000000000000ff00003b89d9d9d9d9d9d9d9
% d9d9d383230000ff0000005800000000000000000000000000000000000000000000000000000088
% 88990000000000000000118899888800000000000000000000004e223f00000000
% 000000116644000000000000000088bbbbbbdd000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800318ed9
% d9d9d9d9d9d9d9d9d9d998410088880000000000000000ff000079ccd9d9d9d9d9d9d9d9d9d9b973
% 0000ff0000000000000000bb44006aacd9d9d9d9d9d9d9d9d9d9d37f1000bb440000000000000088
% 88002a8ed9d9d9d9d9d9d9d9d9d9d9a5470088880000000000000000ff000079c6d9d9d9d9d9d9d9
% d9d9d9bf770000ff0000005800000000000000000000000000000000000000000000000000000033
% 002200000000000000000011664421000000000000000000000066554400000000
% 000011eeffff88000000000000004400000055000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888006abfd9
% d9d9d9d9d9d9d9d9d9d9c6730088880000000000000000ff00319fd9d9d9d9d9d9d9d9d9d9d9d983
% 0800ff0000000000000000bb44007bd9d9d9d9d9d9d9d9d9d9d9d9a54f00bb440000000000000088
% 880065b9d9d9d9d9d9d9d9d9d9d9d9cc770088880000000000000000ff002099d9d9d9d9d9d9d9d9
% d9d9d9d9861000ff0000005800000000000000000000000000000000000000000000000000000099
% bbcc0000000000000000000088bbcc000000000000000000001133446600000000
% 00007711000088000000000000002244444488000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000088880077d9d9
% d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb2d9d9d9d9d9d9d9d9d9d9d9d9a5
% 3000ff0000000000000000bb441894d9d9d9d9d9d9d9d9d9d9d9d9c66d00bb440000000000000088
% 880077d3d9d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb2d9d9d9d9d9d9d9d9
% d9d9d9d9a53000ff0000005800000000000000000000000000000000000000000000000000000022
% 002200000000000000000000220022000000000000000000000055bb5500000000
% 000077000000660000000000000088ddbbbb88000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000088880082d9d9
% d9d9d9d9d9d9d9d9d9d9d9820088880000000000000000ff005bbfd9d9d9d9d9d9d9d9d9d9d9d9a5
% 2000ff0000000000000000bb4420a5d9d9d9d9d9d9d9d9d9d9d9d9d97700bb440000000000000088
% 880077d9d9d9d9d9d9d9d9d9d9d9d9d9820088880000000000000000ff005bbfd9d9d9d9d9d9d9d9
% d9d9d9d9bf5b00ff0000005800000000000000000000000000000000000000000000000000000099
% 889900000000000000000000998899000000000000000000000000000000000000
% 000033cc8899aa000000000000004400000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000088880078d9d9
% d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb9d9d9d9d9d9d9d9d9d9d9d9d9a5
% 2800ff0000000000000000bb441894d9d9d9d9d9d9d9d9d9d9d9d9c66d00bb440000000000000088
% 880077d3d9d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb2d9d9d9d9d9d9d9d9
% d9d9d9d9a53800ff000000580000000000000000000000000000000000000000000000000000004e
% 223f00000000000000000000330022000000000000000000668888889900000000
% 00000044aa8811000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888006abfd9
% d9d9d9d9d9d9d9d9d9d9c6730088880000000000000000ff00319fd9d9d9d9d9d9d9d9d9d9d9d983
% 0800ff0000000000000000bb44007bd9d9d9d9d9d9d9d9d9d9d9d9ac4f00bb440000000000000088
% 88006ab9d9d9d9d9d9d9d9d9d9d9d9cc770088880000000000000000ff00209fd9d9d9d9d9d9d9d9
% d9d9d9d9861000ff0000005800000000000000000000000000000000000000000000000000000066
% 554400000000000000000000222222000000000000000000220033004400000000
% 77886600337700000000000000001199aa2266000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800318ed9
% d9d9d9d9d9d9d9d9d9d99f470088880000000000000000ff00087bccd9d9d9d9d9d9d9d9d9d9bf77
% 0000ff0000000000000000bb44006aacd9d9d9d9d9d9d9d9d9d9d3811000bb440000000000000088
% 88002a8ed9d9d9d9d9d9d9d9d9d9d9a5470088880000000000000000ff000079ccd9d9d9d9d9d9d9
% d9d9d9bf770000ff0000005800000000000000000000000000000000000000000000000000001133
% 446600000000000000000000665544000000000000000000000044005500000000
% 77770000002277000000000000007744440077000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888000077ac
% d9d9d9d9d9d9d9d9d9b977000088880000000000000000ff00003b92d9d9d9d9d9d9d9d9d9d38123
% 0000ff0000000000000000bb4400087fccd9d9d9d9d9d9d9d9d9a55b0000bb440000000000000088
% 88000077acd9d9d9d9d9d9d9d9d9bf77000088880000000000000000ff00003b8ed9d9d9d9d9d9d9
% d9d9d383230000ff0000005800000000000000000000000000000000000000000000000000000055
% bb5500000000000000000011334466000000000000000000000055996000000000
% 77000000000077000000000000006600440077000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000879
% acd9d9d9d9d9d9d9b97f18000088880000000000000000ff0000006d9fd3d9d9d9d9d9d9cc895400
% 0000ff0000000000000000bb4400003186c6d9d9d9d9d9d9d9a574000000bb440000000000000088
% 8800000879acd9d9d9d9d9d9d9bf7c23000088880000000000000000ff0000006a98d3d9d9d9d9d9
% d9cc8e54000000ff0000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000055bb55000000000000000000000088bbcc00000000
% 880000000000660000000000000033cc9999bb000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000010
% 7794c6d9d9d9c698771000000088880000000000000000ff000000005b81b9d3d9d9ccac7d450000
% 0000ff0000000000000000bb440000002a7da5ccd9d9d9b9896208000000bb440000000000000088
% 8800000008778ebfd9d9d9c6a5772300000088880000000000000000ff00000000547db9d3d9d9d3
% ac7d4a00000000ff0000005800000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000011000000000000000000000022002200000000
% 99000000000099000000000000000055aa8811000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 0041727b827a7247000000000088880000000000000000ff00000000001865778280775408000000
% 0000ff0000000000000000bb4400000000084f777d82796a2a0000000000bb440000000000000088
% 88000000000031727b827a7247000000000088880000000000000000ff0000000000186277808077
% 62100000000000ff0000005800000000000000000000000000000000000000000000000000000000
% 000000000000000000000000888899000000000000000000000099889900000000
% 77aa4444448899000000000044000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 0000000000000000000000000088880000000000000000ff00000000000000000000000000000000
% 0000ff0000000000000000bb440000000000000000000000000000000000bb440000000000000088
% 88000000000000000000000000000000000088880000000000000000ff0000000000000000000000
% 00000000000000ff0000005800000000000000000000000000000000000000000000000000668888
% 889900000000000000000000330022000000000000000000000033002200000000
% 0099ffffffcc11000000000099888888888888000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 0000000000000000000000000088880000000000000000ff00000000000000000000000000000000
% 0000ff0000000000000000bb440000000000000000000000000000000000bb440000000000000088
% 88000000000000000000000000000000000088880000000000000000ff0000000000000000000000
% 00000000000000ff0000005800000000000000000000000000000000000000000000000000220033
% 00440000000000000000000099bbcc000000000000000000000022222200000000
% 0000334444000000000000008800000088ff66000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 00316a7982797241000000000088880000000000000000ff0000000000186277807b775408000000
% 0000ff0000000000000000bb4400000000084f737b8277652a0000000000bb440000000000000088
% 880000000000316a7982797241000000000088880000000000000000ff0000000000106277807d77
% 54080000000000ff0000005800000000000000000000000000000000000000000000000000000044
% 005500000000000000000000220022000000000000000000000066554400000000
% 00000000000000000000000000001199ee4400000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000008
% 778ebfd9d9d9c698771000000088880000000000000000ff000000004f7db2d3d9d9ccac7d3b0000
% 0000ff0000000000000000bb440000002a79a5c6d9d9d3b9816200000000bb440000000000000088
% 8800000008728ebfd9d9d9c698771000000088880000000000000000ff000000004f81b2d3d9d9cc
% ac7d4500000000ff0000005800000000000000000000000000000000000000000000000000000055
% 995500000000000000000000998899000000000000000000001133446600000000
% 0000000000000000000000000011cccc330000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000879
% acd9d9d9d9d9d9d9b97d10000088880000000000000000ff0000006a98d3d9d9d9d9d9d9cc894f00
% 0000ff0000000000000000bb4400003181c6d9d9d9d9d9d9d3a571000000bb440000000000000088
% 8800000879acd9d9d9d9d9d9d9b97f23000088880000000000000000ff0000006298d3d9d9d9d9d9
% d9cc8e54000000ff0000005800000000000000000000000000000000000000000000000000000000
% 000000000000000000000000330022000000000000000000000055bb5500000000
% 00000000000000000000000033eecc11000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888000077ac
% d9d9d9d9d9d9d9d9d9b977000088880000000000000000ff00003b8ed9d9d9d9d9d9d9d9d9d3811c
% 0000ff0000000000000000bb4400087dccd9d9d9d9d9d9d9d9d9985b0000bb440000000000000088
% 88000072a5d9d9d9d9d9d9d9d9d9bf77000088880000000000000000ff00003b89d9d9d9d9d9d9d9
% d9d9d383230000ff0000005800000000000000000000000000000000000000000000000000000055
% 000000000000000000000022220022881100000000000000000088888800000000
% 000000000000000000000000bb990000000088000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800318ed9
% d9d9d9d9d9d9d9d9d9d998410088880000000000000000ff000079ccd9d9d9d9d9d9d9d9d9d9b973
% 0000ff0000000000000000bb44006aacd9d9d9d9d9d9d9d9d9d9d37f1000bb440000000000000088
% 88002a8ed9d9d9d9d9d9d9d9d9d9d9a5470088880000000000000000ff000079c6d9d9d9d9d9d9d9
% d9d9d9bf770000ff0000005800000000000000000000000000000000000000000000000000000088
% 889900000000000000000000887788004400000000000000000044003300000000
% 000000000000000000000000998888888888bb000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888006abfd9
% d9d9d9d9d9d9d9d9d9d9c6730088880000000000000000ff00319fd9d9d9d9d9d9d9d9d9d9d9d983
% 0800ff0000000000000000bb44007bd9d9d9d9d9d9d9d9d9d9d9d9a54700bb440000000000000088
% 880062b9d9d9d9d9d9d9d9d9d9d9d9cc770088880000000000000000ff002099d9d9d9d9d9d9d9d9
% d9d9d9d9861000ff0000005800000000000000000000000000000000000000000000000000000044
% 004400000000000000000000445588003300000000000000000099889988440000
% 00000000000000000000000044000000000044000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000088880077d9d9
% d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb2d9d9d9d9d9d9d9d9d9d9d9d9a5
% 3000ff0000000000000000bb441894d9d9d9d9d9d9d9d9d9d9d9d9c66d00bb440000000000000088
% 880077d3d9d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb2d9d9d9d9d9d9d9d9
% d9d9d9d9a53000ff0000005800000000000000000000000000000000000000000000000000000055
% bb5500000000000000000000555550881100000000000000000044000011330000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000088880082d9d9
% d9d9d9d9d9d9d9d9d9d9d9820088880000000000000000ff005bbfd9d9d9d9d9d9d9d9d9d9d9d9a5
% 2000ff0000000000000000bb4420a5d9d9d9d9d9d9d9d9d9d9d9d9d97700bb440000000000000088
% 880077d9d9d9d9d9d9d9d9d9d9d9d9d9820088880000000000000000ff005bbfd9d9d9d9d9d9d9d9
% d9d9d9d9bf5b00ff0000005800000000000000000000000000000000000000000000000000001144
% 004400000000000000000000bbbbcc000000000000000000000022222200000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000088880078d9d9
% d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb9d9d9d9d9d9d9d9d9d9d9d9d9a5
% 2800ff0000000000000000bb441894d9d9d9d9d9d9d9d9d9d9d9d9c66d00bb440000000000000088
% 880077d3d9d9d9d9d9d9d9d9d9d9d9d97d0088880000000000000000ff005bb2d9d9d9d9d9d9d9d9
% d9d9d9d9a53800ff0000005800000000000000000000000000000000000000000000000000001144
% 004400000000000000000000220033000000000000000000000066554400000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888006abfd9
% d9d9d9d9d9d9d9d9d9d9c6730088880000000000000000ff00319fd9d9d9d9d9d9d9d9d9d9d9d983
% 0800ff0000000000000000bb44007bd9d9d9d9d9d9d9d9d9d9d9d9ac4f00bb440000000000000088
% 88006ab9d9d9d9d9d9d9d9d9d9d9d9cc770088880000000000000000ff00209fd9d9d9d9d9d9d9d9
% d9d9d9d9861000ff0000005800000000000000000000000000000000000000000000000000660055
% bb5500000000000000000000888888000000000000000000001133446600000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800388ed9
% d9d9d9d9d9d9d9d9d9d9a5470088880000000000000000ff00087bccd9d9d9d9d9d9d9d9d9d9bf77
% 0000ff0000000000000000bb44006aacd9d9d9d9d9d9d9d9d9d9d3811000bb440000000000000088
% 88002a8ed9d9d9d9d9d9d9d9d9d9d9a5470088880000000000000000ff000079ccd9d9d9d9d9d9d9
% d9d9d9bf770000ff0000005800000000000000000000000000000000000000000000000000444444
% 330000000000000000000000330000000000000000000000000055bb5500000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000005800008888000077ac
% d9d9d9d9d9d9d9d9d9b977000088880000000000000000ff00003b92d9d9d9d9d9d9d9d9d9d38323
% 0000ff0000000000000000bb4400087fccd9d9d9d9d9d9d9d9d9a55b0000bb440000000000000088
% 88000077acd9d9d9d9d9d9d9d9d9bf77000088880000000000000000ff00003b8ed9d9d9d9d9d9d9
% d9d9d383230000ff0000005800000000000000000000000000000000000000000000000000000022
% 88bb00000000000000000000000022000000000000000000004488660000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000879
% b9d9d9d9d9d9d9d9b97f18000088880000000000000000ff0000006d9fd3d9d9d9d9d9d9cc8e5400
% 0000ff0000000000000000bb4400003189c6d9d9d9d9d9d9d9a574000000bb440000000000000088
% 8800000879acd9d9d9d9d9d9d9bf7c23000088880000000000000000ff0000006d98d3d9d9d9d9d9
% d9cc8e54000000ff000000580000000000000000000000000000000000000000000000000088aa88
% 3300000000000000000000002277bb000000000000000000446644556600000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000010
% 7798c6d9d9d9c698771800000088880000000000000000ff000000005b81b9d3d9d9d3ac7d450000
% 0000ff0000000000000000bb440000002a7da5ccd9d9d9b9896808000000bb440000000000000088
% 8800000008778ec6d9d9d9c6a5772300000088880000000000000000ff000000005b81b9d3d9d9d3
% b27d4f00000000ff0000005800000000000000000000000000000000000000000000000000553344
% 440000000000000000005599996611000000000000000000550000005500000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 0041727b827a7247000000000088880000000000000000ff00000000001865798280775b08000000
% 0000ff0000000000000000bb4400000000084f777d82796a2a0000000000bb440000000000000088
% 88000000000041727b827d7347000000000088880000000000000000ff0000000000186277828077
% 62100000000000ff0000005800000000000000000000000000000000000000000000000000000033
% 88bb11000000000000006655224400000000000000000000440000004400000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000580000888800000000
% 0000000000000000000000000088880000000000000000ff00000000000000000000000000000000
% 0011ff0000000000000000bb440000000000000000000000000000000000bb440000000000000088
% 88000000000000000000000000000000000088880000000000000000ff0000000000000000000000
% 00000000000011ff000000580000000000000000000000000000000000000000000000000088aa88
% 22000000000000000000000022558800000000000000000088888888aa00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000058000066ee88888888
% 88888888888888888888888888ee770000000000000000eeaa888888888888888888888888888888
% 88bbbb000000000000000099cc8888888888888888888888888888888888ff220000000000000055
% ee8888888888888888888888888888888888ee770000000000000000eeaa88888888888888888888
% 888888888888bbdd0000085800000000000000000000000000000000000000000000000000440000
% 000000000000000000000000000044000000000000000000220000002200000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000482800006688888888
% 88888888888888888888888888660000000000000000004488888888888888888888888888888888
% 88882200000000000000001177888888888888888888888888888888888844000000000000000000
% 66888888888888888888888888888888888877000000000000000000338888888888888888888888
% 8888888888888822000028400000000000000000000000000000000000000000000000000010567a
% 7a642000000000000000003e6471674408000000000000002b7ca8a87c3a000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000206008000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000868180000000000000000000000000000000000000000000000005681bedd
% e4c5936a080000000018728d9eaca2907428000000000e7cb97c53487cb97c0e00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000003868382020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 20202020202020203870300000000000000000000000000000000000000000000000005ea6e4ecec
% ecececb67500000010799eacacacacaca27c28000000989b3e3e3e3e3e3e91a500
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000010404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 40404040404040404040404040404040404040404d99404040404040404040404040404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 404040404040404038100000000000000000000000000000000000000000000000002c89ecececec
% ecececec99480000709bacacacacacacaca27408004baf3e3e3e3e3e3e3e3eaf69
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000088ee110000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000006fcdecececec
% ecececece479001883acacacacacacacacac903600a7533e3e3e3e3e3e3e3e53b4
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000011eeff884488005588004466000000000000000044
% 66000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000007bececececec
% ececececec8f105094acacacacacacacacac9b5600c23e3e3e3e3e3e3e3e3e3eb7
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000055c4d6aa00aa0033aa004400000000000000000000
% 88000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000083ececececec
% ecececececae20569eacacacacacacacacac9e5600ac3e3e3e3e3e3e3e3e3e3eac
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000088334488224400000000000000000000
% 99228800000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000079e4ecececec
% ececececec7f083e90acacacacacacacacac975000cd3e3e3e3e3e3e3e3e3e3ecd
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000022884433883300003311000000000000
% 88008800331100000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000005eb6ecececec
% ececececd57600107aacacacacacacacacac8318008d7c3e3e3e3e3e3e3e3e679b
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000bb0000bb0000881144002288000000
% 88447788114400000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000087dddececec
% ececece4812c00005690acacacacacacac946300001dc2483e3e3e3e3e3e48c32b
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000110000000000555544000044000000
% 00000055554400000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000003381cdecec
% ececd58956000000086e90a9acacacac9074080000005bc3673e3e3e3e5db96b00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000000000000000000000000011000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000018798fae
% ae99783300000000000050778d90907a560800000000002bc1a39191a3c13d0000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000001828
% 301800000000000000000008282028080000000000000000002b48482b00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000044bb000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000182020202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 202020202020202020202020202020202020202052a9202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 202020202020080000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000205068504040404040404040404040404040404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 40404040404040404040404040404040404040404858404040404040404040404040404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 404040404040686038000000000000000000000000000000000000000000000000
% 00000000000000000000000000000040682000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000001050581000000000000000000000000000000000000000000000
% 00000000000000000000000000106040080000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000286830000000000000000000000000000000000000000000
% 00000000000000000000000000583800000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000868100000000000000000000000000000000000000000
% 00000000000000000000000038500000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000028580000000000000000000000000000000000000000
% 00000000000000000000000868080000000000000000000000000000000000000000000044444444
% 44444444444444444444444444330000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000033444444444444444444444444444444444411000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000114444444444444444444444
% 444444444444220000000000503000000000000000000000000000000000000000
% 0000000000000000000000304000000000000000000000000000000000000000000000ccddbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbee8800000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbddee110000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000022eeccbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbff5500000000185000000000000000000000000000000000000000
% 0000000000000000000000482800000000000000000000000000000000000000000044dd11000000
% 0000000000000000000000000055bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb660000000000000000000000000000000000dd440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044cc0000000000000000000000
% 000000000000888800000000007000000000000000000033330000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb00000000
% 00082f56716d5620000000000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb44000000000018506d715f36080000000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb0000000000103e5f71674a
% 1800000000008888000000000048200000000000002288dd440000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb00000000
% 2876909ba9a59783710800000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb4400000008678394a5ac9b90783700000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb000000004a79909eaca294
% 7c5b080000008888000000000040200000000055aaffdd99440000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb0000004a
% 80a2acacacacacac947921000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb440000187894acacacacacaca28050000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb0000006786a9acacacacac
% a99075080000888800000000004020000000ddee99440011110000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb0000217d
% a9acacacacacacacaca277080044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb440000729eacacacacacacacacac80370000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb00004a89acacacacacacac
% acac946b0000888800000000004020000000116688550033330000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb0000729e
% acacacacacacacacacac90560044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb44005690acacacacacacacacacaca2780800bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb00107aa9acacacacacacac
% acacac83370088880000000000402000000000000066ddee440000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb002088ac
% acacacacacacacacacacac770044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb440076a9acacacacacacacacacacac903600bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb005094acacacacacacacac
% acacaca26d008888000000000040200000001166ccffbb88440000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb005697ac
% acacacacacacacacacacac892044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb441080acacacacacacacacacacacac9b5f00bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb0071a5acacacacacacacac
% acacacac7900888800000000004020000000ddee88220000000000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb00569eac
% acacacacacacacacacacac902044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb442090acacacacacacacacacacacacac7100bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb0071acacacacacacacacac
% acacacac7a00888800000000004020000000005588661122220000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb00569eac
% acacacacacacacacacacac902044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb44208dacacacacacacacacacacacaca56d00bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb0071acacacacacacacacac
% acacacac7a00888800000000004020000000000000227799440000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb003e90ac
% acacacacacacacacacacac7e1044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb440079acacacacacacacacacacacac975600bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb00649eacacacacacacacac
% acacaca97600888800000000004020000000000000000033330000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb00107cac
% acacacacacacacacacaca2740044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb44006b9eacacacacacacacacacacac831800bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb00368dacacacacacacacac
% acacac945f00888800000000004020000000440000440033000000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb00005b90
% acacacacacacacacacac80280044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb4400217da9acacacacacacacacac946b0000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb0000729bacacacacacacac
% acaca57a1000888800000000004020000000ffffffff22ff330000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb00000876
% 97acacacacacacacac8d60000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb440000508da9acacacacacacac9e77080000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb00002179a2acacacacacac
% aca9803f0000888800000000004020000000660000000022000000000000000000
% 0000000000000000000000580000000000000000000000000000000000000000000044bb00000010
% 7189a9acacacaca2806008000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb44000000567d9eacacacaca9907518000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044bb000000287990acacacacac
% 9b7c4a000000888800000000004020000000440000440000000000000000000000
% 0000000000000000000000580000000000000000000000000000000000000022220044bb00000000
% 0044767e90907a70280000000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000660000bb4400000000216b798d908076560000000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000033110044bb0000000008567786908d78
% 671000000000888800000000004020000000ffffffff0000000000000000000000
% 000000000000000000000058000000000000000000000000000000224e444476ff995dbb00000000
% 0000001020200800000000000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000001150504444ffdd66bb440000000000000820201000000000000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000334e4444a0ee8850bb0000000000000018202000
% 000000000000888800000000004020000000660022660000000000000000000000
% 000000000000000000000058000000000000000000000000001199ffc2bbbbcdffffcdbb00000000
% 0000000000000000000000000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000066dde4c9bbbbffffddcd440000000000000000000000000000000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000022bbffb8bbbbc8ffffa8bb0000000000000000000000
% 000000000000888800000000004020000000440000550000000000000000000000
% 00000000000000000000005800000000000000000000000011eebb4400000044bb4444bb00000000
% 00082f56716d5620000000000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0088ee7700000000dd6600bb440000000000184a6d715f2f080000000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000044ff992200000088992244bb0000000000103e5f71674a
% 180000000000888800000000004020000000ffffffcc0000000000000000000000
% 00000000000000000000005800000000000000000000000088dd000000000000000044bb00000000
% 28768d9ba9a597836f0800000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 22ff440000000000000000bb4400000008678094a2a99b90773100000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000bb99000000000000000044bb000000004a79909eaca294
% 7c5b00000000888800000000004020000000660000000000000000000000000000
% 000000000000000000000058000000000000000000000000f344000000000000000044bb00000044
% 7d9eacacacacacac947921000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% aeb0000000000000000000bb440000187690acacacacacaca28050000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000041f111000000000000000044bb0000006486a5acacacacac
% a99072080000888800000000004020000000228888110000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb0000217c
% a9acacacacacacacaca277080044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% df69000000000000000000bb440000729eacacacacacacacacac80370000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000069df00000000000000000044bb00004a89acacacacacacac
% acac946b0000888800000000004020000000aa8888aa0000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb0000729e
% acacacacacacacacacac90560044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb44005690acacacacacacacacacaca2780800bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb00107aa9acacacacacacac
% acacac832f00888800000000004020000000550000550000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb002088ac
% acacacacacacacacacacac770044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb440076a9acacacacacacacacacacac903600bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb005094acacacacacacacac
% acacaca26d00888800000000004020000000994444770033330000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb005697ac
% acacacacacacacacacacac892044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb441080acacacacacacacacacacacac9b5f00bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb0071a5acacacacacacacac
% acacacac7900888800000000004020000000ffffffffffff440000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb00569eac
% acacacacacacacacacacac902044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb442090acacacacacacacacacacacacac7100bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb0071acacacacacacacacac
% acacacac7a00888800000000004020000000440000000000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb00569eac
% acacacacacacacacacacac902044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb44208dacacacacacacacacacacacaca56d00bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb0071acacacacacacacacac
% acacacac7a00888800000000004020000000339999330000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb003e90ac
% acacacacacacacacacacac7e1044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb440079acacacacacacacacacacacac975600bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb00649eacacacacacacacac
% acacacac7600888800000000004020000000bb8888bb0000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb00107cac
% acacacacacacacacacaca2740044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb44006b9eacacacacacacacacacacac831800bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb00368dacacacacacacacac
% acacac945f00888800000000004020000000550000550000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb00006090
% acacacacacacacacacac80370044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb4400217da9acacacacacacacacac946b0000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb0000729bacacacacacacac
% acaca57a1000888800000000004020000000994444880000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb00000876
% 9bacacacacacacacac8d60000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb440000568da9acacacacacacac9e77080000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb00002179a2acacacacacac
% aca98044000088880000000000402000000066eeee660000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb00000010
% 7189a9acacacaca2806008000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb44000000567d9eacacacaca9907518000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb000000287990acacacacac
% 9b7c4a000000888800000000004020000000000000770000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb00000000
% 004a768090907c72280000000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb4400000000216b798d908076560000000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb0000000008567786908d79
% 6710000000008888000000000040200000001166ccff0000000000000000000000
% 000000000000000000000058000000000000000000000000ff00000000000000000044bb00000000
% 0000001020200800000000000044bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000bb440000000000000820201800000000000000bb440000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044bb0000000000000018202000
% 000000000000888800000000004020000000ddcc55220000000000000000000000
% 000000668888bb0000000058000000000000000000000000ff00000000000000000022ff66444444
% 4444444444444444444444444499bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb44000000000000000000aa994444444444444444444444444444444455ee330000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000044dd5544444444444444444444
% 444444444444bb8800000000004020000000116688bb0000000000000000000000
% 000066bbbbbbdd0000000058000000000000000000000000ff0000000000000000000077bbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbb4400000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb4400000000000000000033aabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb88000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb0000000000000000000099bbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbaa220000000000402000000055bbcc990000000000000000000000
% 000077000000440000000058000000000000000000000000ff000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb440000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000000000000000000000000000000
% 000000000000000000000000004020000000998811000000000000000000000000
% 000033884444990000000058000000000000000000000000ff000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bb440000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000044bb00000000000000000000000000000000000000000000
% 000000000000000000000000004020000000002277bb0000000000000000000000
% 000088ddbbbbdd0000000058000000000000000000000000ff000000000000000000004488888888
% 88888888888888888888888888882200000000000000000000000000000000000000000000000000
% 00000022888888888888888888888888888888888888330000000000000000000000000000000000
% bb440000000000000000001177888888888888888888888888888888888844000000000000000000
% 00000000000000000000000000000000000000117788888888888888888888888888888888886600
% 0000000000000000000000000000000044bb00000000000000000000668888888888888888888888
% 888888888888771100000000004020000000000000440000000000000000000000
% 000044000000440000000058000000000000000000000000ff00000000000000000011ee99888888
% 88888888888888888888888888bbaa00000000000000000000000000000000000000000000000000
% 000000ddaa88888888888888888888888888888888aaee0000000000000000000000000000000000
% bb4400000000000000000099cc8888888888888888888888888888888888ff220000000000000000
% 0000000000000000000000000000000000000077ee8888888888888888888888888888888888ee66
% 0000000000000000000000000000000044bb00000000000000000033ee8888888888888888888888
% 888888888888dd7700000000004020000000000000000000000000000000000000
% 000000116644000000000058000000000000000000000000ff00000000000000000044cc00000000
% 0000000000000000000000000044bb00000000000000000000000000000000000000000000000000
% 000000ff110000000000000000000000000000000000ff0000000000000000000000000000000000
% bb44000000000000000000bb440000000000000000000000000000000000bb440000000000000000
% 00000000000000000000000000000000000000888800000000000000000000000000000000008888
% 0000000000000000000000000000000044bb00000000000000000044bb0000000000000000000000
% 000000000000888800000000004020000000000000000000000000000000000000
% 000011eeffff880000000058000000000000000000000000ff00000000000000000044bb00000000
% 002c6e7b86837964080000000044bb00000000000000000000000000000000000000000000000000
% 000000ff00000000001d7ec1b7acc18b2b0000000000ff0000000000000000000000000000000000
% bb44000000000000000000bb440000000008567983867b6e2c0000000000bb440000000000000000
% 000000000000000000000000000000000000008888000000000069a7c2acc29b5b00000000008888
% 0000000000000000000000000000000044bb00000000000000000044bb00000000003d757d867f7a
% 510000000000888800000000004020000000000000000000000000000000000000
% 000077110000880000000058000000000000000000000000ff00000000000000000044bb00000000
% 6483c5ececece4b67f4700000044bb00000000000000000000000000000000000000000000000000
% 000000ff000000006bc37c483e3e4871c37c00000000ff0000000000000000000000000000000000
% bb44000000000000000000bb440000002c7faeddecececc58c6c08000000bb440000000000000000
% 0000000000000000000000000000000000000088880000002eb4915d3e3e3e5da6a81d0000008888
% 0000000000000000000000000000000044bb00000000000000000044bb000000087a93d5ecececdd
% ae7c25000000888800000000004020006600000000660000000000000000000000
% 000077000000660000000058000000000000000000000000ff00000000000000000044bb00000071
% aee4ececececececdd8c51000044bb00000000000000000000000000000000000000000000000000
% 000000ff0000007aa4483e3e3e3e3e3e489b99000000ff0000000000000000000000000000000000
% bb44000000000000000000bb4400003d8cd5ecececececececae79000000bb440000000000000000
% 00000000000000000000000000000000000000888800002ece673e3e3e3e3e3e3e71c10e00008888
% 0000000000000000000000000000000044bb00000000000000000044bb0000087bb6ecececececec
% eccd7d2c000088880000000000402000bbffffffffff0000000000000000000000
% 000033cc8899aa0000000058000000000000000000000000ff00000000000000000044bb0000599f
% ececececececececece47e250044bb00000000000000000000000000000000000000000000000000
% 000000ff00003dc4483e3e3e3e3e3e3e3e3eaf4d0000ff0000000000000000000000000000000000
% bb44000000000000000000bb44000881ddecececececececececae640000bb440000000000000000
% 0000000000000000000000000000000000000088880000b4673e3e3e3e3e3e3e3e3e869c00008888
% 0000000000000000000000000000000044bb00000000000000000044bb00007ab6ececececececec
% ececcd7d0800888800000000004020006600660000660000000000000000000000
% 00000044aa88110000000058000000000000000000000000ff00000000000000000044bb00087fe4
% ececececececececececc5750044bb00000000000000000000000000000000000000000000000000
% 000000ff0000c1673e3e3e3e3e3e3e3e3e3e53c10000ff0000000000000000000000000000000000
% bb44000000000000000000bb44006eb6ecececececececececece4831000bb440000000000000000
% 0000000000000000000000000000000000000088880069913e3e3e3e3e3e3e3e3e3e3eaf4b008888
% 0000000000000000000000000000000044bb00000000000000000044bb002c93ecececececececec
% ecececae5600888800000000004020000000660000660000000000000000000000
% 332222444444880000000058000000000000000000000000ff00000000000000000044bb0033aeec
% ececececececececececec810844bb00000000000000000000000000000000000000000000000000
% 000000ff001dae3e3e3e3e3e3e3e3e3e3e3e3e9b3a00ff0000000000000000000000000000000000
% bb44000000000000000000bb44007dececececececececececececb65100bb440000000000000000
% 00000000000000000000000000000000000000888800a8533e3e3e3e3e3e3e3e3e3e3e718d008888
% 0000000000000000000000000000000044bb00000000000000000044bb0064c5ecececececececec
% ececece47900888800000000004020000000bbbbbbbb0000000000000000000000
% dd8888ccbbbbdd0000000058000000000088ccbbbbbbbbbbcdbbbbbbbbbbcc88000044bb005ec5ec
% ecececececececececececae2044bb00000000000000000000000000000000000000000000000000
% 000000ff0067913e3e3e3e3e3e3e3e3e3e3e3e7c7c00ff0000000000000000000033ddbbbbbbbbbb
% c9c0bbbbbbbbbbdd000000bb441899ececececececececececececd56f00bb440000000000000000
% 00000000000000000000000000000000000000888800c23e3e3e3e3e3e3e3e3e3e3e3e3ec1008888
% 00000000000000000000ccbbbbbbbbbbc0c9bbbbbbbbbbdd55000044bb007ae4ecececececececec
% ecececec8300888800000000004020000000117788110000000000000000000000
% 2211440000004400000000580000000000bb00000000000000000000000000bb000044bb005ecdec
% ecececececececececececae2044bb00000000000000000000000000000000000000000000000000
% 000000ff007c673e3e3e3e3e3e3e3e3e3e3e3e677c00ff0000000000000000000044880000000000
% 00000000000000bb000000bb4420aeececececececececececececec7a00bb440000000000000000
% 00000000000000000000000000000000000000888800ac3e3e3e3e3e3e3e3e3e3e3e3e3eac008888
% 00000000000000000000bb0000000000000000000000004488000044bb007aececececececececec
% ecececec8600888800000000004020000000660000660000000000000000000000
% 0000000000000000000000580000000000bb00000000000000000011000000bb000044bb005ec5ec
% ecececececececececececa62044bb00000000000000000000000000000000000000000000000000
% 000000ff0059913e3e3e3e3e3e3e3e3e3e3e3e7c7c00ff0000000000000000000044880000000000
% 00000000110000bb000000bb441899ececececececececececececd56f00bb440000000000000000
% 00000000000000000000000000000000000000888800c23e3e3e3e3e3e3e3e3e3e3e3e48c1008888
% 00000000000000000000bb0000000000000000001100004488000044bb007ae4ecececececececec
% ecececec8300888800000000004020000000ffffffbb0000000000000000000000
% 0000440000667700000000580000000000bb00000000000000227799000000bb000044bb0033a6ec
% ececececececececececec810844bb00000000000000000000000000000000000000000000000000
% 000000ff001db93e3e3e3e3e3e3e3e3e3e3e3ea43a00ff0000000000000000000044880000000000
% 00002277990000bb000000bb44007dececececececececececececae4800bb440000000000000000
% 00000000000000000000000000000000000000888800a7533e3e3e3e3e3e3e3e3e3e3e718d008888
% 00000000000000000000bb0000000000000022779900004488000044bb0064beecececececececec
% ecececdd7900888800000000004020000000660011770000000000000000000000
% 1144994444448800000000580000000000bb00000000000000225566000000bb000044bb00087ddd
% ececececececececececc56f0044bb00000000000000000000000000000000000000000000000000
% 000000ff0000b4673e3e3e3e3e3e3e3e3e3e5dc10000ff0000000000000000000044880000000000
% 00002255660000bb000000bb440067b6ecececececececececece4811000bb440000000000000000
% 000000000000000000000000000000000000008888005ba63e3e3e3e3e3e3e3e3e3e3eaf3d008888
% 00000000000000000000bb0000000000000022556600004488000044bb00208cecececececececec
% ecececae4800888800000000004020000000000033ee0000000000000000000000
% 1177eeffffffaa00000000580000000000bb00000000000000114455000000bb000044bb00003d93
% ececececececececece481100044bb00000000000000000000000000000000000000000000000000
% 000000ff00002ec4483e3e3e3e3e3e3e3e3eb9400000ff0000000000000000000044880000000000
% 00001144550000bb000000bb4400087cd5ececececececececec9f590000bb440000000000000000
% 0000000000000000000000000000000000000088880000a8713e3e3e3e3e3e3e3e3e869b00008888
% 00000000000000000000bb0000000000000011445500004488000044bb000064aeececececececec
% ececcd790000888800000000004020000000339999330000000000000000000000
% 0000550000004400000000580000000000bb00000000000000006688000000bb000044bb0000006e
% 9fe4ececececececd58c4c000044bb00000000000000000000000000000000000000000000000000
% 000000ff0000007aaf533e3e3e3e3e3e48a47c000000ff0000000000000000000044880000000000
% 00000066880000bb000000bb4400003381cdecececececece4ae71000000bb440000000000000000
% 00000000000000000000000000000000000000888800001dc2713e3e3e3e3e3e3e86cd0e00008888
% 00000000000000000000bb0000000000000000668800004488000044bb0000087caeecececececec
% ecc581250000888800000000004020000000bb8888bb0000000000000000000000
% 00000088bbbbdd00000000580000000000bb00000000000000330033000000bb000044bb00000000
% 597ebee4ececd5ae7f2c00000044bb00000000000000000000000000000000000000000000000000
% 000000ff0000000050c286533e3e537cc36b00000000ff0000000000000000000044880000000000
% 00003300330000bb000000bb44000000257caed5ecece4c5836400000000bb440000000000000000
% 0000000000000000000000000000000000000088880000001da8a6673e3e3e71af9b0e0000008888
% 00000000000000000000bb0000000000000033003300004488000044bb000000086c8cc5ecececcd
% 9f7a10000000888800000000004020000000550000550000000000000000000000
% 0000668899888800000000580000000000bb00000088330000006666000000bb000044bb00000000
% 00186479837d7a51080000000044bb00000000000000000000000000000000000000000000000000
% 000000ff00000000000e7aa8c2b7b47c1d0000000000ff0000000000000000000044880000008833
% 00000066660000bb000000bb440000000008487579837964180000000000bb440000000000000000
% 00000000000000000000000000000000000000888800000000005b99c1acc18d4b00000000008888
% 00000000000000000000bb0000008833000000666600004488000044bb00000000002c6e79867b75
% 420000000000888800000000004020000000994444880000000000000000000000
% 0000660066005500000000580000000000bb00003355330011224455000000bb000044bb00000000
% 0000000000000000000000000044bb00000000000000000000000000000000000000000000000000
% 000000ff000000000000000000000000000000000000ff0000000000000000000044880000335533
% 00112244550000bb000000bb440000000000000000000000000000000000bb440000000000000000
% 00000000000000000000000000000000000000888800000000000000000000000000000000008888
% 00000000000000000000bb0000335533001122445500004488000044bb0000000000000000000000
% 00000000000088880000000000402000000066eeee660000000000000000000000
% 000066ee55aacc00000000580000000000bb00000088660011224455000000bb000044bb00000000
% 0000000000000000000000000044bb00000000000000000000000000000000000000000000000000
% 000000ff000000000000000000000000000000000000ff0000000000000000000044880000008866
% 00112244550000bb000000bb440000000000000000000000000000000000bb440000000000000000
% 00000000000000000000000000000000000000888800000000000000000000000000000000008888
% 00000000000000000000bb0000008866001122445500004488000044bb0000000000000000000000
% 000000000000888800000000004020000000000000000000000000000000000000
% 0000003300886600000000580000000000bb00000000000000000033000000bb000044bb00000000
% 00256e7b8683795e080000000044bb00000000000000000000000000000000000000000000000000
% 000000ff00000000001d7eb4b7acc18b2b0000000000ff0000000000000000000044880000000000
% 00000000330000bb000000bb44000000000851797f867b6e2c0000000000bb440000000000000000
% 000000000000000000000000000000000000008888000000000069a7c2acc29b5b00000000008888
% 00000000000000000000bb0000000000000000003300004488000044bb00000000003d757d867f7a
% 480000000000888800000000004020000000118888220000000000000000000000
% 0000000000000000000000580000000000bb00000055220000444477000000bb000044bb00000000
% 6483c5ececece4b67f4700000044bb00000000000000000000000000000000000000000000000000
% 000000ff000000006bc37c483e3e4871c37c00000000ff0000000000000000000044880000005522
% 00004444770000bb000000bb440000002c7faeddecececc58c6c08000000bb440000000000000000
% 0000000000000000000000000000000000000088880000002eb4915d3e3e3e5da6a81d0000008888
% 00000000000000000000bb0000005522000044447700004488000044bb000000087a93d5ecececdd
% ae7c25000000888800000000004020000000aa8888bb0000000000000000000000
% 0000440000667700000000580000000000bb0000005577000033444e000000bb000044bb00000071
% aee4ececececececdd8c51000044bb00000000000000000000000000000000000000000000000000
% 000000ff0000007aa4483e3e3e3e3e3e489b99000000ff0000000000000000000044880000005577
% 000033444e0000bb000000bb4400003d8cd5ecececececececae79000000bb440000000000000000
% 00000000000000000000000000000000000000888800002ece673e3e3e3e3e3e3e71c10e00008888
% 00000000000000000000bb0000005577000033444e00004488000044bb00000879b6ecececececec
% eccd7d2c0000888800000000004020000000660000550000000000000000000000
% 1144994444448800000000580000000000bb00000033000000006688000000bb000044bb0000599f
% ececececececececece483250044bb00000000000000000000000000000000000000000000000000
% 000000ff00003dc4483e3e3e3e3e3e3e3e3eaf4d0000ff0000000000000000000044880000003300
% 00000066880000bb000000bb44000881ddecececececececececae5e0000bb440000000000000000
% 0000000000000000000000000000000000000088880000b4673e3e3e3e3e3e3e3e3e869c00008888
% 00000000000000000000bb0000003300000000668800004488000044bb00007ab6ececececececec
% ececcd7d0800888800000000004020000000770033cc0000000000000000000000
% 1177eeffffffaa00000000580000000000bb00112244550000443333000000bb000044bb00087fe4
% ececececececececececc5750044bb00000000000000000000000000000000000000000000000000
% 000000ff0000c1673e3e3e3e3e3e3e3e3e3e53c10000ff0000000000000000000044880011224455
% 00004433330000bb000000bb44006eb6ecececececececececece4831000bb440000000000000000
% 0000000000000000000000000000000000000088880069913e3e3e3e3e3e3e3e3e3e3eaf4b008888
% 00000000000000000000bb0011224455000044333300004488000044bb002093ecececececececec
% ecececae56008888000000000040200000004ea7a05c0000000000000000000000
% 0000550000000000000000580000000000bb00112244770000003377000000bb000044bb0033aeec
% ececececececececececec810844bb00000000000000000000000000000000000000000000000000
% 000000ff001dae3e3e3e3e3e3e3e3e3e3e3e3e9b3a00ff0000000000000000000044880011224477
% 00000033770000bb000000bb44007dececececececececececececb65100bb440000000000000000
% 00000000000000000000000000000000000000888800a8533e3e3e3e3e3e3e3e3e3e3e718d008888
% 00000000000000000000bb0011224477000000337700004488000044bb0064c5ecececececececec
% ececece47900888800000000004020000000aa8899bb0000000000000000000000
% 000000668888bb00000000580000000000bb00004444770000000033000000bb000044bb005ec5ec
% ecececececececececececae2044bb00000000000000000000000000000000000000000000000000
% 000000ff0067913e3e3e3e3e3e3e3e3e3e3e3e7c7c00ff0000000000000000000044880000444477
% 00000000330000bb000000bb441899ececececececececececececd56f00bb440000000000000000
% 00000000000000000000000000000000000000888800c23e3e3e3e3e3e3e3e3e3e3e3e3ec1008888
% 00000000000000000000bb0000444477000000003300004488000044bb007ae4ecececececececec
% ecececec8300888800000000004020000000660044550000000000000000000000
% 000066bbbbbbdd00000000580000000000bb00003344330000444477000000bb000044bb005ecdec
% ecececececececececececae2044bb00000000000000000000000000000000000000000000000000
% 000000ff007c673e3e3e3e3e3e3e3e3e3e3e3e677c00ff0000000000000000000044880000334433
% 00004444770000bb000000bb4420aeececececececececececececec7a00bb440000000000000000
% 00000000000000000000000000000000000000888800ac3e3e3e3e3e3e3e3e3e3e3e3e3eac008888
% 00000000000000000000bb0000334433000044447700004488000044bb007aececececececececec
% ecececec8600888800000000004020000000770077aa0000000000000000000000
% 0000770000004400000000580000000000bb00000000110000334440000000bb000044bb005ec5ec
% ecececececececececececa62044bb00000000000000000000000000000000000000000000000000
% 000000ff0059913e3e3e3e3e3e3e3e3e3e3e3e7c7c00ff0000000000000000000044880000000011
% 00003344400000bb000000bb441899ececececececececececececd56f00bb440000000000000000
% 00000000000000000000000000000000000000888800c23e3e3e3e3e3e3e3e3e3e3e3e48c1008888
% 00000000000000000000bb0000000011000033444000004488000044bb007ae4ecececececececec
% ecececec8300888800000000004020000000441188330000000000000000000000
% 0000338844449900000000580000000000bb00002277990000227799000000bb000044bb0033aeec
% ececececececececececec810844bb00000000000000000000000000000000000000000000000000
% 000000ff001db93e3e3e3e3e3e3e3e3e3e3e3ea43a00ff0000000000000000000044880000227799
% 00002277990000bb000000bb44007dececececececececececececae4800bb440000000000000000
% 00000000000000000000000000000000000000888800a7533e3e3e3e3e3e3e3e3e3e3e718d008888
% 00000000000000000000bb0000227799000022779900004488000044bb0064beecececececececec
% ecececdd7900888800000000004020000000bb3388550000000000000000000000
% 000088ddbbbbdd00000000580000000000bb00002255660000225566000000bb000044bb00087ddd
% ececececececececececc56f0044bb00000000000000000000000000000000000000000000000000
% 000000ff0000b4673e3e3e3e3e3e3e3e3e3e5dc10000ff0000000000000000000044880000225566
% 00002255660000bb000000bb440067b6ecececececececececece47d1000bb440000000000000000
% 0000000000000000000000000000000000000088880069a63e3e3e3e3e3e3e3e3e3e3eaf3d008888
% 00000000000000000000bb0000225566000022556600004488000044bb00208cecececececececec
% ecececae4f008888000000000040200000007733cc550000000000000000000000
% 0000440000004400000000580000000000bb00001144550000114455000000bb000044bb00003d93
% ececececececececece481100044bb00000000000000000000000000000000000000000000000000
% 000000ff00002ec4483e3e3e3e3e3e3e3e3eb9400000ff0000000000000000000044880000114455
% 00001144550000bb000000bb4400087fd5ececececececececec9f590000bb440000000000000000
% 0000000000000000000000000000000000000088880000a8713e3e3e3e3e3e3e3e3e869b00008888
% 00000000000000000000bb0000114455000011445500004488000044bb000064aeececececececec
% ececcd790000888800000000004020000000557788550000000000000000000000
% 00001199aa226600000000580000000000bb00000088330000008833000000bb000044bb0000006e
% 9fe4ececececececd58c4c000044bb00000000000000000000000000000000000000000000000000
% 000000ff0000007aaf533e3e3e3e3e3e48a47c000000ff0000000000000000000044880000008833
% 00000088330000bb000000bb4400003381cdecececececece4ae71000000bb440000000000000000
% 00000000000000000000000000000000000000888800001dc2713e3e3e3e3e3e3e86c10e00008888
% 00000000000000000000bb0000008833000000883300004488000044bb0000087caeecececececec
% ecc58125000088880000000000402000000077aa33880000000000000000000000
% 0000774444007700000000580000000000bb00003355330000335533000000bb000044bb00000000
% 5e7ebee4ececddae7f2c00000044bb00000000000000000000000000000000000000000000000000
% 000000ff0000000050c286533e3e537cc36b00000000ff0000000000000000000044880000335533
% 00003355330000bb000000bb44000000257baed5ecece4c5836400000000bb440000000000000000
% 0000000000000000000000000000000000000088880000001da8a6673e3e3e67af9c0e0000008888
% 00000000000000000000bb0000335533000033553300004488000044bb00000008748cc5ecececd5
% 9f7a10000000888800000000004020000000bb3388550000000000000000000000
% 0000660044007700000000580000000000bb00000088660000008866000000bb000044bb00000000
% 00186479837d7a51080000000044bb00000000000000000000000000000000000000000000000000
% 000000ff00000000000e7aa8c2b7b47c1d0000000000ff0000000000000000000044880000008866
% 00000088660000bb000000bb44000000000851757b837964180000000000bb440000000000000000
% 00000000000000000000000000000000000000888800000000005b9bc1acc18d4b00000000008888
% 00000000000000000000bb0000008866000000886600004488000044bb0000000000336e79867b75
% 4800000000008888000000000040200000007733cc550000000000000000000000
% 000033cc9999bb00000000580000000000bb00000000330000000000000000bb000044bb00000000
% 0000000000000000000000000044bb00000000000000000000000000000000000000000000000000
% 000000ff000000000000000000000000000000000000ff0000000000000000000044880000000033
% 00000000000000bb000000bb440000000000000000000000000000000000bb440000000000000000
% 00000000000000000000000000000000000000888800000000000000000000000000000000008888
% 00000000000000000000bb0000000033000000000000004488000044bb0000000000000000000000
% 000000000000888800000000004020000000557788550000000000000000000000
% 00000055aa901100000000580000000000bb00004444770000118899000000bb000044bb00000000
% 0000000000000000000000000044bb00000000000000000000000000000000000000000000000000
% 000000ff000000000000000000000000000000000000ff0000000000000000000044880000444477
% 00001188990000bb000000bb440000000000000000000000000000000000bb440000000000000000
% 00000000000000000000000000000000000000888800000000000000000000000000000000008888
% 00000000000000000000bb0000444477000011889900004488000044bb0000000000000000000000
% 00000000000088880000000000402000000077aa33880000000000000000000000
% 0000556677cc8800000000580000000000bb000033445c0000221122000000bb000044bb00000000
% 00186e7b86837956080000000044bb00000000000000000000000000000000000000000000000000
% 000000ff00000000001d7eb4b7acc18b2b0000000000ff000000000000000000004488000033445c
% 00002211220000bb000000bb44000000000851797f86796e2c0000000000bb440000000000000000
% 000000000000000000000000000000000000008888000000000069a7c2acc29b5b00000000008888
% 00000000000000000000bb000033445c000022112200004488000044bb000000000033757d867f7a
% 480000000000888800000000004020000000000000000000000000000000000000
% 00005500cc444400000000580000000000bb00004444770000227799000000bb000044bb00000000
% 6483c5ecececddb67f4700000044bb00000000000000000000000000000000000000000000000000
% 000000ff000000006bc37c483e3e4871c37c00000000ff0000000000000000000044880000444477
% 00002277990000bb000000bb440000002c7faeddecececc58c6c08000000bb440000000000000000
% 0000000000000000000000000000000000000088880000002eb4915d3e3e3e5da6a81d0000008888
% 00000000000000000000bb0000444477000022779900004488000044bb000000087a93d5ecececd5
% ae7c25000000888800000000004020000000440000440033000000000000000000
% 00006633ee007700000000580000000000bb00003344330000225566000000bb000044bb00000071
% a6e4ececececececdd8c51000044bb00000000000000000000000000000000000000000000000000
% 000000ff0000007aa4483e3e3e3e3e3e48a699000000ff0000000000000000000044880000334433
% 00002255660000bb000000bb4400003d8cd5ecececececececae76000000bb440000000000000000
% 00000000000000000000000000000000000000888800002ece673e3e3e3e3e3e3e86c10e00008888
% 00000000000000000000bb0000334433000022556600004488000044bb00000879b6ecececececec
% eccd7d250000888800000000004020000000ffffffff22ff330000000000000000
% 0000118855448800000000580000000000bb00000000220000114455000000bb000044bb0000599f
% ececececececececece4831e0044bb00000000000000000000000000000000000000000000000000
% 000000ff00002ec4483e3e3e3e3e3e3e3e3eaf4d0000ff0000000000000000000044880000000022
% 00001144550000bb000000bb44000881ddecececececececececae5e0000bb440000000000000000
% 0000000000000000000000000000000000000088880000b4673e3e3e3e3e3e3e3e3e869c00008888
% 00000000000000000000bb0000000022000011445500004488000044bb000075aeececececececec
% ececcd7d0800888800000000004020000000660000000022000000000000000000
% 0000000000000000000000580000000000bb00000066aa0000337733770000bb000044bb00087fe4
% ececececececececececc5750044bb00000000000000000000000000000000000000000000000000
% 000000ff0000c1673e3e3e3e3e3e3e3e3e3e53c10000ff00000000000000000000448800000066aa
% 00003377337700bb000000bb44006eb6ecececececececececece4831000bb440000000000000000
% 0000000000000000000000000000000000000088880069913e3e3e3e3e3e3e3e3e3e3eaf4b008888
% 00000000000000000000bb00000066aa000033773377004488000044bb002093ecececececececec
% ecececae5600888800000000004020000000440000440000000000000000000000
% 00001199aa226600000000580000000000bb00449966000000220088440000bb000044bb0033aeec
% ececececececececececec810844bb00000000000000000000000000000000000000000000000000
% 000000ff001dae3e3e3e3e3e3e3e3e3e3e3e3e9a3a00ff0000000000000000000044880044996600
% 00002200884400bb000000bb44007dececececececececececececb65100bb440000000000000000
% 00000000000000000000000000000000000000888800a8533e3e3e3e3e3e3e3e3e3e3e718d008888
% 00000000000000000000bb0044996600000022008844004488000044bb0064c5ecececececececec
% ececece47900888800000000004020000000ffffffff0000000000000000000000
% 0000774444007700000000580000000000bb00002266440000007733550000bb000044bb005ec5ec
% ecececececececececececae2044bb00000000000000000000000000000000000000000000000000
% 000000ff0067913e3e3e3e3e3e3e3e3e3e3e3e7c7c00ff0000000000000000000044880000226644
% 00000077335500bb000000bb441899ececececececececececececd56f00bb440000000000000000
% 00000000000000000000000000000000000000888800c23e3e3e3e3e3e3e3e3e3e3e3e3ec1008888
% 00000000000000000000bb0000226644000000773355004488000044bb007ae4ecececececececec
% ecececec8300888800000000004020000000660022660000000000000000000000
% 0000660044007700000000580000000000bb00000000330000000011000000bb000044bb005ecdec
% ecececececececececececae2044bb00000000000000000000000000000000000000000000000000
% 000000ff007c673e3e3e3e3e3e3e3e3e3e3e3e677c00ff0000000000000000000044880000000033
% 00000000110000bb000000bb4420aeececececececececececececec7a00bb440000000000000000
% 00000000000000000000000000000000000000888800ac3e3e3e3e3e3e3e3e3e3e3e3e3eac008888
% 00000000000000000000bb0000000033000000001100004488000044bb007aececececececececec
% ecececec8600888800000000004020000000440000550000000000000000000000
% 000033cc9999bb00000000580000000000bb00000000000000228899000000bb000044bb005ec5ec
% ecececececececececececa62044bb00000000000000000000000000000000000000000000000000
% 000000ff0059913e3e3e3e3e3e3e3e3e3e3e3e7c7c00ff0000000000000000000044880000000000
% 00002288990000bb000000bb441899ececececececececececececd56f00bb440000000000000000
% 00000000000000000000000000000000000000888800c23e3e3e3e3e3e3e3e3e3e3e3e3ec1008888
% 00000000000000000000bb0000000000000022889900004488000044bb007ae4ecececececececec
% ecececec8300888800000000004020000000ffffffcc0000000000000000000000
% 00001182aa881100000000580000000000bb00000000000000114455000000bb000044bb0033aeec
% ececececececececececec810844bb00000000000000000000000000000000000000000000000000
% 000000ff001db93e3e3e3e3e3e3e3e3e3e3e3ea43a00ff0000000000000000000044880000000000
% 00001144550000bb000000bb44007dececececececececececececae4800bb440000000000000000
% 00000000000000000000000000000000000000888800a7533e3e3e3e3e3e3e3e3e3e3e718d008888
% 00000000000000000000bb0000000000000011445500004488000044bb0064beecececececececec
% ecececdd79008888000000000040200033aa842277330000000000000000000000
% 000077aa00000000000000580000000000bb0000000000000011444e000000bb000044bb00087ddd
% ececececececececececc56f0044bb00000000000000000000000000000000000000000000000000
% 000000ff0000b4673e3e3e3e3e3e3e3e3e3e5dc10000ff0000000000000000000044880000000000
% 000011444e0000bb000000bb44006eb6ecececececececececece47d1000bb440000000000000000
% 0000000000000000000000000000000000000088880069a63e3e3e3e3e3e3e3e3e3e3eaf3d008888
% 00000000000000000000bb0000000000000011444e00004488000044bb00208cecececececececec
% ecececae5600888800000000004020008855dd8888bb0000000000000000000000
% 0000335544449900000000580000000000bb00000000000000006688000000bb000044bb00003d97
% ececececececececece481100044bb00000000000000000000000000000000000000000000000000
% 000000ff00002ec4483e3e3e3e3e3e3e3e3eb9400000ff0000000000000000000044880000000000
% 00000066880000bb000000bb4400087fddececececececececec9f5e0000bb440000000000000000
% 0000000000000000000000000000000000000088880000b4713e3e3e3e3e3e3e3e3e869c00008888
% 00000000000000000000bb0000000000000000668800004488000044bb000064aeececececececec
% ececcd790000888800000000004020004400bb4400550000000000000000000000
% 000088ffffffff00000000580000000000bb00000000000000443333000000bb000044bb0000006f
% 9fe4ececececececd58c4c000044bb00000000000000000000000000000000000000000000000000
% 000000ff0000007aaf533e3e3e3e3e3e48a47e000000ff0000000000000000000044880000000000
% 00004433330000bb000000bb4400003381cdecececececece4ae71000000bb440000000000000000
% 00000000000000000000000000000000000000888800001dc3713e3e3e3e3e3e3e86c10e00008888
% 00000000000000000000bb0000000000000044333300004488000044bb0000087caeecececececec
% ecc581250000888800000000004020006644bb55ccdd0000000000000000000000
% 0000440000004400000000580000000000bb00000000000000003377000000bb000044bb00000000
% 5e83bee4ececddae7c2c00000044bb00000000000000000000000000000000000000000000000000
% 000000ff0000000050c286533e3e537cc36b00000000ff0000000000000000000044880000000000
% 00000033770000bb000000bb440000002c7baed5ecece4c5836400000000bb440000000000000000
% 0000000000000000000000000000000000000088880000001da8a65d3e3e3e67af9c0e0000008888
% 00000000000000000000bb0000000000000000337700004488000044bb00000008758cc5ecececd5
% 9f791e0000008888000000000040200055dd550033880000000000000000000000
% 0000000000000000000000581000000000bb00000000000000000000000000bb000044bb00000000
% 00186479837d7a56080000000044bb00000000000000000000000000000000000000000000000000
% 000000ff00000000000e7ab4c2b7b47e1d0000000000ff0000000000000000000044880000000000
% 00000000000000bb000000bb44000000000851757d8679642c0000000000bb440000000000000000
% 00000000000000000000000000000000000000888800000000005b9bc1accd8d4b00000000008888
% 00000000000000000000bb0000000000000000000000004488000044bb0000000000336e79867b75
% 480000000000888800000000006010000000000000220000000000000000000000
% 00000088eedd3300000000403800000000bb00000000000000000000000000bb000044cc00000000
% 0000000000000000000000000044bb00000000000000000000000000000000000000000000000000
% 000000ff110000000000000000000000000000000000ff0000000000000000000044880000000000
% 00000000000000bb000000bb550000000000000000000000000000000000cc440000000000000000
% 00000000000000000000000000000000000000888800000000000000000000000000000000008888
% 00000000000000000000bb0000000000000000000000004488000044bb0000000000000000000000
% 000000000000888800000000086000000000000000000000000000000000000000
% 000055aa5566bb00000000185800000000bb55444444444444444444444466aa000011eeaa888888
% 88888888888888888888888888ccaa00000000000000000000000000000000000000000000000000
% 000000ccbb88888888888888888888888888888888aadd0000000000000000000044aa4444444444
% 44444444444444dd00000099dd8888888888888888888888888888888899ff220000000000000000
% 0000000000000000000000000000000000000077ee8888888888888888888888888888888888ee55
% 00000000000000000000dd4444444444444444444444448877000033ff8888888888888888888888
% 888888888888ee7700000000304000000000000000000000000000000000000000
% 000088000000550000000000583800000033888888c8c8888888ff88888888330000002288888888
% 88888888bf8888888888888888771100000000000000000000000000000000000000000000000000
% 00000022888888888888888898a8888888888888888822000000000000000000001177888888ff88
% 888888ff8888885500000011778888888888888890bf888888888888888844000000000000000000
% 0000000000000000000000000000000000000000668888888888888888b888888888888888885500
% 0000000000000000000055888888dfa88888a8df8888888811000000448888888888888888bf8888
% 888888888888660000000008681000000000000000000000000000000000000000
% 0000556644449944990000001068100000000000008888000000ff00000000000000000000000000
% 00000022ff6600000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000099bb000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000088ee110000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000044ff22000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000022ff6600
% 000000000000000000000050380000000000000000000000000000000000000000
% 000088ffffffffffff0000000028601000000000008888000000ff00000000000000000000000000
% 00000099ffdd00000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000022ffff440000000000000000000000000000000000000000000000ff00
% 000000ff00000000000000000000000000000011eeff880000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000bbff99000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000099ffdd00
% 000000000000000000004058000000000000000000000000000000000000000000
% 0000440000000000440000000000286838000000008888000000ff00000000000000000000000000
% 000011bbdfc433000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000077cdcd880000000000000000000000000000000000000000000000ff00
% 000000ff00000000000000000000000000000055c4d6aa0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000022bbdfbb110000000000000000
% 0000000000000000000000000000bb44000044bb00000000000000000000000000000000bbdfbb33
% 000000000000000018604008000000000000000000000000000000000000000000
% 00001199aa226600000000000000000850603818008888000000ff00000000000000000000000000
% 00000000ff4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000010304868200000000000000000000000000000000000000000000000
% 000077444400770000000000000000000018385058b1b1585858ff58585858585858585858585858
% 585858589c6a58585858585858585858585858585858585858585858585858585858585858585858
% 5858585858585858585858587c7c585858585858585858585858585858585858585858585858ff58
% 585858ff585858585858585858585858585858586a8a585858585858585858585858585858585858
% 58585858585858585858585858585858585858585858585858585858589c58585858585858585858
% 5858585858585858585858585858d384585884d358585858585858585858585858585858589c5858
% 585858585858402000000000000000000000000000000000000000000000000000
% 0000660044007700000000000000000000000000008888000000ff00000000000000000000000000
% 00000000ff4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000033cc9999bb00000000000000000000000000008888000000ff00000000000000000000000000
% 00000000ff4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000000000000000000000000000000000000000000000000000000000000
% 00000055aa881100000000000000000000000000008888000000ff00000000000000000000000000
% 00000000ff4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000000000000000000000000000000000000000000000000000000000000
% 0000000000115500000000000000000000000000008888000000ff00000000000000000000000000
% 00000000ff4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000000000000000000000000000000000000000000000000000000000000
% 0000000000005500000000000000000000000000008888000000ff00000000000000000000000000
% 00000000ff4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000000000000000000000000000000000000000000000000000000000000
% 33eeee3377bbdd00000000000000000000000000008888000000ff00000000000000000000000000
% 00000000ff4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000000000000000000000000000000000000000000000000000000000000
% 998888ccddbb8800000000000000000000000000008888000000ff00000000000000000000000000
% 00000000ff4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000000000000000000000000000000000000000000000000000000000000
% 880000881100000000000000000000285068585858b1b1585858ff58585858585858585858585858
% 585858589c6a58585858585858585858585858585858585858585858585858585858585858585858
% 5858585858585858585858587c7c585858585858585858585858585858585858585858585858ff58
% 585858ff585858585858585858585858585858586a8a585858585858585858585858585858585858
% 58585858585858585858585858585858585858585858585858585858589c58585858585858585858
% 5858585858585858585858585858d384585884d358585858585858585858585858585858589c5858
% 585858585858585858585858585858585858585858585858606040080000000000
% 8800004400008800000000000008505818000000008888000000ff00000000000000000000000000
% 00000000dd4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000000000000000000000000000000000000000000001040682000000000
% aabbbbccbbbbdd00000000000868380000000000008888000000ff00000000000000000000000000
% 00000000bb4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000000000000000000000000000000000000000000000000186028000000
% 998888888888bb00000000004840000000000000008888000000ff00000000000000000000000000
% 00000000bb4400000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008888000000000000000000000000000000000000000000000000ff00
% 000000ff0000000000000000000000000000000044bb000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ff00000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000ff0000
% 000000000000000000000000000000000000000000000000000000001068080000
% 4400000000004400000000206000000000000000008888000000ff00000000000000000000000000
% 00000000662200000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000004444000000000000000000000000000000000000000000000000ff00
% 000000ff000000000000000000000000000000002266000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000008800000000000000000000
% 0000000000000000000000000000bb44000044bb0000000000000000000000000000000000880000
% 000000000000000000000000000000000000000000000000000000000038480000
% 0000000000000000000000403000000000000000008888000000ff00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 000000ff000000000000000000000000000000000000000000001111000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb44000044bb000000000000000000000044cc44000000000000
% 000000000000000000000000000000000000000000000000000000000000700000
% 0000000000000000000000580800000000000000008888000000ff00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000066770000000000339900000000000088000000000000000000000000000000ff00
% 000000ff000000000000000000000000000000000000000000007744000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000227700
% 0000000000000000000000000000bb44000044bb000000000000000000000000bb44000000000000
% 000000000000000000000000000000000000000000000000000000000000501800
% 0000000000000000000000580000000000000000008888000000ff00000000228888224488337711
% 00336677110066666600004488337766006677110000000000000000000000000000000000000000
% 000000000000004488000000000000bb00000000000055000000000000000000000000000000ff00
% 000000ff00000000000000000044885588550044882244884455ee99440000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000115500
% 0000000000000000000000000000bb44000050c9000000000000000022888822bb55776600448822
% 448844004488337750883377660000000000000000000000000000000000402000
% 0011220000000000000000580000000000000000008888000000e677000044dd11888800ff55aa44
% 55cc00449933ee0088880000dd8800bb881188880000000000000000000017675c00000000000000
% 000000000022336688003344220000bb33440000002244000000000000000000000000000000ff00
% 000000f377000000000000000000ff6600aa8800dd4400bb8800ff44000000000000000000000000
% 00000000000000000000000000003344334400003344222200445522334433440000003300224433
% 4422440000000000000000006745bb44000031ff3300000000000044dd118888bb8800bb6600dd44
% 00bb880000ff55aa44dd8800bb6600000000000000000000000000000000402000
% 33eeff660000000000000058000000000000000000888800000055ff990088bb00000000ff440000
% aa994444aa00556699bb0000bb4400bb880088880000000000000000002eacac877e7e7e7e7e7e7e
% 7e7e7e003377005588446600774400dd111199000000967e7e7e7e7e7e7e7e7e7e7e7e7e7e00ff00
% 00000066ffd0bbbbbbbbbb660000ff440055ee00bb4400bb8800ff44000000000000000000000000
% 0000007e7e7e7e7e7e7e7e7e7e7e5cdd1111aa0000dd33555566009900dd1111aa0000aa0000bb00
% dd1144827e7e7e7e7e7e7e7e90ace04400000088ffd6bbbbbb880088bb000000bb4400bb8800bb44
% 00bb880000ff440000bb4400bb8800000000000000000000000000000000402000
% 997766aa000000000000005800000000000000000088880000000022330077bb00002200ff440000
% 889900002288aa0088bb0000bb4400bb880088880000000000000000000017675c00000000000000
% 000000009944004488aa1100449900bb0000bb22000088000000000000000000000000000000ff00
% 00000000225c4444444444220000ff440066dd00bb4400bb8800ff44660000000000000000000000
% 000000000000000000000000000000bb0000bb2200bb0000aa55448800bb0000bb2200000000bb00
% bb0044880000000000000000735cbe4400000000415d444444330077bb000022bb4400bb8800bb44
% 00bb880000ff440000bb4400bb8800000000000000000000000000000000402000
% 88000088000000000000005800000000000000000088880000000000000011bb88666644ff990000
% 11bb77776666cc5588dd4444dd9944ddbb44bbbb2200000000000000000000000000000000000000
% 000000008844004488993300448800bb0000bb11000088000000000000000000000000000000ff00
% 0000000000000000000000000000ff9955bb3300888855ddbb00aa88770000000000000000000000
% 000000000000000000000000000000bb0000bb1100bb00009933001100bb0000bb1100000000bb00
% bb00448800000000000000000000bb44000000000000000000000011bb88668fdd9944ddbb008888
% 55ddbb0044ff990044dd9944ddbb00000000000000000000000000000000402000
% 88000088000088000000005800000000000000000088880000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000011882277aa317744771100bb33556600000088000000000000000000000000000000ff00
% 0000000000000000000000000000ff44000000000000000000000000000000000000000000000000
% 000000000000000000000000000000dd3377660033dd33001177445500dd3377660011dd0033dd4e
% dd2277aa11000000000000000000bb44000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% aabbbbddffffff000000005800000000000000000088880000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000111188000000000000000000000000000000ff00
% 0000000000000000000000000044ff99000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bb00000000000000000000000000bb00000000000000000000
% 0000000000000000000000000000bb44000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 998888888888bb000000005800000000000000000088880000000000000000000000000000000000
% 000b670000005c170000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000338888000000000000000000000000000000ff00
% 00000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 000000000000000000000000000066dd44000000000000000000000066dd44000000000000000000
% 0000000000000000000000000000bb44000000000000000000000000000000000000225c00000073
% 000000000000000000000000000000000000000000000000000000000000402000
% 44000000000044000000005800000000000000000088880000000000000000000000000000000000
% 00735c000000398a0000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 00000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb4400000000000000000000000000000000000b952e0000005c
% 5c0000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000088880000000000000000000000000000000000
% 397e0000000000675c00000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 00000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb4400000000000000000000000000000000005c5c0000000000
% 8a2e00000000000000000000000000000000000000000000000000000000402000
% 0077eeffff8800000000005800000000000000000088880000000000000000000000000000000017
% 951700000000000b9522000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 00000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb4400000000000000000000000000000000398a000000000000
% 22950b000000000000000000000000000000000000000000000000000000402000
% 55cc884466aa8800000000580000000000000000008888000000000000000000000000000000007e
% 45000000000000002e950b0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 00000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb440000000000000000000000000000000b9522000000000000
% 005073000000000000000000000000000000000000000000000000000000402000
% 991100000000aa000000005800000000000000000088880000000000000000000000000000005073
% 0000000000000000005c5c0000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 00000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb44000000000000000000000000000000735000000000000000
% 00007e390000000000000000000000000000000000000000000000000000402000
% 8800000000008800000000580000000000000000008888000000000000000000000000000022a10b
% 000000000000000000008a3900000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 00000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb440000000000000000000000000000507e0000000000000000
% 000017951700000000000000000000000000000000000000000000000000402000
% 880000000000880000000058000000000000000000888800000000000000000000000000008a2e00
% 0000000000000000000022950b000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 00000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb440000000000000000000000000017950b0000000000000000
% 000000397e00000000000000000000000000000000000000000000000000402000
% aabbbbbbbbbbdd00000000580000000000000000008888000000000000000000000000005c5c0000
% 00000000000000000000005073000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 00000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb44000000000000000000000000008a39000000000000000000
% 000000007350000000000000000000000000000000000000000000000000402000
% 998888888888bb000000005800000000000000000088880000000000000000000000002e8a0b0000
% 0000000000000000000000007e500000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 00000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb440000000000000000000000005c6700000000000000000000
% 000000000b95220000000000000000000000000000000000000000000000402000
% 440000000000440000000058000000000000000000888800175c5c5c5c5c5c5c5c5c61a16c5c5c5c
% 5c5c5c5c5c5c5c5c5c5c5c5c61a1675c5c5c5c5c5c5c5c5c5c5c5c5c5c2e00000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 00225c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c71875c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c
% 5c5c5c0b000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb44002e5c5c5c5c5c5c5c5c5c6ca1615c5c5c5c5c5c5c5c5c5c
% 5c5c5c5c5c719c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c1700000000000000402000
% 77883333999933000000005800000000000000000088882e95452e2e2e2e2e2e2e2e82712e2e2e2e
% 2e2e2e2e2e2e2e2e2e2e2e2e2e58932e2e2e2e2e2e2e2e2e2e2e2e2e398a50000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 3995392e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e4f712e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e
% 2e2e5c950b0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb445c7e392e2e2e2e2e2e2e369b4f2e2e2e2e2e2e2e2e2e2e2e
% 2e2e2e2e2e2e71712e2e2e2e2e2e2e2e2e2e2e2e2e45a12e000000000000402000
% 886600ddcc44aa00000000580000000000000000008888732e0000000000000000397e0000000000
% 0000000000000000000000000000675c000000000000000000000000000b95000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e220000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000005c500000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb44950b00000000000000005c5c000000000000000000000000
% 000000000000008a2e000000000000000000000000002e73000000000000402000
% 770044ff440055000000005800000000000000000088887e00000000000000001795170000000000
% 00000000000000000000000000000b9522000000000000000000000000007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000000000000000398a00000000000000000000000000
% 0000000000000022950b000000000000000000000000007e000000000000402000
% 880077ff110088000000005800000000000000000088887e00000000000000002e45000000000000
% 0000000000000000000000000000002e39000000000000000000000000007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e00000000000000000000000000000000000000172e000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000000000000000502200000000000000000000000000
% 00000000000000004517000000000000000000000000007e000000000000402000
% 8899ee880055bb000000005800000000000000000088887e00000000226600000000001100000000
% 0000000000000000000000000000000000000000000000000000002266007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e000000000000000000000000000000000000000000000044660000000088000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000000022660000000000110000000000000000000000
% 00000000111100111100000000000000000000000000007e000000000000402000
% 00444400114444000000005800000000000000000088887e00000000008800110000118800000000
% 0000000000000000000000220000000000000000001111000000000088007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e000000000000000000000000000000002211000000000000880000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000000000880011000011880000000000000000000000
% 0000005555666b444455339922993388004499338800007e000000000000402000
% 00000000000000000000005800000000000000000088887e00005544338855336622669922000000
% 0000000000000000000044338811339922993388554444550055443388007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e00000000000000000000003399228888006600338822bb00992288002288000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000554433885533662266992200000000000000000000
% 000000990000bb0000bb008800bb0088000088008800007e000000000000402000
% 00000000000000000000005800000000000000000088887e000099000088bb445522448811000000
% 0000000000000000000033558844008800bb0088bb0000bb0099000088007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e0000000000000000000000008800bb44997700008800bb00880088000088000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e000099000088bb44552244881100000000000000000000
% 0000005566446b444455229922cc2299110099448800007e000000000000402000
% 00000000000000000000005800000000000000000088887e00005555449955664422118844000000
% 0000000000000000000077448888229922cc2299604444550055554499007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e0000000000000000000000229922cc90446600008844cc11884477000088000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000555544995566442211884400000000000000000000
% 00000000000000000000000000000000001188000000007e000000000000402000
% 00000000000000000000005800000000000000000088887e00000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e000000000000000000000000000000000000000000000000000000114488000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000003344000000007e000000000000402000
% 00000000000000000000005800000000000000000088887e00000000000045000000000000000000
% 000000000000000000000000000000000000172e000000000000000000007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e00000000000000000000000000000000000000172e000000000000004422000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000000000004500000000000000000000000000000000
% 00000000000000000000002e17000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000088887e0000000000007e000000000000000000
% 0000000000000000000000000000000000002e5c000000000000000000007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000000000007e00000000000000000000000000000000
% 00000000000000000000005c2e000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000088887e0000000000007e000000000000000000
% 0000000000000000000000000000000000002e5c000000000000000000007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000000000007e00000000000000000000000000000000
% 00000000000000000000005c2e000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000088887e0000000000007e000000000000000000
% 0000000000000000000000000000000000002e5c000000000000000000007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bb447e0000000000007e00000000000000000000000000000000
% 00000000000000000000005c2e000000000000000000007e000000000000402000
% 000000000000000000000058000000000000000000a8b07e0000000000007e000000000000000000
% 0000000000000000000000000000000000002e5c000000000000000000007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000ff00
% 7e000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000d6697e0000000000007e00000000000000000000000000000000
% 00000000000000000000005c2e000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000055eea00000000000007e000000000000000000
% 0000000000000000000000000000000000002e5c000000000000000000007e000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000dd88
% 7e000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000088cc8f0000000000007e00000000000000000000000000000000
% 00000000000000000000005c2e000000000000000000007e000000000000402000
% 0000000000000000000000580000000000000000000088ff4400000000007e000000000000000000
% 0000000000000000000000000000000000002e5c000000000000000000007e000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044dd
% c3000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000011bbff0000000000007e00000000000000000000000000000000
% 00000000000000000000005c2e000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000000007e0000000000007e000000000000000000
% 0000000000000000000000000000000000002e5c000000000000000000007e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e0000000000007e00000000000000000000000000000000
% 00000000000000000000005c2e000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000000007e0000000000007e000000000000000000
% 0000000000000000000000000000000000002e5c000000000000000000007e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e0000000000007e00000000000000000000000000000000
% 00000000000000000000005c2e000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000000007e0000000000007e000000000000000000
% 0000000000000000000000000000000000002e5c000000000000000000007e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e000000000000000000000000000000000000002e5c000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e0000000000007e00000000000000000000000000000000
% 00000000000000000000005c2e000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000000007e00000000005c907e0b00000000000000
% 00000000000000000000000000000000002e848a390000000000000000007e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e00000000000000000000000000000000000017848a5c0000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e0000000000739067000000000000000000000000000000
% 00000000000000000000508a84170000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000000007e00000000002eac670000000000000000
% 00000000000000000000000000000000000095a10b0000000000000000007e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e000000000000000000000000000000000000007eac2e0000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e00000000005cac45000000000000000000000000000000
% 0000000000000000000017ac7e000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000000007e0000000000007e170000000000000000
% 000000000000000000000000000000000000455c000000000000000000007e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e000000000000000000000000000000000000002e7e000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e00000000000b8a00000000000000000000000000000000
% 0000000000000000000000672e000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000000007e0000000000000b000000000000000000
% 000000000000000000000000000000000000000b000000000000000000007e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e000000000000000000000000000000000000000017000000000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e0000000000000b00000000000000000000000000000000
% 00000000000000000000000b00000000000000000000007e000000000000402000
% 00000000000000000000005800000000000000000000007e00001100226600000000000000000000
% 0000000000000000000000000000000000000000000000000000000022667e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e000000000000000000000000000000448800558800446600000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e0000110022660000000000000000000000000000000000
% 00446600000000000000001100001100000000000000007e000000000000402000
% 00000000000000000000005800000000000000000000007e00118800008800000000110000000000
% 0000000000000000002211001111000000000000000000110000000000887e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e00000000000000000000000000000000aa0033aa00440011000000000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e0011880000880000001100000000000000000000000000
% 00008800000000000000118800118800001100000000007e000000000000402000
% 00000000000000000000005800000000000000000000007e00669922009922880055336622000000
% 000000000000000088006655444455338822bb44885555336622554433887e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e000000000000000000000000000000008833448822445533662200000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e0066992200992288553366220000000000000000000000
% 000099228800338822bb669922669922553366224488557e000000000000402000
% 00000000000000000000005800000000000000000000007e00448811008800bb00bb445522000000
% 0000000000000000449977bb0000bb008800bb008800bb445522990000887e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e00000000000000000000000000000000228844338833bb44552200000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e00448811008800bbbb4455220000000000000000000000
% 000088008800008800bb448811448811bb4455220088007e000000000000402000
% 00000000000000000000005800000000000000000000007e00118844229922cc1155664422000000
% 000000000000000088446655444455008844cc50990055664422555544997e000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e0000000000000000000000000000000000bb0000bb005566442200000000000000000000000000
% 0000002e5c0000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000007e00118844229922cc606644220000000000000000000000
% 000088447700008844cc218844118844556644224499007e000000000000402000
% 00000000000000000000005800000000000000000000007e17000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000b95000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 7e170000000000000000000000000000000011000000000000000000000000000000000000000000
% 000000455c0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000950000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000227e000000000000402000
% 0000000000000000000000580000000000000000000000398a170000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000b735c000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 507e1700000000000000000000000000000000000000000000000000000000000000000000000000
% 00002e95170000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000005c670b000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000228a39000000000000402000
% 000000000000000000000058000000000000000000000000397e7e7e7e7e7e7e7e7e7e7e7e7e7e7e
% 7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e5000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00457e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e
% 7e7e732e000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000005c7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e
% 7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e3900000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000006699bb8800000000000000000000000000000000000000001111
% 0000000000000000000000000000000000000088887788774499aa8888995500004499aa88889933
% 00000000000000000022000000000000000022dd3300111100000000000000000000000000000000
% 00000000000000000044aa440000000000000000000022cc4400000000000000000044cc44000000
% 22dd3344bb440000000044aa44000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000007744
% 0000000000000000000000000000000000004499000066880088bb000011cc77000088bb000077ee
% 11000000000000000088000000000000000011882200774400000000000000000000000000000000
% 00000000000000000000bb440000000000000000000011997700000000000000000000bb44000000
% 11882200bb440000000000bb44000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088ff004488337766004488558855000044882244884455ee99
% 44000000000000000000000000000000000044ee774400330088bb00000077ee000088bb000066ff
% 22000000000000000088000000000000000044882255ee9944116655550000000000448833776600
% 00337777110000227766bb440033667711001166555500334400000000002288882200bb55776600
% 44882200bb440000227766bb44448833771100336677114488337766000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088ff0000dd8800bb6600ff6600aa880000dd4400bb8800ff44
% 000000000033bbbbbbbbbbbbbb22000000000088ffffdd330088bb00000044ff000088dd8888aa66
% 00000000000000000088000000000000000000cc4400ff440088330066000000000000dd8800bb66
% 44cc0011ee1144dd1111dd4455cc00449900883300660044000000000044dd11888800bb8800bb66
% 00cc4400bb440044dd1111dd4400ff55aa4455cc00449900dd8800bb660000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088ff0000bb4400bb8800ff440055ee0000bb4400bb8800ff44
% 00000000000000000000000000000000000011001144cc990088bb00000066ff000088ff00000000
% 000000000022888888bb888888220000000000bb4400ff440055eedd88000000000000bb4400bb88
% aa880000ff6688bb0000bb44aa994444aa0055eedd880000000000000088bb00000000bb4400bb88
% 00bb4400bb440088bb0000bb4400ff440000aa994444aa00bb4400bb880000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088ff0000bb4400bb8800ff440066dd0000bb4400bb8800ff44
% 660000000033bbbbbbbbbbbbbb11000000004455000044990088bb000000aa88000088ff00000000
% 00000000000000000088000000000000000000bb4400ff4466440044cc110000000000bb4400bb88
% 88990000ff4477bb0000bb44889900002200440044cc1100000000000077bb00002200bb4400bb88
% 00bb4400bb440077bb0000bb4400ff440000889900002200bb4400bb880000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000402000
% 00000000000000000000005800000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000066bbff8844dd9944ddbb00ff9955bb330000888855ddbb00aa88
% 77000000000000000000000000000000000044bb8855aa3344bbdd8888aa88000044bbff88000000
% 00000000000000000088000000000000000044dd8800aa887788774488000000000044dd9944ddbb
% 11aa6688880011aa6677dd9911bb77776600887744880000000000000011bb88666644dd9944ddbb
% 44dd8844dd990011aa6677dd9944ff99000011bb77776644dd9944ddbb0000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000482000
% 00000000000000000000004820000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff4400000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000088000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000680000
% 00000000000000000000003048000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000044ff9900000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000022000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000018580000
% 00000000000000000000000060200000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000060200000
% 00000000000000000000000018681000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000004840000000
% 00000000000000000000000000306828000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000010605008000000
% 00000000000000000000000000001058604028202020202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 20202020202020202020202020202020202020202020202020202020202020202020202020202020
% 202020202020202020202020202020202020202020202020385868280000000000
% 00000000000000000000000000000000082840404040404040404040404040404040404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 40404040404040404040404040404040404040404040404040404040404040404040404040404040
% 404040404040404040404040404040404040404040404040381800000000000000
%%EndImage
%%EndPreview
%%Page: 1 1 
%%BeginDocument: C:\Users\canca\AppData\Local\Temp\latexdraw\latexdrawTmp154416053855982867\tmpPSFile.eps 
/InitDictCount countdictstack def gsave save mark newpath 
userdict /setpagedevice /pop load put 
%!PS-Adobe-2.0
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%Title: tmpPSFile
%%CreationDate: Fri Dec  7 05:29:01 2018
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 279 323
%%DocumentFonts: CMBX10 CMR10 CMR7 CMR5 CMMI7 CMBX9
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -T
%+ 9.825849365810194cm,11.365455096364022cm tmpPSFile -o
%+ C:\Users\canca\AppData\Local\Temp\latexdraw\latexdrawTmp154416053855982867\tmpPSFile.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.12.07:1228
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMBX9
%!PS-AdobeFont-1.0: CMBX9 003.002
%%Title: CMBX9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX9 known{/CMBX9 findfont dup/UniqueID known{dup
/UniqueID get 5000767 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX9 def
/FontBBox {-58 -250 1195 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX9.) readonly def
/FullName (CMBX9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 87 /W put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D4347EE3E5AFBE73BA
31023D79A7299D8F662042A8D8B6A7B4E86F48AE98EF848E83FFDE68E17A0832
A181C126D15EC79861796F03957F5A51462C817DF752097718413D012D19C9D4
423A5EAE1EFD4EA7A9651BAE6E45CC194BDCD03FF43F255E58EB5E50CA26BB98
B8B11E21DBFF2BBB04D039E63C453EEDFCD9378F5E7AAE3A93E8691DED5865B2
B78F540F8AA3224BE372B18904651D057608DE4DD729FAC398A80CB904410451
90D66C44E943517A8F4969673B985D9D244FFC743E0AEE309EFD224F7029D37A
F6EDD96E2F88C9D071FF16EDF055955D31DEF10808B343E948BB4F6393D275D0
44C4DABB75332DD716E8127283E8D70511F8EAF4D1A5F72E2F8503A2F964E5F9
39304CC17ACCF531A8C0B6A9D58DBA6F24A4ECA62EECC939E8111E4BF79BDF77
D656F9998F1EFD2ECE3E61CA526106662273D5AD3E74D08E9D4453569B359C2B
E2455F2136B4DB54ADDC3C0256EB7A11E1615AB9323ECCBB6EB48ACD469A2020
A873E88B28AEAACAA01826C1C18120774FD5324DF9AD36FC256706DB24FEDF34
0FCDF04B12ADB66876EC7AEC183A1EA8BABD38BADDCD0EBDE11A5A1BEADD0F7B
83585C3BA141A8B296872F712EC42C625DBEE9EBD2C414E57CC1378CAEFD00E8
DB4B84F51967F2968329B8503C4B37A56F6136DA89167FE3AAA93257140FE94D
D96C7F85C6F82AE1596511ADFEFDEBC1B41B0395E66D2074B39B5565AD4687FC
89BB4BAFF0F7568D9EAF069CCBA2DFF61C59E2CB2F4274459792C5D097FDE6DE
0E40AAD8DD8F64C28D04EE50AB79EA7D3420CE42D39FA9080E9E046A4F22B5AE
AAA17FE750BFAF7BFF097E4A6E9362412C55E25767C311832C1C0C76005C733F
E046FCFD4CF49C6181C24BD299E90F20A0A0ADC868C11A8AB7F610186D0483A1
B3BC4FAFFFE12FD746777209B4DCEF0E4ED15D90F19BF2FB2B56231FFDE5D40B
146E3FAEDDBAB365D88CED98629B9855AD6E57FB01BB82659BD320D248E5F7D7
B584DD43E1F5DD2C91945DDB772E5A62AEB7080AF36A83D2BA8533E7E6FD287A
924F616F8090E9FFAA607A21F38718D668FBD6BA3434500BD01EDCEC00354F68
E1D0E9A921DACFB83FB61C1A5C27D027CAB348C4B7E2781013B68CC5A2BC8703
2809A49A0C2E9E004D56844EFAB4A8763B103CF7CFF980C9CF7F6BE28814CBDC
348E2486D9379DFFCC0E9329854D518B49B98F582972B0D1D18A3319EC00DDF2
F64C2CD2DCDBA287B279F98D16ABD1D140246E8B66C759571981FE7402F14C94
18394A4C426AEE4B0688D86D08B408763DA3537E5BA0D6A6796C316FDB0193E6
77C6F257BEDDE17F2CA5E661F434964BAC9834BFF36F563637872FCDDE94CF22
F076D1C2DF6357D8A26D305D52C9086CE36F49CD92ADFB4306705A0887407C9D
59B6BFDB82379111C9E33692BA9E2ED9782CE4334C6125933A2F210684642DF5
3B129F955BADA1E86D6B80CE299FA0D1C0AED1AD61686AF1052A188881E2125C
98083BA8255B92B9CA0B48EB57F936790DEFA6E6947C0FF4083FEC296FF3034D
AD657C64F2675EED2B4EED1E88F0B1338762CB4C64C79F111CDE9777A000F65A
F9979943ED7C445815BB59052B91F0FEF7219E3DF27E1D5155B9C42B7BBB06EB
1815997FC3471CF963A15B1C5E4653C84236CC5BF55A31B94E394C635B95D847
69E8134F4FFEAE836CD6AE71F58F48AA2F95BDB1E2CB89DEE590EFF3AB7097DF
AC185303E647628F5D87E0D82E6685DB467A0F8B7D3AB2B7F3F11BCC99BD48A6
FA5D4D75698454CB74451B486CDA6B65547C0CBAA563EC3574364540AE7B11B8
F9E86BFA655CDE88DE2E7D41851FD208649E9C011E04C78ED9209FD56E2447BC
E1AAA0A3D36F6406C60F6B19347CCB7D56A84D961E17E361F92C5542109D9BFC
FEA2FF9775230EABE3333EB25A40E29016E9A8255713AC8336B8F7DEB89FEFEF
4006DAAEA26C6BA1EF494AB99C2BC960D9E07981BABE909B5C121F2CAD48C938
A36129D10D38AE8F5C64879F61138FA9F7479341F5C5DE86376B65A642B9622B
E58DBBFAFE07EEE1D11DE9DC34309572868586CD92D39FADB711883AA85210E5
C82842EF225E55370FE0AC600A170687C60C8091B0625A1C5589186F3C7C1218
B15B5CC3A5CDBA7085338D963D929A18A651EC7CC39B8500899DE9220A1BA363
78698E414607C34E06E29AC5BCBAB98A70DC2BDE0FDDCCE22D4717EDA7D95397
33420EDEC2F1D6E7072FEA85945378A6BE9C7F68DB4FDA6B5BBC0032B3C02519
F4168C804B6A101AA60EF4FC40C2428AFEEF5A80F9B76D561C8A21B3633E13C5
215A14D54B8A1E6143A9CA0B5794D20DF97C35B3C9E9A4673AC2123E7DD8E216
044269B1D6AEEA46757F8D9AC5C8A92BDC1EF22EE0575C80CA7895722CDD2BA6
F9A208E6BEE5319E63B3B3CA197D9739A4498AAAC9C7484D61418ED2BEBF63A7
F5283A075D1DFD4B2702E1551A0D1A90DBBBEFB6A55B5F29C869763A856C4E61
EEB3C8E14E3376B7D01A4E265C6C8056ED23931DCF669A0EC9427F74A147AD8E
82E172FA6C13DB1281651BF3D14163D963EFC7384BFC4B3B9274274DCEF647FD
D6DF0CC146BE8AA660D709526B394CE253369281FDB45AE071319E8FAE4EDF10
2867A431E22779EE40D885E95AFBF62916D9900016805D004C0375D29130CA14
F3E466AF350D1A5D181816EE1C4BC75DC09E4195DADA5AB09CE9EF2C4D5F7CEC
6C16BB6EC791E2870DB46B6B06DF421E7A2781D82A07D92316B553D068A1DF5A
8B19041F96ED637B932DE184F8B856FE1947F5FC8AE505F0E3953B325E0FD6FA
825EAD072AF06E258BD35607A1F082DFBC2BA5251DEDCAF68B4D03086CCF84BC
DF70BB8D2EEEE3E0EAEACC8440AA130273E5C7E78A15EEF66A9A1E0D5E022188
0AFA50FA55C6C461C743E1845FED77378D639839F548D6827CF371AD3DFCE592
B7F6E29FFEB6CB92B33E24E34875A5A92C08806F67E18AEAD86447A977890AE2
30A452F33B609DE5B792D9CABF39A086C0936AECC081CBBC810B3EE1D35F9717
260E76132661E3A8170759084AFAB04A6E773E9714A6D486E0BF46F336A7CDB5
C325E28E747295CB0E8FFB289F4907BAEC213D4D0B495A246A3DC359B995E9C0
C5322D750E13159B7242E4C4DD27932AAA130BC6B0400428B5E6F928CB8F7658
EF02F7522779CDBB67722E09774C419489192FDAD3DF272C95BD9BD64DDF0BDE
999FC72607F52805DCCA5EC17150EEE38B866E3D5199E5A6CC262785EEB11D51
80E79545DA191071487EF70C7FAC0CA345955F797912C1268924DD79D0FCA3BA
460F43E74975C04296E34423BD366A4EF7EE9463ECEF08F7E7BC8BEC570F812B
066383C2EF5375FB1504537D902818D63B30385421FF81AD92A1C153852B1427
A39685A76DD636DC4ADCC53F2A78F795F48EFB23807E5751023FE324CB401281
60F8A8DA779A245DBC26E73B61A1450F25AC276E1B5240578E85E1CDF5A784F7
D4F5BAFA76F70300972E4B130C685189C4010B9035A5CBF0562EB3B387FD89F5
C53A25D3E883B506E0B477389DA5CFA82CB157D8C30F287678B0F9A17F5A8704
ACB5DC57D7CAD21A4EBA49248F277F929D3E49B17463EA5F31A4FC11B0836E34
3A5FDDC6B9A45113590F114B99566D18C21464E7FC1D9AAA9B1133E5E8E2D14B
8E143E1E16595C42376694A83684E3B217A17F158DE89549ECCCB443701B520B
E20B972CA5EC6405C479C5054663D48A22D105AC98AF094340B5964D0C26D9CE
241D2706D3444C1405B2C9F7C912CDFC87EE8FBA01C0020D1AED1A6205A8A45F
8504B42431DB5409BA8AC472F2FCB4CE698F6DA92C4C8BF1293C2C998B771540
3D933EB5E976B7D2252DAE9584E5C6864B29C3048EE159BCB7638CA956E07F81
F76391380AAD2F1DC2DC201BAC657A1BC93F5569A5F612A4EB6B01F136F41B87
E20D4DD6ABD7ACF1275FD80D9BBB87A45572979BDFEF59212F1F6D9423FEC976
1228499D626A328569B4BA2755B1ACD20796398AEEC5F3C61122D52124996535
D0813227F549FCF59C6182D6514A70F9E38565C8C98D5F797318FB531B5DA58E
EC60235B6F1D97CA5D495CF689C3F9B3260998ADA1204AC00135C7C72700DB00
7C06798A46E897875BE619508DFA2201FDCF689E51C3D85342247B059C0DDA14
766A31E3E25E792F090DF3EA0C45C3F64AFB918BDFF92FF0ADA2F71866CA190B
87B2FF90C872284652619F084E2259F044E2980101A62004AE9F4BBF675C5279
BA3437ADDF2D552A033D2301A669EE8BBC840C0028275D077B8E9977D447B396
F1D82608E030FA43511BA01C345078986B8C35B6C6990D018C2DD2CBC7774450
D8482DBB262BB816E6A26A1FEB084FC2027C62D17790C80C65A9183F23BB2458
34FDC5D566C1B667EE801D0521BBA520A15C0C923EDAD84AD6A83DB23806711B
0AC2631C15EB1D33C26F8D65852EC37A3479152557366929A63B753226059870
45CE6403CA23FF95BCFB6F0C8DF8CAFCC0BF27C59414217CC6552F5945D9E6DA
AF83F4AB1917742F7502B069DE44A6ED3BEC966F59A84FAA2F8DE441C11FB122
DEF1768D250C0CA5F2DDE6FC4E24FD3AE4386B91ED2A492A959BF7E4C0AABEAA
5BC2D933147A4A21FC5E5CF3B2AF5C0A768A8B79337FA3934A43E24F9F7DF24D
22C5BFE4DF1FD57289A6E1C9AA48D32D20F613AE94B4308E0D3BE4D1BC95B33E
A9911B82EFF461D295C5462EE2B12A3E40B89E0BC778FB76F8B847B6AA99E061
3444A55D83FF839B926985B0F4E562D726FD99C5DC86DA24BA7AF38B93C90F51
A937E7C35793010F351594465B39BA5276F223DD3CAE1868B969D8EC93AA50C1
4C7E51D0D7F5E9F0EDBE1BE24BA5A977163BEC724D575749C56C4F39BD60F3AC
47B930C9E07A2D59642C9DE85EA6FAD1E7D8817812C049FDAEE148E8AB207B89
B2324191F1A82A7C499E7BF09CF1299F0ECF55EB0A2A32C5BB89411B4AF2A401
074718859CDC27C2FA78BC5269D5A38DBCAE55F6CB669DEED2C36E5B0D590504
B6162391FACA9F20224E6AD24B86CCAC0048EC7A618B3263F82A317B3969F0FA
9D5EA4676B27F371785FFF6599B61A6D32E82DD9D511B04E03F14C95A4CA6CD9
5B59A8A7BFB2AE32E9357C7766528E9F74BB8D0B9317F02EDACE2033B7918D6B
8616F1C1B3E113B0F77B0A1292E41F8353DB55EBD872290491AE1FBE95EC034F
DAC1394928930EE297693598D97EBD0720A0A7B4A5DF4EF4BE0E2E0968E64CB8
167CA1B8C40A779023AB6F74E0F1626D8BFFA96EA09CA88524837B18DA6152A4
3F0DC3C3958EFFF86B07581B416720FADFFC4AD35F1553A18944A6DB8FAB0AE0
A8118C09DC8E905CA32904B44E0541FCC7EE555335E61108D8346B4EF697DE67
7F67E1E4CF0EE2F6D89D10FF2D115C6F8163B8180378018F58C148EAD188E969
C60B83C7B295F30614B93FF925BBB2974B0B9C68C2BBA6E973DBFB5500A574A4
F7348BD31C735A1E57519990582D8F7D97F8B63D9DCD488DC569D5B392FF26FE
F06F9762956D64E9C258EB9B90733BAA8F1912F3B9AE88C6D14DB46B7131BCBB
D47CE60D9C63FE0B9620D03F615EEDAA3C76A7285F9897A0D476F35F5CC158D2
D148CA1E5A96D16253B360F34336D476FABE9A434AAD5FCF65A27F48C5BC3519
DCBC35DC1D324A270996B8DEC6D3833E76A434E05074C7E3FC8E5633D6B25B7D
69D9BF7039DE4E755A7E3BEC8A4E5929A98FE265E742B269666C75644E53E6A4
C5AC907F7DEB319BC88CD1A7F29A0A4D43D471892A674D50C70BB6EFE5740F97
50522F2EF056E208C0134EAF15DC9F85C7C06066782B715A5EBC22AD414A169D
86A2F606150B6F903D3AAAF44E75649DC410C3B8C845909BFC8235E573A2D291
19440D724C960014917EC802414651E298160EA70FD54BE4EAA1A1007ABDA8B6
085A89221C3DD5E9C759C19BAD6EFB91360CFDEE6C4876AC19B4BF67A38BBD5E
0BA20996BEFC1F8C427EBDD666B30DF5A2389F1F3BCA17132FEFFD3231570AD2
61CB33381A0D2E2FDFF470FAC3A60E61E99C76A3F4A6BF32FD4B2B6DB6B27F2A
76A5C35E24E78F7DF28AE1B7D04A71097881CB67E060DE537C1A318B95964FAA
1455264E48DAC7689EF10905E381C569DD65825089EF325595388FA5BA6A1EA2
E2536872DE92D46AF3BB3F1DD920FBAA4481034DF831FD15C01798AB04A73B50
1461BA7298B2EAD460D6E645A9ED41EE0E0282C335AA716D7563AD7CFE2841B7
0C782ED3F6D31871350A12A41AEFE21E9A03DF676671E4C953E51F801CBEE091
BE0B7B413B7EA2479E2529DE9E49C03CBE8159DB1B28D2E290826B6D01B35DDD
083F85E9CAE378C1A3B7065280D9FFEB04A02B76F1F0E547328F005CBD39936A
5063812D1C958FD4EA6BE9FF87E5FAAD483055819D1DC39D31B8417B44F30B50
EC95E26103A0DC2241B56DC62D424438A5FDBA8AD4D9B417F0DC31CD82DD772E
FEA23036A719927A4654876985FF4AC2D28A180969A76F3584D001A2EFAA2BB3
7F0CC228CAD9A485F3FEE3E0F0059D3BD8484FB97593A6EF08F9D352E3860613
2617ED6138ABE551DBC67F0151D0F9CD83A613C245E23FEE6FCC8858592AB43F
8E66FDC5A27F9312091478D102BF867B320431F7A6EA42EA763C51FF7E0E0FED
A6A830AC95600C837033968174A9406D0DFA72FD65ADF153E5CB3420CEC76A3B
43DA6743F24C6CFE0E9A7E78D540385B657CCB379BF5E238A07B836F907017D9
C0CBA503FCF625536E27B77A262A0EA1C3DFAB015EC859FFE5BB26197A05F4F9
87046F3AFD3387CF1B040DA7B7CFB1EE92816C7C172164CBAE3E9204559C2A74
87E4A41AFB16E7789686047067947F41C82A26E3F343E7359804BFB3B7904F4A
12FBB7EA0E8C26801ACE0E9093D7E2C3E288F781E3E6A53B8C121625CEE7354F
B1A059AFE21AB4DD2B43A9DA710F2D811F63DC41699FCC43330DC7AB9CD10F00
C959F73155E9D63EE7B20970C7AB1B9A8A51D0DA0ECDB917291FBD57CFAFD9F0
E1636B9DEC48FA7FE5B225283546B01ACF3036F1B5F399688F1657E41A5F4EEC
2CB1324C136CFE6C6B92958597B952552EB7A8D58BA7773CF685FED451D89392
C290D38D67FA7519ABD024B85D3002D8592C5D30B50726C7BD17577FDBA79E38
3D99B3A08797696E593C0BEDC50706C986E6BD05AEF30108F4BA192E956D2942
72F59E1A025FC31568C2EAA1D5942A479203EC01B37626F1EC334DC3C6527C06
41162B68D66E7923911921E861FECF78F36E4BA60B4FB8554E83AB554054B2C5
8C05D3FBA010846BC5B32E9ED62C6A0E8D92B8F3546CE0406A87634E2D96F5E1
F007DA0161E75DA55FEC10F7564CD7CB9AA0A016438D082D9A9FD107CEFA7B27
BA3C61B3A13D9A30E4BAD25B2FAE3ECE3FEBC9722B448E3AC5DD9FF784718F6D
DF58A8A7DA91086BD86AC776CAF3F4F2DBC2F0AA81600D53D2A0EB178568DD96
1ED459E1CD3D897776901284DE5673813ABA0CA7ED342130B261727DBAE566E5
F57FA86A7B4EE5F48F039FB95D318DC142E26022D7F85B34558E99078C5E6467
FB2ECB21BCE1E271E22FFD2E71F203DE5D3BE3EE5DC01A9FA9D3E4D01C0F12D7
D430BF07CD774516464C6FBD414FF6F0C22B9C02C7B4DC659BA3D7306AB4EA90
12AD3D9EF3C73E567590ADB3C6D261F650E218E7A87DFD9185BD17E8FB9B8AF8
5616C4309919470B2E01F294D6CF5A8D89BEE7B3B199C4D935EB8F12308C4610
01A5E4EA5AC0B1B2F83CBC8766A233E2C20EC7ED88947D37A85960A3CE640A3F
6B483124923A2145E6C96132AC32FADA7E7C4690321A6F3D955B9E08D8BD04B6
0D1231A97EF2EC355A1DF0D03F2E7B189272BC7F96514485F56DCCFD4F10F83B
1DD57463B79DE74C27D4962D5067F1A3D6E68A8D5C7B8CC2A0578143B18D24DE
A25258F7651C79E82EFCFC28C3A9778ECDD7DC83BDE501B1592EA9CBBEF74E20
B52A8285CDEB84AE839689A07B7FF372E87733BF53AE9ABA6EF64CCF245FF8E6
83092641EC5248DBEB4BB99A1EDB157A7BA7D7B248BE45E1379891C73885C32A
DDAED9DB6E7231DAAD70D844DED7D7420F53F914AC846BF3A55EB46891A16000
EF6B9E8F78CA3FCDAE4DD0AFFD5CEE59AD300B26C876858F375E44C92D7456B4
60763D7A5D7FDCD9B8647C48059E8AA37FB7F2AD277B17025F3D94D362BB9D80
C3170E74AE1B9E0A294FAB8AA9407C88E1888E64403E0894616B044B016EB8E2
CAFFCAD92749B674D0F8E6A617045AADF737A8567433C4709D38C3CDA55BF202
866882259BEC1B7603910226988C0AEDC6FF093DF62FBC70436478987D640232
37E40E1546B0CC0D8A4BBA2BEAEC5A38CC4FFD80D45173D484D0A9FDB03A40F5
B18F3309FA481DE78854026AD61846E8E9A45E363C6E33D0CCA4BFF6EE9B075F
812EFB4132ADFA390DECCE1D52E628AEC7A8FC38F08F44CE756BF10B29E7773E
0F00834795BAB5DA66A3CBF2ABEA2CA8A45FF79E115E54F32E3A28687BD946AF
6D1AF5EEDF39C82B3BD190AAC760BF5FFBEC8FF5113B7BCB8AFBF12C36358C96
B240608790BC61F58869B52137B602A06D074F4D37BC027C8013AAC3B0208B2A
84B1FE46DC333C0A1B66EF9687749920BF3CADEE7E8C9564F3E9F9F63EFE4D5D
27057CAD391D0B1CD51C4BAC7F6B64B701F8CD57C5985A1C5E0D8D480E55EDB4
2CB43CB21DCE56E236263C374C7EEB787E6F91085CA65458D6BBC7F225C9E66A
3425CDF5A778DF78768C5BCB1FDB9DD8F62002206501025C6A30C12FBDA92FDE
498CDE92CD95CD3D60E1DB3D4D3111090A3444E7E295BE0EA0AEE1C117EA3EDE
F4BD4BB4EEA8A03FC87C1625CE98D1CCED2FB916FE09E70DB2C4083EC30D92A4
57C58C2A30BA403D4513EFA58081A17CF8D48985603BD0B4825BD3DDB76D37CD
BB4D3AA5E1CA1AAE9CC84CE08D816D6338E0F18921CFA4BBE802A9914DFECCCC
C097F10AE699AC5BD47626603B8F2B9A4FA018698493924C6C4773DA259C76ED
B396290FF9F0F11106D9ACDE6E224ED8E687B94D3B392FFEF820221CBED14332
D54AA112191FD85D71713847C2AD9E266045D0BCC83536B7C4443DE3498ACB30
0CBAA3986D924ED7645DB142A60BDC091448F7C6A595F4876C28B4558B7BF4C7
144FC279B8CCA6C0093DC7E7FC6CD5BF1F8E62D380C73042988D87DA56A232A7
AF9589E47A89267FF90D05CD90D63F109EC861210217A80EE32DDF5B4C08AF02
852E2164DDF8C8D16808E5D8F595688D52F95655813C2A70A82864362BD07E0B
8CAEF86D4FDD3B89C8196B05A4BE8121698DDA057904A884F802FED5A706592B
B9B5458782C37DC9A62BF8B546D96130EB42983E7D3F3561C728001577125E9C
510718ADBAEAB637A0B2EFD920F249E696E913D8A8F43DAEEF0D9C9565BEDA9A
FBB6B749EC5EFAA879AF49CCEC0524BE6CAEEFC0C8C580FB3E7D716FE767FF02
12075EA9FCB4F35F4C221E529B701B8F32C6FFD8AF34BB306383A374006A70B9
7540013CA09E75F6981CC7626D51647A19B38E8AE082EE79691597CE9FFD7150
70146227A9FEF91EFDA4A39246417462E68DE5DFF509B50C0B887219A52ADD9B
2A830D2906B38D3E261787FC12EF8318F01E074E797BE6DD548059A478784ACE
8B90A749BEF89247FBA7BF706E79768E59A847D16A6832DC0193FE0E0FB4F145
7A17AFA17D6940CD92B78D9828D83B4015C3ADABE7BB01B0F3FDFA8AC4035F7F
51ED1452B58D2628A465D281E4F7E6F43C21E0AD71D30451FE00C1E821E9BDC9
B4B37BF09B18829BE2523F360CDC4E50A3778FA4E951C4507421D0F22E35DAB6
8297748B84A3172EB34FD6B0F0F89DCC764AEF4CAB2C35884F3B3A04D4E6B9A1
FCA79CDAA76311F5FCA18A4BAAF6DE2050016ACB3076420C17CA609C13CEFC84
75DB1E0AF3905DDBBBCF4ACF4A6861F0079E0ABD9E2FB66FC610A483CFCE4E49
1E415347AFC8545BD8CFCFAD2F4D08D8E318E081CB11B65231D3CCBCD3B37525
CE16E2EECE29C1EE22893F98C3F81557DD3A71FF13FF25EE91CAC0AB5E6E99DE
FF547629910A58D4F25F10FFDF4A0AE77BFE9B2CE7860D0491F89150B2D36B1D
251D4DA40D40C1664C8CCEACC8DC78280FF053312B32ACC7F64EB37B040A8655
692A0F35F1091E3473BF337DDE8FACEE2C193392457347A1B8A833E9A44868B3
155B2F623EAB1C1CE1F3B8EAAE19F29E3FB485092213BDAB75037B897F7D1800
29C8F64A1BAB1D4659127DD4E266D0D304525D6A0F69394081C1D6AAD4A8495B
96F703A63647C281791D7DE53AD1751C57AD3641516829C63C692EC17DD02FD1
EBE410930FC4C090E2026EFFCBC6E4B1DE763481B478EAA56B900441B9B5A49E
E5D5B0C6468A0A94357243734739B70E6D3905A2332A9F927DA218B838CBC930
8B6BC0A36AC49905179211A49240B6BA695B55A6BEA04248350D8E3640E32D94
5FD511F4EE34F8F52636629E7DA43E7BF39F6D4FBDE942672B3B7995910DB705
DD5BB1B3F193589A40BA3E083B902ADDAB0E92E04D4085572A970B0882E8B290
84470BABBD3DDABD42BEFBB47F7EADC03DAC3A7EF09274925DCB422D34C8CAAF
C36071EF075A9636E74A4714C41187498BE1BC60C8EDCF18AB54A0C7E0D04B55
AF72F00ACFF8BA785BEFE767418D835BAF73EF3B037329D5E93DC0F5473B8131
4A7F8811A34500B70BFDF893A80364DE718E04078C727F6483384FB51D628880
659FB1DB6DCF40017B9FAD81D6AF3D14DA93474D3CECDA597E68FFBDE7036029
870E3D22B9373F75141ECB04D6E58DD76D25AF85E3976190ABD65A98C0A1519D
4B25133893B14AE91AEACD544C61733A356FCF56291D5D5456A7263339B0E513
3E475204D2165FD6F1D7CE6A6551C214F88BDE5B278CB0D7BC09E0B6ED993F96
4CED9B4553E788C400ECBE10EFABEBDC278F9D61804B8A04F80A9FD37DAA6079
FB96133DFEBBA608F0BDF92871A3221747674BCC86A8F6835377741CA076F783
619B9A3BBE809FDECD888923D21AEBE10D02FBC04010074A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.0: CMMI7 003.002
%%Title: CMMI7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI7 known{/CMMI7 findfont dup/UniqueID known{dup
/UniqueID get 5087382 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI7 def
/FontBBox {-1 -250 1171 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI7.) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBBAAB71645535A2B
6F0F22458E1429F4A67307E01F0BCF6F337E0E2AD89658D880B04C26306F8179
C8121B958459B923AC3B05B594D8AB95F75870019130442FD29578D44F5690BC
7281357A5041C8A809A59D0DEE108E2A07D406656BC74A9F3317CB887E712318
46B2ECAA341F8692ACC2D14ABABDFBCAC6F35858355F1D3228B0223EC73AC56F
3C987464DB829F243E304F4C59CDE3EF6EB53A4EF9BA91510CB89A3407261F58
A2AE66880BA98FC1EF546112892494C85A2C39F9DCCAC5766725894A7AA148E9
42360AE64BF3A4F1F9F0A0D0C1AAFDC4D50C52233AA595B7D0CE557D4A010D86
6E6B76A7E9523E8A6633DA9348BC3F59302F72F492A30782AE7EF220516893D3
DE836CDE311DED9262AF01C506040541EE84AAC539B404B23033EF56D4BCE6BE
B05F79CD633FE75C6728114D2749E39FD7454050F67763AB636377BA8E1867C3
996C7D7D4A4A02BC49D1AD7FF174C1F49F1F205BC9D5AE42BCB02CF8554E8F5A
D1876C9285B6CCD7B8C165F75843B0AA11D8462B57077AFE75BAD086E9D9F91E
30ACFF91776132F3CACAD1CA5E08B17B36A0E45ACBAC52393B9AF9089BD821D9
CD5A9CD9BECA59F7445D63DECC1B4502D299DB85B6E2EE7C69A1DAB91E22A3A5
89B524FA20AF6005E7A586B90A2C6E5A93C9EFA4ABEF5F7E4C7B81363FE8D2B3
0AD637FA863DE787581ADD7CBE463F7866C40F4E280260ED0E9C8453E5C7E668
FFF058B9742DD3F131C264F8FA102CD0DA05F3114D13D34D422799181453FE23
2FC6EFB01BE420C930B879D671F3DFB036197874725220644A5A52DFB467BB75
8089E4F40CE9401777B9FE1D0AEE02E782A6EB2A185A454AE9394094CDFE7CFA
C03C23A78EAF242E4F811E4C83B59EF4DC5ACE4AD37B41616B46C263358710B2
6137314545CA6CE89119B42A3518EC85C68DC07D26839C68B1FF55C4A9CD518B
A1FB32F9C475BB6110839FCCB94156E7B3648F27245A00D2966FC4DDE3996BFA
F463A663CB6935B596B1582ED0ABBC648AAA8A86068BF0038001C753C8BAFA0D
2058041DFA720B528E2D4B16196DB1CF30C779D3F4800FE662D5B60B208341F2
A66EFCB8448C2FCD12DF0DD899911A8BD96C9B670054D328790E5D388518B146
8CE92E368EB1DB3CAAFCA4834CC9D9D9DCC80FB1F34F39DACDE643052C977A7E
A95C5FA8DFED9B4DCE769E4E46256D6DA8FB18FD7FA4E4CED5D486803538F3B4
6D3F5B3C03184F5C26C66DBB4C724918EBB6A89C4602E4EDDA81EEE2BD18B683
FDB459F2CE0A9CED23DC208EAA8BEDB304B00E093DEE926A7B32FDB2EC70DD85
94B9137856DDDABB402B2C76DBA87149051ADC6007018EBDD571BE1D092EBD95
76D4E063AD7D5F62E6C26EDB88D38678F2806A1F4900B0ABC4ED034A818119A4
E618F1A902315BC98F26775E59555A3DCEA1D0F8B20A9084920ECBE3F7F245AC
1182A40B518B194669D95DE968542BFF80FDC89669BC256C44CB66A2AB8CD7A9
E42C69956CCB6BDE8C09AD22EF3196939B3B84EB23A6E071A36D702909E019FF
058F27562441EB5CAE87A4407F67C4390810BE89BBE867D636468E73677B84C8
5A1228DD7DC8EADA221B1BAD5F43E832F20ADE7ADBFF170AB306F5B711816FD1
39B7882556E30F002977FB88D8B28826A75DE0D20354A2D41F2DA8578376F7DD
F27B0F59D4DDDF5790E11E3957491DC74EEB7625CA49FAD90FA47AD8E0BDE824
FF326A84846A47A21B70FA549BEE307F9C6970009F963B49A504F0115777826F
1D81203F655C242FFF15BA97E3BDDFBF435B10E74CE8543C98966223818839B3
6BF3BC63F882B0AD0FDACA8C56A570277952E1D83F18BEDF084D2AC004E2B09D
70DE1740D7D220E92B54D2FD0DDEAF1E08C41FD321A8D474982DD105B23166A7
AA9E0129DC88065B1E0F9382BEB4B4E1DAAE3EA5489BDCA921AD5A8175F2841F
9400478DFA99C5E5553F383882664D73FBDFA29BF32E52C28DCE80DAF4839434
022FA515679DBC13FE98968D2894DF5DD69C49BD23D00F5D858B69D1F220F968
F0700E13873579B3CFB658972098DC61F1DD580105BC27795DB4AF11A871CCD6
2E1B9AF7F0DAAD4CE315379A7B42CECB983DAC5A2B9426B4E5E0A7F7978504C1
DD7E30063AE3CBDFB24EA2BCCDC478AB82084FD30A4793F4707D9F8F9647B413
F8A5C5AC6D5EA0E35628CE1096A434FB8286F4617CB4D0AD30A4A0B255A5A356
25AA5A947FD3C4FA44B4AA80BAB44C48CC1E2C6D0A711365A37A58C3483D07ED
301A83D2650A2E8CBA9EE62FF5C2736EC82C1402959F64527F9B640619F112D9
8E0F4A8A3078C72ACF3F34AD855AA4008C96E30D9E8C414607C34E06E29AC5B9
2EE5DDB823E8C3EEE6A8DE228313D476A7F39B5DFBFBDEDDF7C45C1C88EE6D01
7FB4F7BB2CBBD5DF7F0CBD98DC287FA6940FBFE1B3B136613A3CF16634CA7B90
53D5FD5776515EFF5D37F8FCC62D8BEC8EE2216503D54D6F2032D3C2BF861E15
FD1B45B71576F15852EEA65DD372E911EF4CC18283CD2FF4196A3F1A9D81137F
F1820EC604D6C61AF318C6C5AB6DA1EDF305CADEF7CC0183B86D31310A09972C
A4BC37D110C77ECCA614D1A281EE1C2040B4A5ECB31A3FC61760F608E44332D1
D2C53C7891B505A3020E9E4915F3618588FCEC80B9ECC5E637D8D0F3C94B1F2A
C53FC46CAE0AFAA7E12266C212A73AAE60199752C042BD55A5DF1CD07FBDB830
C83E7832D8554AD9C9CAEEC7CED1DAEE622090897641CF2E5B34A353D83264D4
4687522DB290D3BA927BA315EA5D25B0D7B69350C6C180AB0C322B05E01F7C7D
F2F48651567F0C1B49AF3950E43C94D78F7B184BF2946B924BC4279AED28F3A0
17A7D8B235698A516D3FB5DF0B18A422B2410C385E7E9439C6D60917EB3299AD
E31471616251FA40C9FA098109BB31A54D9C03B2F12947E4E9252A0851B81C4D
F39E7FC44752504B589C3911571B1D3EC3BD1E1807F99CED1DB20270E483A805
CA2A016E7283550D1B1D35C226FAB63F983CED41A4D02A2F228FA9EF065027B3
CC69D6F2E278C0A2D238D3A37154B0D22281F62C61D9182A69657B027BBDED64
11E261E47620602F865221A534C5A32E2BF5B93A187911A146F2E96538B47DBB
7BFA7EF406FE940F4DAD17E6E4B80C4F031D71F65657C2F5C8233EEAC68DE8A7
E1FC3055C122C1795D0C71A0284F89A9BF04837F61C9E08DB42644A490C97D34
A5D3CEE475B8D578205005A0D68AF94AD27C0E855BB8EDB74775690A4EDD6543
BCC10CF13283D6FA8A7CF3FE6C4F96470A11FF0B0160D3F9816B13B0BAE0D8F9
B84C7631063FE658D13D108D6FE24A89799FABA72E6A6D1C943922CBE676C1B6
11A4106ECB4F1A7F8A84B2783C2E6A109C58D63FC0B74D8C8A1CB62D527441AE
E656D94B1AA8581B4F07B653ED6486AAE1F8ADB30FA8D8914AF24721C74B0908
D84F2EBB91144ED4BD7EF533F2584048DEE37E17CDE5FBC2992A6F924FEBAF07
B626F988599DECDAB43C931CFECF99FC6EBB72F8E542765C26295902DFF60B7C
7B9ADDB4858BC9D808B7F0909690CF8DFBC59A786D48B891937C31A219842A43
234425B4963062DB4C4E9F534C77F4243408805B5A6B8BBF428632CA4AC03A7A
E336DD181CE0CF3E742079E2919EAFABE16A63299771BF276EFA8D85C920F995
5B9D4E8F1ADFCC5C29AA89BF90C186C5DE7679906B2FD4DB279D245D27D08837
D3A8D541FE37415B706EC585C05804108C1D938E543B8B63E275EE85CE9DD843
0A8B9163144B77DA1A552A25D5E77E94F29CF252BE9950F4E627D5F72536B6F3
3278D4A45D10759F16AE42BAE8460865FEE84537F8EC9BF4813570E883B826FD
1ABF3F4E66DB6FEF8366E07BCF290EA67D39C9D81B2A7EA48E0A228FE3D5AA50
1A56CCBF229C9AF2537A8FA70EEF41096ACED34CC7BEECA4EA1F23B39FBC39D8
CCEA93E63F508CBE6722C11467A3D0D5C4C52031DE43C449333E4295104651CE
E13B821D7904653346067E971BE0042C571ABF40C3A1079A675FE4264B784D46
1B8FAA4CDE9851C4EBF69ADF51A7B68CC8706C08D13A44909D4C1D78DB0E0B2D
0E0318304B229DD2FDC968027CDFF65722059C62154304D6F9C3F06DE22914EE
928B7D1BF1FC7E74B4D882998D59BC086AA2D4EAD0AE39F6B75B5A3FB9994506
E21731E1A15F0F2D12F88724BA72898197A80FDAC00243A3038871EBD2F2BAB1
C616278BB78490CB86F552CBE5DD0862F3793D72C68AC16AF8E38FE1A523A5FA
9B0428745B1455671CFA1F6BFBCCF9CA23C833113C2948E7A6AEFFF1A83509FF
C559BB5EE7F92BB43F7F37A371E661C826F63DD0C1B25E34A8119E71EC82FB66
23C7B126FB6554E7560B1B69F2EDBB742F3B20D1648C151C37A8570CBD330A9E
7592A8607D2D727F3AAA0FF2057DF4E2A4C7D3B658C6CED38824A770420D89E7
F6AD385DBCE9C9A9095CF0042052A67AB804A6675BB9373A99390CBDFB715984
A069DE543E4C6ADD7F1EC7A15392EF834EAB4584679A43443953427DB13E6959
0F2F5061C99C6D00FA5327FDB5330AEDE19A53DE3AE092634DC6AEEAF63A5BED
990F8A117AEB1CA0E7F7DBE02CB3D86465F1613B976D1CF6F3A1E69740A2FDC8
062ACC45EDA6B863B60015F276860FB79C31D28F97A799568E66D0A8757B2C41
E939337B467303041D0F4C59390B2E41E5F298F275DCC699D27C459ED4D5ADBD
02539F00095D7E1872862142B46BE06513D3EB1A406E6BAA64BE795122100F09
C37E5D1834218EC1D11B031C7DFC9F5AB071A8F4DC08203821366959E9191D4B
289682D915AF28CE5858F83338DC51B6B0DD052A181D9133FBA50CF18F70EE65
C33726A0450EBA9D0E0C3662AF6C2121AB7911AA9880D6BB6811D6D7515888E7
199A0E632104059A88C9D85B19BB35EDF4AB95E1515BB2339572928BD5FE8CBD
2D4DAF55DCFE29FBC4C3D56336277BA0C9A889A129F9FA7052AD1420B8705163
1A808EC1284C888D78CEA2B4BAB71AD76289F5F4986008FA9BF328E8537E6C91
E11DBDD8447E1C9ACE18DB0EC3D5742C264C8EFA445C5D16C2930FB43669774F
A2CA52144D99EFA8FC427DB4128CD4C036A8C611B087335C780740FAA419D39B
5DD68EA89C95275F9254D947EB3683D0130255269B10C6CFF29EA0BE484C9949
96188FCB747618A8044E2E37DFFD2DB8ABB621B34DC024259340677095B6937A
78EDCF508AC91D4CEFD872AD73F50582DC8807143CEB9F109C84DC5DA30B64E2
E56DE973088A9D32583D6946DB4F3523902FB1781D993B89D5F56D79D5D98CC1
7FEE73FC3A7D1BCCE90179AE450829E228B4DEAD3B2B4C79A400CFF899AB26F9
048B0875EBC871AD23BA96F88CDA8B87FE5809A13889A6AC349ABB25E54ACAA9
C213C5DE2D01BCB9CC0D7BBD384D23AE12E289FF8FDF1F611F5E14D4B20B15A3
42D9B3B37A83A9CA39B5DB6C8316C51B70F211530A56CFE54D63E88169CF5233
D1A7B2388025B3EBD2BEE0716C3A2D589EBC7A42B3DA602AC4E2FD9C9052C922
711E44408DEEA1FE0C9FD50A39AD46D437F61F284A2EFD42EF158EDD71A1486D
4865D6B5E20E60F4F4FC3D646909FF1EE2D7573665E4CD8340A1B232CAC0202C
C35BA9BB3D2267C7E78518F6711633F888EBEF72DC750AC2CB362D528CFC8B2E
A1AE1C05456F50EED8CAA768DEF47FF85C4322F02D7F9D188C6F285C674EF589
251B0B913339FD701FDB281338D96704ED7ED908BC113B4275A24D058955890B
12CCDD5572D63688426B0E1E9A40D6AAECFA5555C1CF9DBEF8C04CE1E5A63F14
969D39B6DAE8A91F6AF4CD1E2DA89A4661DA34E272B6032C442C031F081F5DF5
858F4620885773D8A2B2F5EB6DDA74C1408DF279900450E4A3E80BA9A9B1295E
F24EDC3F6EFD81A741EF74B0202820516C4FB720687BDD915EB2396128C3B262
20E3075DA153D6FD36E1C05B855929DAA4DE694B6F15EF2145C63250B24B031A
4CF0AFDB225E91D99828B83BD90F1702D3906D45872587A3A116B138AD9627CE
E778A949C392202823C670FDBC56F1896FFFFBCF52C4B400F67BA36B5FCE44A5
F18EEB8ADFC088C99DFF8E0A593E81A5ACA2E3693005F723C7D3E0AE2BDD3805
8C6007A00542DEB2539709558A88B21003CE4B2C7817AF207ED576B25A41DEA0
FC55A459BEB00ADB01309B35920F04F84B7B64F95AA99EBCB843A06CED900D99
97BEFD7CCB9F4D85876F10160C8D63E2FDE82B7A8D945F37CC9933ABE0FD1D76
268296B1A5AB06B2E814691128771694224781171DC6266BCC290FCE1AB59416
85530368115BABD4F1DE45952918D1945D51EB713C283DAE8EDD559F437CD886
A4B1DA6120D685C284673A3EE489FC1AE4297A3623B339B7D886B6B4B8F9F4A3
7BF85E320A52FDC6323B51879B98A14C33C567BC069D9B44616514EE1BE36F90
EC5FA33E1B6B0A46945D876EF0085E74935DF2560A03321861A752E59742B9FC
5C501FBC64BFB1602459885B63873DC857ED37F8BE1A9C6E9517B9BF5A6161BD
DEB6DB0381FFB34A8A96AB4AD48BEC40D4C198ABC599C3758AFF638AA75BBDA4
8545D5F95FA426FB25587301A43E176F6CED7851E815AD907F2443E70740DD2D
4FBD5D978B9B37F59D6DCF0ADD0F90825DD23558FCB858513602C8BC82BFA383
7AA6DCEA4009961D06DF233C5381A7F9541259926446B2F03664BC5978A1B6CD
EA6EBC9FE6100A65959513EEE32E69D47B55BAF30A893D77142F943982019C01
715CE29923795EA01C58A798979939B507C5B29A32881877EF7EF0C5CB3DE591
6B9A6C3F3FFA847F396A396F078860B59850BA4CA3115CA2376AEE6B30C05DC1
6F9DB6781ED0F9D45D10E096C33B1B7CD12A9D57C6E49AD833C4B093DC82811F
16B3BD902BE764A1680831EC5A6C1CED84AE0DC0A65678EA5270BF20931E6409
7AA44EACB22CCA11098F8A51096BE83A1ABA56C9EED4195D5CCF24FDAD92E823
C439DAAFBFD652157D728F2754F28304710D3CB33763156D76A259D446647A11
493FAC70DD28063A4CDDA162F72542368E1AC2826C4BFF7109208F66371910C1
068F21779FC39DE03AECF1C9FB2F417930C22791961D801284DCC89B0833B6A8
D63F153ACBFB7B7D547924613BBCCAED37D90BAC5B0264ED31C7B9DA5A2BC620
9B20CA48424D0FF58905BCD6190BF4B5FC6ECCA1BCEF13426920197CAB41C4E6
E82E8EE7BCB23C6BA6F8B58001533B225ED721D6CE3D6E89116EC33CAA6E905A
649F8C6A1AA187A48E20DB864596481976216DB78F0F57543DFAE3CDC0A6FC77
2CAA49442527A5D94DC54BE93C875690CBE52EAA4EDD9F2A511361BC0F0807EE
96AD0D26B62D809E82EC14EDB158EF48A748A6FE0C3A7EE5D4479B35425F35AD
3EC7444F6FA75CEA5011AD571078293448A33C7647611CAEE87974B0A756DAC9
4E1BA78DEE477FA59AD50BF5C52E068A5E044A4A4994D5B24CC5045F768A3C51
D4F65E2A5AFD271A7666C6835E28C60751EE528C0742433165AFBE71562A3016
F59676D56B0B5F7E4984D664BC3ADDAF24B4205752EE21D4B57057A943018466
09C3FA5D2C5BCBFC22A643586BC9E7A965DC34C0A7D76A470B0602AE45106417
0701ACD2C764DDE218B924E38B5A13CB82678372E743A8B3CC300BCBBB878978
D9847F0640A031D5E76B5AD07699C3B2FC6C1DBBF79938BA649C152FFB2B5BBA
D18B9570670B99907506494F362B124790A17D4F415D8447ECF70B67DBD46643
91AD465A1852B804CBE65206EAAA38FFD2B4180AF00DBC6291C9474BAE831466
A9837BEE55AA0E15812D87E7033BF2CEF3BE10ECF668D3B57D6EF1D4335152CB
08DA4049A652913BED4D5A1330639C870058C8994A969F805F2648C9E7117153
6F5629DF9D6DBB854DAB768CDF80C1D9A3C06F5D6DE96D687B7D772A184D2957
4DADF30BFC43311087076066AE8E469D8574702CF5F5225002525BEC0C22F958
4AF56E4C09BC41BE1B60514A407E3862A71AE2A189284AF072B16B92B72DF938
43FA27CAA4468AC50B56D8BF2F137F59E55AF7E778DB993EA55FF446CEE4E8E5
D87852F211CC342557D2F3647F6BC423260E2AC6398D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR5
%!PS-AdobeFont-1.0: CMR5 003.002
%%Title: CMR5
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR5.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR5 known{/CMR5 findfont dup/UniqueID known{dup
/UniqueID get 5000788 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR5 def
/FontBBox {-10 -250 1304 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR5.) readonly def
/FullName (CMR5) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 116 /t put
dup 117 /u put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DAE26BF1F487876AD1
16184ABCA7446A2352AB37C36E9C9BB67CEE105C612D36566FB459D6ACFB1DC3
7A59448A06EBA21F8824266BDD0ACF9E356251A897A920C39F1AB236EE06C039
8C4C0AE55FCED464E19AFAF548D454FCF73F6087102630AEA03E622AF2596870
1353925801642BBDC11F09963F4ADF037671B73D48CD9C209DB4D5BE7F4CB381
94887E8365D25C45D1F87EFFAE360104ABD3235E4D2F4BA163408448E814D49A
3E7C171B8F1275D49937C3255326069007B302844EBF2BC1990DDFF1A34C2770
A262ACCE874DA1E0002188D6A713C79D5E9226178EED27D6F4E4DC24ED2669B2
3873F42A48E5C1365AAFC83FAD8B849E5D7E52BFBB01B281005A9EBEB4EA2F35
B691489305BCFE5516DEFBA092F66ABCA2D739A9277AC69F74F786045E63B0F8
66D545B12B0581AEB579D5E1E2A412DB8F66276E05F131EC3B9F543E11F40FBA
8CC47071DB04A5D38A707C9F825527521CA1FC412FB54DBD72E912BA4EC8F747
306A65040671237C8FE84AB6D6157D96EDE13B3A8FBF7140F1A9DA55B666953B
C7FA638353F278D07066AB8DDF0DFFC832F7025DF1AF9F894D52E9FA95EBBEF5
9D6B97768FEC26E845B87C6ACF5395C75B894B5A1F50B248BA33943C5AD6CC2A
8D9AC65C08B3206E7F5E5913CD0D54C9FF741A4D92B628F85E43F52082397891
66E6F922E0BFA2E45F0072217011D4B8EB40893F151E4E2E92ECE5862C467D4E
3833311B08340AE1C0C692095AFB739E9B9A4F56BFA0F0B2AB8455A7470C22C2
0C2EC285026195CB73EE2A713ABBDE4945AFEB92630BF852DD4845FB4C9A8C8A
0C8C971F29440B4A786108D0DA1AEFDBE03568B6B2F3953B4D07A5B7D6FF564F
6CC0D8C08CA459D556154A45133BD7AF70C7D8F474DE66E64FA112D776478A83
B282EA4E941CE2FD6D8F7B68D129CE0093AAF7C1D345C3D65BE74EE9391C9B89
2D4D31764F1BA81CB12CE46D15A6BF941C9F0EACB4A2DECC8F2F6B85FFF490D4
ED7BB6C7CDED10F03F68282B2ED20809F95840A904020C98299E17C46243D9EF
05B5B8173BB2E8CBAB3AA9B8207A9EFE6366C91A7674DBCD9FAF12A2EF4B5117
5687F3DF1244F5439ECD8AB0587F492E990DD7B516C664AFAB76CE71084FDD70
E7F5A38BD46926615659488D3548C5066C06E443016DD40275CFF3105573117E
369C8C34E48BEE832D93F0ADA7674FC6F5A64183DB2B70FF166E02E044B7063A
41D2F396A9158A26D3953F12982ACD1D7593F474DB98ECFD00EAF57FAAF17C7E
C1E4775B37FCBCD6DB1B5BC6209162E57E21A6AF427043562D9854B430A0BAED
20D31A9AC334C87875E53E0B956D33111955459DCD98D54E1BCC61BA58CDB41E
03009979C0A541FA9F69B55D3F3750515E5F268A7B55254B8A44CA732F2B9242
18F34C029665B31EB68331B0147607645983340D15E322E3D0532E6376D40FA2
1041F7988EB9F56D83946757786737D8BB4A996EA7933E79BE61B4EA1115AA4C
286B7AAFE80AB7C619329AD5FA772A6279FE85FA6B623138FAE1C6AE3FA45AB0
95D8020D2EE2979E8A87D7E7C5DA2E6B701FEB4923F401F892D83A4928807152
96CB664018AF24E829E582FA8B4F0E07387BAC53530AB3AADF74404EB2F311E6
C6A70F960FA962E52A30CCC6E15097F9B7BF011626DAD38EDF78745B60C0818B
34663683577D897B1B6AEB240F3A2AA29F1F1800FE0A5C205B35C6A6438259FF
CCEC942AD2D7C3CFE01F956B795C0349DD5380D0140D3BB54FD99EEE5171DAF5
4FA360A740589A1F8AB4FBC275CC06FF89A8350F4982F87E747501A74B7C81A0
0F40FBA9D2875022DC3D417FD623D89FB6A0C0F1B930ACC2117C6CE94AAE5844
0B5C9DAD579B7DDB73F2B26B05E1AAE30AF69937722E8360987AC0BDBE305B5B
DDBEF5A6C03BE1743C518E6B7B58A85AC961B8755BF37688E37DE0632BBE06E0
53FAFAFBE52EAF276365A0484A1A682C9B9486CDCFBFBC4F4A1D6BF71378F014
56DDF9B15A5AE0276827ACBD9AB04D685F52A62BD3DA33BDC2A262B756B58C26
4F3B552841B81CA60C951F400551166C72B8D357D8122685FE97D14AC22AB6FD
2EE4CC429D580AD7B8D12A9C601FEE5D25C98BCBCF96C87FCFBF28419BEEFFA8
7A4FC7B6E5FD377EBD5E743C3FDBB7554A1FB9663B648B15C4119CA952A8263B
278E5845AB929942E1A0FC4CC413F36134884EAF3704865C1478D6988880EB54
C5C5C1BDD7CB0548342B9C7B6F94DD6341C5744A9A3C4A866F620BB70575EABD
AAA42E3B6E23AA029080B299294AF2E9388520367E964A3A66A84628D75F1BEB
C7A58C92EF7335F30BD0A26D072A986635318E0473CE3CD5B4F1BBFF6E781938
EE4E3C11AC27A1BE0C3B55586A4565E4B967ED2EE4674121A46DA1C32C5D278A
44BEB43CCA246B730D337918AAA394728814C726DA4F9C40AC6EE877365976EE
A53276A818CF25E995CAA34039339C55DDDE74B3C11742786C1E9FA5C432EAC4
E184F35560EA31D687D005843B02F9252C2A16F9E4C31C18D0D45B7D5F63D589
3C1FE3D33C912B9CD79DBCCF9FD8223FDC18D55762F0DB2DB241625B91DB17F6
206120D6300D317E82F3DDE6D2D0825547C08BE7E6FF8FB54D4DFEF2F4E475F7
F3838B4ADBE49F8C41409D85085DB5A030858AAEEA5AB9CD2D1172C8D0EE31AE
507D8048E123AEAB05979C872ADBA4833D36626166BBB2A2CEF2F3E641DB429C
AB15C97D7180E8E6AC0D871E20678516ABAA4D616B51C132F41E5661858B8C2C
ECEE4A65A2B0FF310DFB531B213196D2E2AB015963246F44E22E603E741BBFF0
16DBFC284906983A8C15278A36F5379F46C152304DADC8D90C313961E5F58180
EEEC5A15131E5C48AD27F80B77EB0370482D528735FBA3E6C0548BB66CC222F7
CCE87194F565B9EF7F32E656E6964501CE32462FFA6B87087EBAF45D454CFBA9
ACA808C4397F3852158F1C0AE44772253ABEF6D278F726A03A9CBC4330EC80D0
117F9131C5974445B81093C1D6E093C669CD285D1BFE864D53E5F140D40BE4CC
2689C42C50C4137DE564374B2130609785D8F519E0083DD24A44DE24A68E4071
4A2122AB8AB9649660D1C96DC58F37F88623528078BFDA3BA3085D527ED4CAF6
25BA663A61AEC4938CA78C49623FE0EED33DA2D08CC78F86A807E791BC9CFCFE
8FBFA55EC2259B64C31F6EBC45D2DF9B47EE09AA54011D40F55B6F12F49F2266
EDDB09D44C521EC9568CA7E62283C483A436417B65B4FCBC7EA32AC6EB4E7B30
080816F29F06D6B09E5506D3149C5D758BA85D820357D4955B0C1FFB383E10DA
4D61774D3B23C84A339C7348ECA6078080FF8B436B2261091DBBDC02583E366A
622ED9F95D2A85BDBA48DCE8BE45628A4ADFD5A48869800D9B54F530F43A8F53
F765F5D5C44A9399FC1B9CEFA343966118DD11CB102423D46BA0F096795AF0D1
BA33F089AD80A104DE7FDF8A6E7D935E6713963FE3C57CC673BCDD423DF3DCE0
C57EADCA2AE4DBB30166C2CF1F7113DF96A27D4BBB23ABECC5A4795F1290F4F5
5293B5870F892C9A32C776AAD06D78D0514F047373879CFC5AF9D624DCE5BC8F
7CEA5055064050AAB2F24A1C792B2609FFDADC6AB8D0F31A12403CF3436A1E1E
E24BA5F92587925C4D6795A3FB163245FBF054BB1B0FF01FD63DBF7C192D0F31
33A17E7764699B669A3ACCF7C36849EEDA395E7F55174023A79904A766F21D58
3DDB7B4C2808DE7FFB8717658084E70DBE046A13BBF1F9BB97B3AB527D68DE8E
924DE65486C3B883CD65A95901B0DE57821CB6C6AE37644E02F5CB0163617113
C91D2C649A0BA10736F3709BD504F22DA8831A09BD0B2D6790A498F2FBC2F642
7845796E606ECAB2356238AAF40323D71B236CBD1E3E43BD5443F304D52F3CC0
28DB5D33A732695AA09C0449C53C656704D820217AC035DF45F59AE445946481
E5BFBE5D4EC0A42B5662FBEB9FF6ECFFB5E8517312F56C91A01824E401E7203E
258C3BA073C1B2532B8312F5AE29E37F5EA71C52F171593B1370D4ED5D7341CD
567390ED5B75D612D5873BAC518587525A591164E8D36D2BD89F792BD9EE6ACE
99FB72B23CB2445F12B8A6A0876EE711166C9E34897D370174C17A2495D58B4D
3DA19DBB1AF2E09C72FA42AA3D8047D05AC4F6A27F3EBF32ADD2AD2FF26EAE05
A9AB34C9287EE00E8EC29C6603036D365AE08E00D1C7C410EA2551696954EC92
92080C8FA5C9E67698BD7B895C82ED29391E015F83E0DA145384E223319CBA74
19494F070649E03CE9FF905619C6CB40F562DA49C1EDD2CA221DD7D3DAFA8279
AB50DE1C059CB8D5C9FA8137DA711B9D30F236526AA389B2F79F3D5BA6ED9534
8852BF4448DC1B72E361A6A2B94CF865BC9C3401D995529E2A36DE755EE001FE
C67B184AE8241D08AF88D626BD2D8AA12EE791AC4253D4761A21917C7F2F5AEC
795CD14B33F59DD7080C7654DEFFFA669F50FB1AC8C0F2E60201673A78D03DFD
DE0CB142F0F616C4051772BDB837CB4CE87A0C8D61E0FC7F90517EA0F5F6B1B4
D57143CC0AE7CA9521C1536962867D6318DF1C9CE6476CEB9ADB21655D379B26
7A0EAEC2D28430C14D38764C493BA4C06EF4BE6780131F2FEC066C4866E0B258
51C48BEF77011A0B5763CB3D69A50BDD50C2D7EFBBF18BF42544B1AC196377FB
4826BACB3C16DB805D38C34F9E92AA9AB5F9A9B317D8BF32AF8A758017269914
DE3B748625D319E571187E1BFED9CCBE11ABC18C0C6123D24D2C7303DE998847
0F6F644748ED225135CC3B957EDE8567AF3EE47F5E942EA9293F7BF74260D1D5
A6F5E56705E12C8379DED158E66DF54349F0504EF584C6D05C44CDD8B720809E
3DC36FF60BF55FDF1CA8C968E68346CF43C568E0B3175CB7D55343DE21CF9730
C9DF918360036E4204CD024A67E764D3CC7677E5B229C1B909ECD1B9042134BB
DD8E47FDBF63F212D401A797EF60011F52EAAFB88E3E70E007BF19826E40FE4A
73B57D52FAB33A737B1341381EB2ED307E0B83B45D6911E04BE623DA82DD6BDB
2DA096827E6A498A8D503668E45926525789D43D1BD5B896B487C0CE04FC9DAA
CD9078D0C8A0639E27F0DCD82C552A7FABA42BFFEAD66CEBBD4D2E4B4A1B40A7
B6FD119D37FA26C14C29A70E2EDB3253A1AAAC2650009CA3B97B430B1A05F2C6
F2120C8981683D0976BC42FE98AB2D33014B983CE1E2F1E1AC4A524249C3CF13
4B36652F96FCBD3660ACFC2F9778B729AFE2CE1BCF473DC5A846FCC3ACBE455E
2C37853F5204085ABF3BEE50C28D99312A078CE2F6F4C1D2D3017F0E5BB5B614
102BE45CAF8108407EA970111B5A97CA8C7A64C70D52D28D2EDCD27879B1003A
6D168CD054E87C063744CDE097887CDF268D89180AF8BB4F170804AE5DA779B2
1941775FC32FA189038D6050EC0E400BBED364E0CCD8DA571E902DAD812988E2
4BF761F472EBEB411388FEB6F901777D090400F695D823C758882CC008D889E1
02678FF81B252C33C89E3B04157C889D4F0F86D432F0B3DD7811BCF01C2FC041
0D4B1DD9CB6F2433F9B34E7E8ED8BB1FA4F9F7CEB5354A8305C372C2EDEAFE5B
4AE23CEF34AC457961B15CEA084E31B3741CF2EC317DF484736EDD688737C380
6D868BDC02D1E63A52D21C8E7C1FD1BD8717612FC247293CC91E0EEA08D5F805
70217761CFCA0F9C13996DE0F045F28DB67378221722416236E4DC00194E9C45
A3839F4BB53E226919C2CD13A44E4F67334454DB7E133B2D308925CC2E275293
F81AFEC4DCF49230F22EFA19F48CAB7E09FA727CC2E11E5A5CCF57307506D5E7
6DD1D26BFD3DF97E73C2DC019B0A75B9D6386469ACF1A00A5AAB55F99BA1DE49
9883DC4FB0E8AD9421B105E050519976705F7BC889FB3B6C2921D2E198FEA294
E192DB3738EBEBF6485075728A0E16ABD53A25BB0795A21B65AFB6ABD7EAA3F7
1DAE1BA012651B4BA0ABE02F3CCCEB9E92979F17A3338A376C57A1F13E3C90C7
9DE8ADE421329A57369CCC2BA622840B79C0DF098EA42B810C596DE85F51EB9E
C8F6FAA598C73F359FD7CB1D337E3B083833389846A99C87885A7537D35772DC
A7EE51E8EEECF4E4F38AA04C3F4C447080386A41F1461599739D73C58CD02D65
0899177F7D707AE793B4C915C590AFD6E6810700BC0C3D14B67E03129A4215E4
953B88C7A9FF1AF4B6DA293E1DF2EF5667D408AD3F2DFDBA46EF95A1D8E1CA29
FBFA01A4B965D1101CA6C0C2BF4670E94776753FF52C2751AE41872EBE3DC66D
EE58BFD3BF8F543802C7614F64E7A9CC4474DAB5F4C59F8085FD523C91F0FCE2
0CAEE1B9613064F9C9CE9556C841563A43660E0E71EE761F0448C41589AD0312
958167F62FB166655800150F9E81A558949071F01BB11C9ACFB2ACA4F332D2AC
598AD5ABD3D5EB17AFA97456C0DE4D3D872750F548C357FF34919A3EDCFF9658
F3DBF53BB3D0A204E84702DF6FCF5022E753CA92323ABEDC81071ED44C306A7B
C10D15F905672783BFCDF28D97EE156E293046C09595159C735A266ADAACB887
7026C404951C27B88CC3EC1A6F15F016D55AE6B5DD739914DBD6861098977064
762AE2867697967117DD7E3CDFC24D046F1D83856D49224191CBAE95C2E7B9DA
4DC5ACB06B9F637312C1378941EF6B9D966E84DA69E66C43EDC0564D4A9B201E
5CCD830900AC4D4EEDBBA4AD14ACBADA20179AE138CF35D6F830801D7F9D1F3A
B48B6C2EA3B77E7EE42DC0A26C7FDA6EB64DF4136FC3AE0FADAB84CD30392E44
49DD3F7DFAB77AC2E3A8D16C9BC002AA17A9C1E9166A21648AE2AD7F9DB250DD
2F3F480844C93059796E89238B0DD470329C2AEC9F178B83D421063BCC18CC35
2C562DAE86EBE6529D19066FAB70C8E73B260C71924B0B3DD652AE37DC2ADCD7
A3E3E1936FDD259A3F32D669B6CD82D73436212D6CCBE436578139AE07BA8C5F
07A8D2158C8F21007FC0B96E2B3588466A6FAB4F70363E994AC4FDC2CAB3A478
9C98DE079DF219648A6219EC7040A8FA91BE9D9451BEA89906677866F50B6FAB
E8FC00E826B115CD65FAF738492A919CCB657186BA12260C2816C44A632285CC
25CA1D797DB0D901EECA675FFA1182AD6D48A8A96402D07A288CCC02F8A7CE0A
39084DA379C5FD08743060851BD02A3C9CC298FFA0AEAC5F5E1928C46A6EBB42
7D2AF9D32BD0117A8CD7B453C66FF39163092568B5A26F210900D466EA5CE01F
14BC1F57BB0D3186BEE9BA1A5648887CAC06E23057199A31781C4C37B1A07C32
B8AE8A40F5C481C8D2854AE5C2C3C746C4A2B48189A373A438F512642A55F2B2
3CCD2D5A06A1859B50C1C3352B1B5B56E652F00EE79060842A33A8CBD002E777
3CF6C051A6D5F02E35480569E9D00493C494F9FB977E665AAE4468E6DBBCC950
33876A21B75095CF391E09E814D7A03EAA19BA0D7A560610CC36EC3A9CA39CD1
4A359FBC14B07975379B68949C9FC2DFAF037C56C13802A7F66C809549EF2FC5
25EF3F517F06F90EEDFA6F8A3E5F1F3531A5415F3191B8FA7B0F28950A20A1E0
6E354480D09729E3A2D6796DB81825DADFA4580FDC7813B7989B18020C3AB1A2
87E948890C25563CB26A068ABABD94F3D42213218F2ACBB2F5B317311474B222
BE1844548554B37C97284940D5B7AF9E4CBD884D4994A76CC1ABF8E6AB0676A4
0A8130F05B0ABAC088FE4F9FB536924A55451C8772B29087B8E5E649DA3B449B
4A055214DF69D0218549440B3665E4D20C5A8660B3E0C3ABBA3426E7820E1A94
5D273A6AC95E662483BDD16BB7708F850E825BF733AACBDCEEB61619D5295C29
158AC6596F456563B3A6EA6A4C9D8DD893219E87086CEB80B20CE24ED96E7E3E
5209CE57B80618A31A8E98E7E7525D23E553FF992CDB4BEA932B65114E80C0D4
0D8837AE123A3A7AF9F2E92BF97BE350969DE828AA6AEB0DDCCC07A0A42943BB
84F86792BDFD80CDBF0C012E6B08A81EA7D66EF2D9FEEC1AAEEB021332660CC3
34A07DED9AAB3BCEDEE6BF5EFD014E2FD78F9D9FF078249DC6BA28568131C3F4
6C7BD88A5CFEA00B44DDD5222A1F9C1F54B86BCEDBBD5205FBE2F0BB8CE52CFA
C2003A00789000261ADB201EABD93E94229945CCD78D33F0A0358884F3DDE4C0
516174DECFD1ACFE47A4A4ABFDBB4E926AB0DD4635502C2819D62657B19C91B4
0150755CF89A12BD8FF7268E6500E9C13842C696E33A9623A6B9D26677033BE9
720FD7EEFFE80F9814868AA43CBB4CF2C16247838F43181477908BF70FC37D58
E009E952F928071CCE177B782959031087BB0311AFE5B776454DF01C46A9BFDB
5B080E0988808FA381EE128BD536C8B7498AB4BCD8653849E560E255A1904DC8
62D03788AB889FF41B910D760A41B373416E44D7D1D0663BF49C3CEFCCBE58E6
B3EABC5C66A86DA1267E25363F505FA7C2A1EFAFA1433BF2262B4C55AEFDE883
1A969DBD86BF487F698680F1B74BA656E79EEDD610D9309DA8145FABC0D08B2E
BE15ED99854E909725381F4FC54959B788A1349FF9CD04AF8A5DBDF6EA2BBA4F
0D1243CE3BB5C63FBFE4069916D1494C61E3A937BCFCAD931F0D0ADF9CA58159
4189D8C0BEB592DCB4F35F7D6497774BE51D58F5E92A4BC07E5DD044A8FA780B
6770A86E157AF5FE6D28C7EA7152BFC8D471A18072E837F37F8DAD85413D3845
BC8275D563528EFC8B11E6FF2C0C041F2F2E7AE84A8A606B90E8A549DB824C64
FF2102AF23C4072C289CFCF8969B0511F01D3C37F9116BB556A22C209F6F8646
29E070B50DE998F581D2EA5D18EB646070C17BFA087FEE62101B36FAA71A4314
BA1D1F387EFA64140E28D30C7DD7C541A86673C2C27D67BFCAC5DB7B264F8FAF
16D7A7F2154EEF16B57382B57FB0918EA6110BE2A99BFE12665E31B177A2948F
66DF2A1BA9034DEC9B27A19E006727DF6734CBE72A3D6FCCF3A3F183CD24A4C3
0DE9C9E3C820E0172274B1B130405BCF70FE82B777EDC7C184BE9DAF17D4C419
C5CF03CF570784779973F31F3D840570C9271C551C3CB40BCCE9E901C0154FD5
480E88E9BE2A5B010AADFB208F9784E871A2EBB7F16B5AC4DF3C8838288959FF
98F0009F27341CA94F8C74FB52882BFDE6315DC7DF0B8BD954C7998E8B196557
6127FF95D77D11D83B60A0BD504D93B1CCFCEBAC08DEE1087A2403BFB7C09169
77301EF3DC4A0974A82F04B8E76F2BF1F97DBEA191C666B494C22B62E1EE8395
1B55685801296166B233FF24139BB1B2349FF62A6D24FB1895E3D2B99BCD81B5
0D69C62E630B9875741876032B961EA96BD0202B70538E2CF36C3F6F1F146DE3
15CDC0AF56B46332C3702F0C04C1D011A7388C047EADACD07F5903090792EA0A
F9BEECECEC1982FE239E5833874640DC4520E500B9B89016AE7BF81586970786
8C20A4D71BE0F7AACC6666D1BD0C1E42646023C5735D2A1D5FDEECF218A35354
A26679C03276DD634638709E2F508B30C4DE86DD39F54049D402296852A28EBF
36D4B4647761C1679E7FD8ABA0FF703761B7135D154428926F1B24E6F4EF65B8
4E9E05CE176CEAF4AE5488326210DD4EB9A1B0ACA9145F1566356C3F07B23316
17FA82255BD17AD0B4E4E04D296A954B94348E7ED962708C2181D14FEEB7539B
41DA01FE773E850569536F8FE720B171476AFC771A888AF506DE4703EB8D72EC
C33DBAE70EC296D4941657E1F0778C29AE98D15B82A2219612CD3960A21A1FD9
CC1E6C9FFF84BED996BA60CC2ED322327ACD4E5D56184C3493B538AEF2DE7BE2
F888360BCE1D0D6288E9268C1A90771F30C67D031EA15F7FBC0BE14080747EB3
D6A75638770814C3A9C23430F03FC680E6FEE4254D19F7E17587E3DB5DC8FD99
20764119385F5EDC72C966B509079C01AAACB5FC4F15C00FD60A2382CD308475
73203AC32AAC9E6E0FAD86FE482CF1385293273C0ACD5B09E084ED1AD6687A2E
67CD3DB66031CCBE79EC8981006E72C5B0C244CACFF08AEEF923FB3F7F797BB0
38E1F630ABFA1685DD86B42BDF454923D1A97780A9429910408EA6691A25B519
F9C25820D25AEA07A6EC2C6585916E7EA8B22891A6D4ECFACD723B029D5B1C81
8703FDDA28135174697BE7FBD6C0CF826E9FF08EA50C312EE90FC419654F2F97
67E424645EDB7DFC4376E36A6888B41CA9A9BB3C1F96ED2299BE3513EF056341
68651DE1A4ADB7E24C29D4507EF1921F02205A3AE17BADF8A62214DB1E90F41B
248DF25C4993951FF0632253354AB0D6C5111CA62CD35A90FE88EB5DEFB7635A
729DFD70E377CF418066F94A6D7A3428629018738987035359AEA906896456C9
B2FECBA68F406DCDD7A176017FD8E0B310B24FE98AD4F07CB6325FFFBAC2E0F8
AC6C7D8C7A91CFEA884687288B855A54D69D55B4E353E510BE9F6D9A0204746D
7A9F888E1D564B1199C490FEFBE52C44BFE766F36AF0658CAAD62F8E4159AEBC
95262E24FFB0F235D4DC6954F1D73CC2457CC6ACB91E4AD7914ED96D48C48885
6616DB7FC979AB0AC0353C714458513EFE4781B4200DC8F092588077F4BDFA78
C73551ED3A0BCB8859567467C98B25A5788971AB72C1C9A155C9548B37C1A574
F062C69D3893DB64F16A5507EBFB7C9B3A0F6562B8BEA3BCFB9006C04E7A8950
0B7BA8BF1965F4D598B084C29DF8F410C6BDC2DD438003C53BF8B6EF2829BF8A
B580B538D7B311BAD63FB4B622BAB1EFACF4FDAEE494486258C894FBD1DA0663
7FCF26356BE2933F18CEB334D97EC2B0F39A848CE9BEB316D53A2AC706E23819
543D1D866DA289DD0BDDFC037AEF830010A44D523F9DD1A4D4F0C60196082485
DFE88CC1030EEFDA1E40E7DA485A124A7A6708969207094BCEA84116538BDA03
060CB977F9ACB0DAAC8E5EF9502C8F4D2A6C92F782EE479693073086FF44938C
85D9743A0F38294C8BB1DEAA1D02E68F2788FCB87AD25ED928CA09190172DF8A
4DE00CA999B676F3CCC582B2048A9774919681C7B055E1A6FC72AE0C5715CCE2
5E953BBF765B98314B6E29737FE971259041ECD6E842DF0CC387E39D5A75C44E
FE2A75D24FFEBD397A03A6DC39107EC0E66A334DFEE23D2957B47F293735D776
6BDFB67110B8A8108203C8457212DE5B24F2AB13D54BDACF1B88496514CED731
3FFBF3B376C7BD9454853859B0FAE838F3CAC4F6E1338C6605BD824CA2842D14
B1B38AA9DA1264DB692C01F0E5765F89A6AE2367E71144
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 83 /S put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8BA47FB90F68FE91BA3C6AD5D1A9B05E7092710495D7A302396299160FBC1AD6
77589988C88917F450648A58ED623975A4130B81E97C2A1B17B259D234B85CF6
1DE04C9E9801650FAF7F415B3CCDE72A7983FDB22A4443EECCAF1E56E74991BB
B734596379A991607836C6EA74BBC359E9757442444B13B230A951284C09101C
02EF689C8A8FCE588E1E18810BCB001AFB8F065FCBF8EF6BE145D3B0D70C6EA4
83FF99290E13574EB802422BDE10A913779C7DACB01E8E1587D9C2843A426FD7
3C0A565A6313C91B57365C9E293CD84D7FCD0058330B4EE55C975CF75029C5EE
A309C7949989491D82ED2038D7862B5FDAB718C82A08D3A80164E129F846B38F
577E9A49521D72183B31AFD914F7CDA66866ED94F687D3B99866A3E3B53FFE00
C5ED96A358EE4A340B47CE76C255145D67DF638A32309B022629167664E7533A
EEF54C6A6DEC9D5D6692FB632CEBD691C1F29AFD52CB18BD258ADFB0B4BE5C89
C672AA53D222D84CBC9EB9BC1C8ED0033F5C21F584D34FE71727BB69D19BB46D
3ED6BEE074C1B391DEC5FED81176BA98DDE5E45BFA7AEC0242D5A0CC31BA15DA
4C7091B86ADA039E0D2652A9DC7F835CFE866C3A4621234251CD1D358E1C61A1
099146C70B15560917CD2BCF2A27AD81EC5ACAE31E6FFF5FA9C1CC7D4C33BDB8
85CBB60C6F90B422EC805EBCC0AAB8BBFE5C881E0C41A3E969DD9C230566CF66
56EA1D7E3444363D3B7FDCC2F4A88A067333FB9F70CAF89977BC6203D4B88544
73141A5970EDEB592714DF17EF1AF57B30934D330FAA4B5A27A983128C9F6391
9B04A1E8E19838C381C304D63790A843C9B537C2354E4F29D483C00A740AA913
54C0E502084843DBEA96D60E847FFC605FC88CB3E87E48E410413BC44CFC559C
0E537CC167105E63F5ADA43A0CB2BAA4B44AAB874E76F3B59149BE9FEA0A61FE
7B18647344E5ED6CD61307B1D3EC5109080B25718D7F91A2CEF434B729531573
EF3DCD3FEA1F0CFEF2BBDE81FDE2E576C6EAAC6E3E8B8412DCFA0A38985FFA0B
24A37D09C66310426BB34AC4F498489BB27D60980007A21D73BACF23BCB91392
7BD754E0272D443F5050DEA499563C5CBAA06C755A2EDD84A5AC156EBEFED269
2733F1510AA221E34F2C001D0CB5977CD652CBEFEDBE239EC19B1ACA4BD1C752
56EC088D6345D08B8F5EF71CAD06E10370739FA70ED76B04BF8F92EE42D25544
02C7CAD6F4F9BCB987454465F791A1BC987A532C6E6DD76B39648EFD8F2831C9
0F4235049550331732F2BDF442827B326F921480908E1D31BF2A50429E396C9C
0AF8D06281F266481A0D26E724856BC25B0ED5D81F8B624E12CCBDDE173EB852
E9AA01ADC7B8E4868148C002425901CC3BD477FAF1027BD6EFBA7157E8B55403
078B5BB737352B12EF9B483DDFFB8FEC5B468D411FED048F63DCB276A3E481AA
131B174A48CC8802BCCEC379A095C73857C34BEA96DA05FAD8C130C8B85270D9
DD0F821F886FB4496E6BE46F91381B914F84CAE2BB3CED23C185905171C3E7D0
7430C3F4433E3DFF6FD06D553137C2757A60A17C760BF88A6F55CD60F8120635
7DD738BF8FB96849744ADBE50E466F6D09296AECC22591A20B64205D7398767F
24B4AE9B4AC6DADD04AAF75368F35A9C47814CF9022A080D74FCECA367598E2F
F5D9197620EE29AD07AF3C5AB280E5DBD3F65489A01213C7788460C77CCAD0DA
30607A5E773E74C0F06E5E4AED4956DC3839BFD5D780AECFA4FF4817E6150DC5
2DDF83DA3EA4C9CDA68D63EC25D14171FA920BED5B0360F5614DF64FB4180276
9933F44BFEEBE4BB30DDBA97D5E554F7D55044D2FECC7CFA6E9FD79A1AA3E11D
48187983D3E324E329DC421525A7B9EB67512B9E70193D869E46BE6749DC2775
7B8DECA8E99BFC202C89E3083BC87AB53535E5EC06BEFC8D24CAD3A70EE653FF
2BB46501AA56E618800A50A38F705510F35033CDD4AA43722B7F960B09711D89
E2586993EE2F0ECDC051BE89C663B46AD42E6E8B827BF703D4DFDF9B2EDDCCEA
1E0251A42EBBB88E7E789BDAC8BB4F43F7E8C1E11BBC2ACCB51ACCAB07F9340B
F99BE1DF04CBA2AF0C19031D118FD961F4B1723762EB73EF496F0BEDF5013831
C0BEB6FDF21FA680AA1DDC35CFFB29A7F242A7DFDCC1041C5ADD168D8E6337A2
EDB3DDC8A34A10FF6F73D32E2AB0698D6F9D1184487BD87DE672B4A772420E93
459F8D07A377FF01BE719F6DD23D790E4303D69B2A84666E6FA53C46ADA47189
5E044F4CFDDFB729252235958BF0DCA5897CA6A8B966D509CF89AEAB1A3AE844
433A208B520FB6A064B7E4390772F461F7FFEDDFB3C1F194042E3E608D7C66F1
3582A7BA7B6415D05B9DBCD89B63D178B34C1B71657845DA741AC897CE4C5485
11EC8108A1552420E16EF7EF6023F5D56B5DCD711D11C9FB336D95FA8173A8DC
8E56AC3BF9D7C659C103088B9F10CA536649B401B0C55E3B7F985283A557A996
D0EAA2456C8D364ADF0DB5F9459615421360EB6A135D42F21AEB180C42905E7F
105367C5470C0C60D60A66A45B11D4D503F294844ADF021BFDEC3241AB0A11DC
61CF91C825D8EF8D13A430C50EBB90E4B52E6B7BEE8F985D8259D217D2772E7F
5487655ABB7677C4FB5D2F7E2F8A9632C63D654437852D597A21038DDAD23C75
24139496F86348A8A338C4F7B3F6AFBF5B994E78E0575D132EA08069AD4DE322
0A1D9554C0464C1072EC170BB169A36101F41AD54D9D608257A87F2A19005D1E
C58FA692869ABA809E46017CB100B4A680C93F8DA97FE475CFAC56C3103D4C97
7B943C55D1B41270D6D605A0AA471798175E1693FB201E6C9E62037B6B77FEFB
0AB7100B7B6C2B6A421C05BAEBC80F28B6184196EBBE3CDCFC6D14A9B2E75739
9158751C122AD44BB7B010DDEE8D3D29DB0ACDCF35489F87B67B054265CE524D
3D5B970160F22E863BFCBA67AA3444D86B377EE8FCA7510B6C5AA5CE676692B7
DFCA1A095F51B8FC420949D871C9212AC60495F56E7CF75FB4B7469645FB1108
D2792C8BA01054BB696FE18A2BFF4A83BD21AC57024CC29B0DBE53BAA74FDD5D
A2D53BF4C72DE35EBEA2C03965A9E209D5898A804006A24433AD4E69A0B418EB
B388A2BE23E2416F12F3A0A6AACF56139F6B2C4816F7320F63782E1DDDF34D44
CD02B257BBA03163D15314B8F96C43994F2CD7BD2BFFD53790EE4C0C99903562
78834142820C5722C736ECF3ED23CF9767979DBDD6BB147931AFFCB03ADA7F50
C02C7D36D76AAD42B6D66FD0E7419FD02E24601517BCD2E46B2B0C977755BFD7
04B746C29E07FFFF137BA87745DDB88624569AF860B44EAAB6D2D3FE411A8150
BF16984CC248359B4F34B54B54571C41BE1D4024B87902B6AF6A18CE86ED86FC
ADB8D66240C93EC1720762917A175EEDF9913292D3FAA16ACF52887C89BF8574
A9376DE5C5F260E34CB42D49713E5E1AB57E8FC534B62A9DB87C0FD816C58CB7
2606D2733A4A15F9A650AEB8ADF92CE46719639870158AAAC9F3C2A26C0044D4
AAB873B21BEBA3DE36BEA29F93D2E548C4B982E103B2257B9D4C5610BD052EBC
F703102D8EFCB3590033B69FE9BD05B8AC2AE65534717A04ACF02DF9B76BB5C7
F32F43B001584062BBA1A9146421973EC7B64B9EAC6FA80E9CF670DCB89F650C
FF050306F7303DC893AEC222A734ECE0A907B00BC2EF3F33AB7EB8119D7F6954
63A2B073420E392111D9406DB21763B58CDA6142683AABF8E9D0967CD9920263
E792ABDB8B33EB10ABDCB2D943CC65102F08DE6264E0E459214A70E10C1D2877
93B4E0BA6DB0E829B913DCD42C1BC0434071D0F286F760FF2F402871BE6DBBD0
4AAFC0A0AD4613F832CEFA2F5C2AF42B7E7FDDFF0B60FB831F9C0C12B1ED424E
6D37EDE5F026FAAB67214FD4C6C82308D0511FC994951DC47E2614C0D750808C
77A61B815689EDF26A082C55B8280C87684747ED3F0E474D3D8D249B9ACD2008
7C71D0A715C1C85767772506D66F2BEB3D0B68AA31F9E2602C2E13552F148457
B123B96FD2B6BF34981071F2547F490C3BCB25F9F8C7AD8B062A0CC068B9489A
EB29D356EB2C8E67E6076CC5672D7D7C38B55E579E527A3A4AADD638670837EB
1199CDDA8BE09AEFFAE90B64D3F072CA49C4376C7319DD04724096B782319B96
A61C4F9B064E3BA992690D5F9556040345AF5678649F2EE44133108B67784E44
6D387985835D5D08C630FBF8A674F8503F9FCB94B58AC3FFE19BA855C220579C
439B6D14F7F837FFF4C717E8E18A72E31CDCBB1A936754AC9C898F2C53236D00
59B1C3237E11746230F01DCC64E3869A18BAA5B272FCE9333A74901C288FA986
568942A0843AC00E1B5F0EC1B016D893CC24E4C70E44AD8F8B11278FFCE8EC80
698DB1F374D259C8221EF11E613282FECFA1D17DBE09EC7925427923DB1F1CDC
05DEF60E81A18BFDEFD78F34AE2EABA9FF43CBED11EBEEF3B4E073293F931577
4960A9B6B7680E3CA8D604F8FE4F606D515B58A55A60182DED6DA9E46FA96C0C
62C6CA43FD99AD1600B3F7631E2EF8A4E598993E3D814D6D536A843F09E44140
57E546C5B083B5D265CC18B8CF9C75949D60FD09265DA0C8E3B2094D61E5879D
46AC72F14C3CC334977F47F55153715473FA5ED277F1C233372D0B7371483474
09EA7ABE47E1CAFAD7F8D11C353D41759B4ED80A1C41EDD78D399BBC10382B4B
2BE42931DCD1DFE3109798E301AF42E1CDFE18B78DB83B6DB4AB158128F0C951
8A51310281D08290248136E478DA1654E57AC7EAD99A8FE60B6F17FB78DD9D91
E4C6A888C0C5BF05DEB5A3C0B318FC8BA35F4DB7174998AB84C71E2002F44631
D55FD39D6C167FAA2553FF9B4E7C8318B622DD3EE12D94E5B16033F4DAF12E27
07195F73F2DE39BFF63833D6A65AB0720725D3B3539C11E307A4787938CC3882
944132F1608431EF05075A2EA86E472F66833950232243A8D839EFF1D777354A
A6BD94B356B8E11B8562803608E56EEFFC113127FD6829FD11B7543A34C16398
86E85A751DDD4CBD5373A6F95097434642C31BC631FE9FABF737E42204D70038
54C5BBD6016ED7B34C55FCDBA578CA343C8468C4AD233D2224DE003F0EB22AF6
557D08786DD24A5FA71BE670A9687EE447762951F102BDE8C16D35BD942437D6
C0B97F4D56DD04467BD358E17B1DA81C36CC076D0FA64B4D1EB754ACAF6A19AB
E252C16BF6E11175E5C71B3FA93F177D611894BF02D266E130609EAB44E73B03
6C9E88094624D1DCB2FCC1D479910EA5A0F03EDB17249CFB5BF8CC62BEFFF32D
43C87575F24BC26BFD673A4775241F8B2A1CB1F3EAB9FFE91DEA146F9AAA0E49
EED0F86F25402F2ADE388F8E159C5B0287EDFD0BC6404FDA0B452F72B684EBC9
547E3E74A08CD541C8B182213F3B0FC70BF9292469DA26CB06E77FA22A19974F
D9A98624B65D6DE7E414E828A24CD7A5B87E86A7B528FA56C1481F8C37F7F526
84C5E77D767ABDACF0AF6608953579A547A10217751FFFD105BFD5383DFBDA76
1627BE0A483AEE6B872F8D627520A52C47B14AF203AB1BCD4F29FD305EC2555D
4B710697A8F166D8E91420AEE9CF37B8D45F96F24C3BE52586EF4D1E9B6897DE
134A0A7CF7A5345F69426D8AE03329FA7337CFC34434334D98D74BFF048A8B16
24AB52208CD6D17C07920D5648E8D3B23F7CBD133E9C37C8CDF1130597EB2AAF
64145D35656C35D2D5A13C904BECCCD4CA568E9D3ECC011E7DF8A5E2576EC5C4
BB993155493A03795B917C9276967E8EBF7A1DA4A565B523CDEA8344024ED6C5
87AC170499270AD661DCC7CF1F0B3D93336E786DAF8266BB5CB11FCB2FDA4828
E8987408C71E31F759A32F89C863B9D5294EC01485CDE210177E92DB50994CE2
9A40B500E605CACEB4CEB914F40BC315DC9DD9DD313C1573F4B3420D6E8F792E
55044879D36BC92FC1AA5536A11BE62C23E2A3716DEDCEFAEEE60FC06F9DF01A
9A33B5B0AA12B8ACB53A2D27B949E7B29E46A5910D494C7C6A617BEE5222CA3D
7346825F500B2E3F121854187691B68CE2B85BFC5F8417E0D48B294E1C3F9F89
594FC4671F2223462C4E3E3231201FDF9473F3A25FFA2A9F3F886923A3B1CADD
D5D10E23289BBC14E3FF94BAE81E1479A6066ABB4590533EB24BB907D2BA19BC
5DC20EB2453F6AF99F7ED3E9BC16D695603C7E5CD30E52B714084D3041A9D623
60568C355DD988CA8CCE6921E085992CF5DAC4E8DCD7DDE9D2F1D310CEA7954E
A9AC82E3AF27F7992C372A370896F3FFF8B9668652075BDEA915247A5634E294
57638447DC37FE94DD3D2B6A188CDCC10CA7136E4EE5A6C65D7AD2EB0E1D8C8A
0E76E863284A1399C86DA1474976D72657C98312518ECF925785A47664056E68
05C0E1FED892B9BCAAEEF42BF53C7E16AC1F6A663CECA4A7085DF1CFACBA9645
8ACF346B8ACEAE08206EABF5E61E44AC24B1A74C33998F3F1F2854F50ED0A06B
17CE83D8001A5C9FF8E80ED4A225EFFB4701054DEDC04390A0CD7CB9D0A7B657
794BCF1689296F95F6FFD85C8499BE08230DDD45FB28381E3B9421F02605CA36
6E5AD3DFEE8196914DA71E302A018F0D868E92BE4102E1F9C93AE270A5E512B7
CD099B376D67BD5FFBCC83C3EACCB86F52A950D25DEBF42C2AF145DB150E3E32
6652F448347F0DD8D042D0AFBEE1AD0B20F4F74DFE88277C4EBB8AC64E83D6AB
77E04383780D934F83365144130C0792ACC20F75ECA9CA14D0E5DB5CEB199DCC
D72EB854438252CA39202C6F98B96FB3F8F114291DA4F888FCA7966D809FA2A8
2FB621A02F3C7B159947EE586D01959A3958E0C95F52CF5F1351859A233FCAD6
DBEA7D206A5E05F594B53F9AC7041252CC93EF3F9B449719133DB68A0182AE64
4EC087D61BD7F5A754E41D41E7496B442B1B5D10772F1453AC99B782A97A6B3C
9412E03C8E815A156BEBB6D9D77C1CF4F24AEE05CBE17DC8AB33D6CE866417EC
A85D69F3A323130E6CCACD2C4D184A54918D1A860C7F5B7654B19126CAA6F4D4
39343EC0D31E1618BEE45028FEA319C4CD231C2DF9216275E4D972A8E45158C8
89886E3E3A04AC5D1C2D9986A4F6AB50AA06AD01112B104F6D12640FAB47B4E9
F25BEAAD82CBB38107790D7043BC2A229BC4F3C713B58F9C196A1797E95A0B50
F8446C73A53C203694109A858B144985952569E496047ECBF3678A09B823648A
611AC754688F72B9CFF54F51AE301292E67664C56DB9CB835C11263FC9DEB775
EBE5D6B8AFF418DB484FAF8E7A4725407A505AEA79AA8CD1B9AC0735EA3D28EC
A1D268FDF6A0AD32987FA289AD16229FE668AB71961A5608F1E55F69015FC473
64AB37CD270C560EFECE2EA9FD0D10506F36C1103DFED23F7D1177E41790F175
BB548E4988A580FAE21BB96DA1D56B46852EC0E2F9F5919AAD0021BCB64B5DE3
85EB8CA268EAF1E5CEB790D156870B316C9B8EA03D012AFDBBEBD944886E7735
37643E58AEFE9CD82A51750B13A7BFFE30D5F0C5596A36592E4F0577439B06DC
376F92EC5B54D8D4AC1C3B7128866A6766CE7798D09B43FF4D6DF14E89CA6D11
93CC34480089E8EF4C2E729CED078B62847FE4E92126D11E34B58F6752AF86AF
FC075FBBA07887F24FF10F7BB75AC802A6ACE6D09F275ADBDD2C87C49FF672BE
5689C4F536FA06A43A859EB88158C4CE23A3D5610A565FE72FFAEB3AA549B459
A1C7172E9EC4DBDB13673662751C7F3A00C00B573A6762490AA406471CE4189D
E217B641832AEC792A0B198076E99570A490728A49344D5246C0B93AF3B31747
D8AE68A6D94CE22882CB6298053E37E00D9BD87BBA2936A5AB9DE99192D9B97A
6F145FD23E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /colon put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 106 /j put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEC3455048FC451BCDB48DC414AE5293A60
5A59877D6DFD21EAD729CDB7B378CEDD34262B37A194EDD0BDB24AA42649375B
491DC08F6B03DFEB517B2FC125DA9373AFAA94F4E4BC09510A73E079F4ABDD8F
93529E898B13ABCDE7322323B3A2A02A0BF388E89B4F529A66FA22D38E3EE342
54475A1989BFB7A119CF95750D5A18BB4FA9CDA30DB6F1AEF8AE8448BBC999C9
FD0D74DE9A17A3153617F07CACE92977B68FB5A1CFB29FD42494D5D2B9C1ED81
2F3CCEEC1BC079E837DDBB57C7E351F9925FB96349F8D9786D8E6FF03E9C4C1E
67DB235577B68003BA14073E2702296B284F803259283005D97035874D2B9AFD
4D3F29B4B1E6EDE30DDB9C68348CC174A091791FA74520C8614D4FB1125CBD6F
B9367559D715ED057FDF6DAAC180C7FA5CCEFD0C5878A91B20D4919792C03CA9
3AFC986C34C08358A3E85F241E3F8F815FCE7C8E07C2A4258E17D65823264049
3803D47C96A2745580EDC957AC4291730A840A2BADA50A28342A2B7093A3F731
4F4F656E974389E133C53F89D5DD6407BB98B211697941A927BC72A0956FA78E
2DC624B2C253F76778698BD1510D509244AB0465D4261E3AC31D77C4F755096B
50C9CD8103CFF51490796CF35B02E38BFB36CBF2E6D0D7304344C4523C369946
C3BAD318835D4707E90A0340BB7B6ABEBE9EF7E7FF54D1784AB514FAC0FDC8DE
B8DE95405811AB2F25F2391855929C2C452295D698C749DF868A962183036CEE
800D650FE2CD2E74C038665ECA680B173A27305874D4AEC967043DBCF9275F02
7D92A0AC4C098A5DA5939BFA435FE56060110EA1E9FF2BCC9C5E93964FD43199
8133454CF0A83B9946D6D2235AE3F345BEFA7D935A4FD76D7A9CF080E34D1983
6FAB58E2C907D4EC63F6431805A40EF837884510B1A8C7CF8F290F034784C81D
9FA6ED8ACCFF15B6ADA1CD0460591326B7A7A5FE7216BCE081EF42F0846374B5
0FF9F6FB8025D2DBEE17991FF93E7C09B55135397A77ECB0513611ED0874B55A
2F393F513C09D57D1775AACA160D8D0F224B875C05157CD351DC708D082D9A9F
C8033277D759BC5086CFE6D15CCC858FDF7632930C17188701154E76F4EF45D5
D3F0FFF714C1764C31CE1B3F625FFDB0B1EEC921628511067907057619643FD9
2F82BB11CD4A10FC32C7ECB4241699220A67EE08D56AD4741F99ED5FA1982196
402619D4801759F7EDC36C78E30CCCCE4EEBEFA2169FA75AE50BC929B24FAA10
868D2FC5921E7387DFD6DF582ABCD8F5550E36E9CD715B6CF87FB6CAB223B208
068E4FE6379F43F39F52077A8589EFDFF4966D141B0B7B1AC40E7D91597416D2
37A461DD7A3FD9373F9A710468854699C3807A01337FA48DD8C147416D071DF7
5C6C213D9D2DB75112D505AC7F289514EC6A3D4D04DFBAAD21A297C69FE7FC82
BFF3BB8E425F3B8B3AECCA8DD3486BB7CCF1055E2BD80245F249EBAE85AE4898
298C84706D59C727C55EB86C8253596C793D2CA0F53F0390D36BF31ECF83D795
D880A41CF2FECE6A1E312CCCD8E06297A5F6CA68EE571538C2688983204142D0
389EB6F670BA5FDBF96B77DE5D8F68846E3E5386A157A351ED0747F4A7FA3CA3
0DF5A4DBB0EFB46C67201AC4B9D276683633FF6C77CE97F920D4823F7C5FD181
1F96CEF2B2243BA960EC05CB8D4EE2F157C860D42BB03EED7CD4FFD2284A93AF
550285DA9118CC0DA672E9A8E3AFB3C8F00A486D2A2B215955F7EB35107E25C3
1677E08CF2FE6F19A849D53640C5E597BE394D55A8FAFF09FB59DA2AB8EEF2A8
BF1DD13641CF203A0D91D7872C7FA6C53C56DA3E1BF030E67C7B0B2C498463BC
F517CDC28FD116C49671ABF9B761FAEBAEDFB0A014F44723738E1B94C3021553
F42F23803BC7C5A4E249043B05F2BB2117BCBFDB3F880D701CB323DA5C966FD7
221BEBAE76CEC962F3673B516860A20DC7C4C462497772F7F63D27EE537DEEBC
8C7A2D7887B361297AE1216E7C1C594B3F22192FD278E2DBB5DB27BADB51210E
0C4BEEFA8FD4D00ACE836530F60D57253B67C93DBDECE93275A3D68521F6917D
30FA36FAEE98F622EF313CC8431931D1501713C4EC13E0CB4A7EF88EB5729C47
1F358ECBBFEB510F85573BF3B9EB652878D2D7E38A46CB60FA4D5E4A384094A1
58AECA25BEDC5CEE1A30CD66C28541B78D67CD5551973090EF29DA3443EC28D3
99200BFC00FD0236F2EB01AB0C450C8120A5EAEE73D6E82CE7F46C03DDBEED7F
D8FD74E897DB1854F135C2B69D885DAEF783AF89593B13705D48BDE5E74F96C8
2774AF2512D837DB53D1C475D56175AB87E1A511A61643A607CDD14F0BF896E4
F8C78BCB655AB02646E5BA327D730638DA6B918A3812F83AAB8D92267B48EAF2
4CE73DF8D15F751098B896DCCF4C80EA065E0CE1EAC06CE75C965B161FE24865
F689944FF7BD2AE3908B50E3F019F78F606304C7E334BE68453305429E55DA9D
11DBD7A914922C2AD15596B36EFD5AD166743BF4A054B00F958071B55BDC761E
DDF4C27D2C9F792B326228BC4F2894CBC866E41065DE4F1CF63F6A5911A5485F
C02604C9A02CAF98E3E70999CFF6CF9FBB3AF87AC3DF3EAFF09FB7D35C6FFB28
5C8E348918A8B909ADE3786D784A02E9BA9C8771227CA613F3ABF883222A8596
B542EBF54E9DCE327B568A3BFD95B20F327FA3BE68C5414D98EA6B13C25647ED
EF21FAC28AE2FD8DDB832BD9009909074C8B69A24AF8B2C959EAD812623B5135
A85BD472D60840A71D8CADE989441E890CE5EF1EED2985EC52C26E5B8E62CCB6
85D92C3919755C48B4F711372AE3B7BB1090E9EE61C3A9B7B8DD2F0B8D82752D
F19FF85F3ABBCA8FA903A8D1149B34F5662F97BDC23F798626C46F8F48CB5A3F
68E70A0DD4A5B2DEBFD36B8AF16789F16B25B5C71901E47A1DE4A4D4784CE720
311057FCF2588DF17B0CF7F74CCFA06180F24AD2F728881815D2F53A866C95D4
26A6D91A4CD5F45CCC3D6BF6929BD66D577AC65CCDB5FB0D41436BE895C5AF80
8ACD6CD210DF3AF902D6A09E132D0D5D40673760EED2648C7F6F303CE5F573E1
C58A786564AB5D5E0CA6C602609F91B9AAB938F73B9B1D48C5EDF019B0123A62
CF72B2C84E0D27879DA2AF692925633983580277D2D454441C85320A1E2E0D3D
21E2D1DDAF1649193176F82135BE310BE5A93B9D5AFD4893B0AB0657752EBD5D
07061DD7B708CD4959B67C2A4AF92FB3DE13F0E252F8304F428769D4D7ABF1DA
9F055C9C4C55E2AE6C584794E9B43A767E380369FED060294804021F0B0AD971
DDAA90527417891F557739B050EDA26DA3CB501F2297A9525F7380FA2D41FF79
7B1A15C34A776D0422AF0FBAA25E97EAF077424DED986F6E96ECDF79C6420F14
897E71B474775D29BA58BDE7BAD517F4BBF5F288618092F3A29F6746E35B4320
560764BB1C5C6E3CC4531872D88ED8617C494CD347AF1309602F6ACFB8FA98F1
A54965BB8B8F31F27F325A5326A45EDEC4D089E9AD40CEC40DFA1D9FDB3B90EF
026274DA6ABD3A9AD0C749F246083D837AB546DAC6085C0FE338067307987661
0CAFB992F1A4864604AF231967C18E14F55FB9A6D67F4EC3ABF6C0D774D43F98
0F1B81BE2BAD248EE2437782B58C92928862944164BE865C0BC98D9B90133EE2
776A515C73BDB92D8DF5D8096BA821DA05D3FB3054DFF46F24A1597BDA3A62AD
4E1447ED7D87B3A9DAC6689841687DFF2BD07E44ECFEBEC12039A6DF938B4263
9850A7EEDED01B6FC932F0DF6A877DE6AEA9C317FE4EC60520A79A488BFB6887
0C0DD3C16C75023C1FBCFAA92D9FB211142D0A5CA26A0CF1DBB35482652BAA60
2F969B09497EF9EA547AC979A2B86CB596462ABA7CC06641B2A10C98EA22FB80
5E85A03AEE23CB9217A93B3F62FD5C0B2B6347152B36DA9F4B7A48F476CE4285
398ABB69542B4D8FB73B686AD73D0164167F541A3C3F10F11847B6A37BE59A19
BBA21E4B8ADC28117CBC2A4CA883ECDE785D0CC278FA853931C5DF6109309FD2
71E558EE14F5CA667185831D7E98ED4FF212781F86754782D1D159B5A0795275
56985D9F9F78A249D4094B7FA167003899EB021E880CEF91D44763E4F32A2D48
AE91E27270B41AB7058624569DD32F2F3B567AD2B0DD8B671BD4565EE9EFDFB5
8AFA6B7CFA78624DC440C670370D3789CC857C427BC0BF01170E49F466679F20
7014B2730BE221ACB64CC71747BF450235DA567BA4C55076E74BAA2A3251F3AB
BAB13E5811BE1F79F08F8BAFFA4470623F4B3A7CB56357C5CBB390BD94EC3B76
4D8B2C7DA2AA8F398BD3EB1798CB9CD018625550B7482D8E79C7C1334B950170
05BAA6471CD773F341515D5E33527CC570E5484B4F3BA4FE5A71537AC3F0D222
5BD3A64CC6B524A38DC4B98142F3D57378C825A91300232D722A5294AC94CF9C
B62C53DCA7B1F4168FBAC6A1634F907C2179CBE0800F9E1DB365DAB7641CFFB5
9287070E0A5216C068A2885B5CCB5E32F88F29F42A05D06343FAB0A1303EFFC0
91D292569D308F07FE3190AE0CF01298492E46D11B64B96B4ADAF81CA0641D7D
B34761441DAD725DDBDFC4E299C7ACFAA5708316BCF7A8D36CEE280AE26EBBCA
FA4C5F7586335449740CD27326A1FA7770276658DBE5177BD55FE125838745B1
53B197DEA867BFC14CBFBE755BCDDAF9ED69C80080067FFE67FE8912D91A7FCF
51A0D0D172BED732BF047B97DD8EA43238F56A1C928DEFCBC6C7249B64B58C55
20CC89F3C861957A67CA22BDA90324480DAEF2F510292F7145D3D17D79299388
F91FA776B3F968587884D671038C9E826A9DFC76A14CEBE454FEA2BCB45DFE73
72CABC38E31D44F0A444B5B261175424BF58D7A0B3BC1FBFA0831D5227567C94
FE9EC70DBC4D2EC6698DEEFD488E94B90EB92634
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 43 /plus put
dup 61 /equal put
dup 67 /C put
dup 68 /D put
dup 73 /I put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238BFD85F8
8B0CC9508AFAB7292EBD17DB0F2BFA908F5E9FE55BD80D0E09A13A99D6D78365
36BA7593CE5543247D66D8891E5DEC2B7C87192EFDA892E8AC1E9B559A64768B
17FECFA7C2E70A4086F25183DAA9D885540C6F70C1B6E7AF8E11BA4798C1DD2E
B7D4F96208BC612A9388E34CF39ACB4B8C228FEB68807EB097161CBDC709BF2F
6FC2F82601FD622A05CD8D002862185FABB230D76693C8E5802D2FBD34ADBC0D
48CE7D308CEA919D0D096D862AB1F528ADC04010B860F00BC7AA6057255A7DF6
BD8BA147130E2A1A77170EE1A71D3E5324ED3BE8E62A7510075ABECBA8375A5B
8302ED28F97F498371BAEDB7B887A8C6479AECBDAD3753FCB981B4C8002485CB
219AD22C6E76503F3FE34DF9CDC713AF4DF00F86FCCA06B7DE925085317CCF86
66F070FC790A98BB8F77D161F6228107C92BBA3269401E1EA1294A88CACA2481
C23A34DBE22090B97CAAF513C5DE8404F8ED72CF2BFCD6BF52FAABE5F2F227A0
2720AB8ACC2E93B1551E750DB24390D7F0804F28A5DF28115C48E8A3CE743729
E6C7A602EFA8343EB64410CA9701D58A8335D97B202A5FF663188CD00372D5F3
5ADC92F10775089CF00EFC3846B680BB0FB087E054E95E2F884193E1D5FDC28A
8A7F6FA6EC89007816A77321A30DD12D6983FA9D95A67EE2C1C07595C0A0E294
28F185FCCF89BC0778B174A9FB4F5872BE9544EEE598AF63E248E07AD608D109
2A5B8824A3D35CD75534BEC4BBCF08C2BAD47CA48476A0AA922A1837D9556E0A
74D4980CD6F8D540F5AF77091EE08F1E8D932840FCA37276AD59B4914B9E996C
BF597BFC1FC43B8D155A852A73DF83B98CB18B7A22D2B9E38EA2CAAB3048EEF3
4AD0B05A9F13DFCAB6B38269F4E4E2C393803A13BE012557B1C2E0FF336C7ED5
2E1BBD6271DBA6A5B619FC2E505DB5B49FECBE25FD43EE5BA5EBF01939FAD8C7
D56EFE24E392E8E9B81457552073B31994C0E2CA89BB581FF57DDBFF7865063A
2AFC57C1B71658415CF702346306E88069A03FB214ED307DEE4168417FB7E6C9
492C2FC9F533D1F3DF54A029125EF9033C8BAC0BB1F01497AD29D079FCDC56E9
BC4B183286B5B638AD6B9A54234FE3CBF2C829B35B0B5280E2B9AC1B43885C07
AC4F63438D629A477E3EC8E73443B8B652223DFFBD5EB57BCB9524341D8C57CC
3F2C4BA2C809CAA830479D9CC088E1E84FA3B14E0B3ABCBEAEBFC1B1AC7AAE67
32DAC66605BC57004969D046C82C118E0EE3928559B14D87D89171B3A6B28090
121F994B77EEB185D4E20EAEE6B29475446ABBCBBD1110FBA879DCEDF7994019
020ABAE01BBBF1C500EA0F82E6D25FC3104B1292A1F83517BC28709D3864CA3F
6C3320D2618AC4BD618B14E85CEC3D63192BB57428EC6A4E26131DB04E222FA8
EF8F0BB1E23BEA55EC1321A9B9B15C37D014C1E56949F31D5077D24EFF6E6390
1B52715557491BCD8E76A2BCA0ABAF1FEA4442E85C9EC0C9CA5E20B1B2C5ACB7
031851A6108AC1864C968DC394CA300DF3C5A3E0FF80305714CB9D2D3330ADFD
7241F285D511A410A3CDC6BB9FEF729590483A1A2E56BEEDA50700CCF962196A
A2F9EDF2AC03934D28DA531DA4D13E8C03F4B604825BAEBAFA6643FCD7F55E72
940D5C959ACF87C22EAF2C0617067E771012D44BD03FED896F36EEAB8E04F779
51756204D73F003E6628595820D728DA89BAB8FFF5FC2B12DD9200DF532C382F
EDCF04C5607BAD85A0FA8C83E4AD433C08CDEAC7113FFA742AA22483BBDEF7CE
C87309B396758316044F422F41A50FD350F75749950CD200968A893F03E944F0
367ADFCBF6884075AB33B7E7170C4B10ECD0C976C0D3B3E78E9C1E574F41ED7A
56985341FAB490A39881C9D4CFCC6FB3E7EC683F4585FF4F6ED5767302E557B7
4DC2FEEB3B5876F9FA7BB5CCB104813437A0B891A59CD2F27816A9E869703F94
EAC7041BB08566DC18FF1F5AEAC1EA50C522B5A42CCA65ED9941194EB60222EC
6E25538FF987A4E2A66056BB18F8C0229943F9BF5783565884B338B271298724
000C3D724878D8C90954E835F134C3E671B402F789CC1E2BDDAE215F25778D22
8E4205AE867B7CD2D8C590A60E66BA61591D3311F85DC40CDD2B04DFB873D42A
52909D4EDE358F9485EB68F25E9158A022E0240FCA9CFB7FCB1955C7DC8934E4
49DA7CAB9B111BBC5D7B5E2C30EC4A73B0722F4CCBF11DA1C0A75DC118DE8B1B
9EDBF539C381634EDA28877B6B8676135B835858023CD7DCC20AE6E9A89BA049
0980BEAD3AB69689DD72B3FC8D47358AD45FCE20E4F2A12B7B344BD20B1590CB
7C9261842A53247A6E43E75057A27686746397DC51F40C71F72734DB97A902EA
09C1A9A643C720FF36542BC344460AF58E4AEC4DD1C06E11DA44A85E418A5348
1ED341814C234B96BEB2124F2C985AE5C0AB5425BDF559E089D2ED1DAC2DA5A3
02D7E61B99A995505606DEDD149C2FFAED18B816F850268C5550019FD00B0495
D0D2F841B40F31107967746D5B3A5CC23BD0FFB24E73150D293A0032D6CF19AD
21811FD0A4E11C873E88DFF127C39BF494D17A43906750851EC525CF722A35AD
37ADB07CF34D99EBDA63F13F4D06369C665EEAE2A0DC830B38CFA39FD812A65C
BFA49E45E79563E317B6FE94DBA183551CBD5758CDDAC4C28FD713683DEC1DA1
06227D7A36B5AA4F7E7C5EAD215E012FEE2151C91429061E8ACE4B926040A846
7119F1E155676D10A8A35955BADB667DB1018ACB7985AFB3921E1193A47BEA0C
872BFBF495D2089AE6F8F63251635B217041C58E88380A8FCBDFCDC7BB47C4B8
3C9C056E843B28CFF54A7BE1C8CF5F084CB01986DD0A5BB2EA10B35983F87C56
36478F2D9DB1F9B65E01B0827B4DA0C0F7F14DFAFE470BF5799B1CDDE796999E
266D497F123CD36435BC029D941713A7E4882A7FBA384CD67EE802E0588024B8
5FE0726E06B403EBE8AA154CA64FD630F1AEC52F2EDCB0B78857DBE1EA6703F8
A2FEC5EC63387193CE5BBF4C860981B737C8D7BD33D916F80CB6769858390D29
268130D974E2E6A500275C91DAEC866A371870DF4CEF5D867A2C5A8F5DB2C816
C3E840997BE56AF0E93A3D725B0FA01BB4E3AB988FFBBA9BA4335D691C712D9C
1029D58C29542BD9CB414BA1120B44516EB0660AB7926A9BD36A998E3605F2DB
D59791BE4B3AF72FCC9BCE6D6E69965FBC08A65AFC279010BC25FDADA4F9EF6B
47B4C9C5965DED92A8090E129C323D8B4FF8129A8E2C2B39C758E157A7CB5782
439A1F7B4BB39A1524C29F33647BFC11D1C6FE8DF8DA5FE6F24ACD579277F0A1
E720313288A03D064FA5743EB7EAACE464778792E35104E195FF8F42493EC054
D97C7D61C6AE9B6B9FCECB4088EFEA9140C9DF3BC207A656228B052E3B71E26B
90367A3898EE7210AB44658554092619B7345EEF3BF155CCE1BE461A80B5CEC0
C9E59E9002B038B11E77F4F4665714106632AE5DBA545ACD752AC3E2EE1760C3
D9D96B2769AA12FAF092FA8CE73B66A171626FF92E7EDE0358175E57ACD6AF1F
C80B88FBF94CAA8F9152F1E15252C391419593D8A34707E31DAC7D8B9910496F
82742B7526772CB953DD1795A66CB4E3B2B19D89D1BBEE57E84CFDFA6022C8DE
F2D7B550BB5C0C734AF98F0B7C147EECE12C2FAA39DFC0D70F1FFEA84612ADB2
59A755174F32FC9EE1774E8FEE603D392B9A418EAD034B0E3B7C879AE205BF79
9DB3327132CABAB400777C1E07A9BA990CE8482F2BF8D8D9660E17B9304A5C67
AA7AC7786C94C3835D9B00E982FF953750812FF3F7C332A390AE665C42CCF14A
D23E33D88FD17F1B5F7E6C6F2C79AD714BBAFEB2B04C224769DF051B531D31B8
4BA221862141083A67AE20014811EFC4B481A8D3FAEF7B5CCD10C82959F0C052
18F8CAA424DD0B5826111A283BA4E5F5896E52AF887E21B24D6784BCD8EBE005
917F7AE469DB3A151D25D0EE79C0FD6F748320164232E8FE054DC8FA6A67F672
5434FE0D5EF92D148F93C0D1154788604A9F70831AC723C93E071949B9BC1B94
14650D9606CCF77BD693C3F44BEB9AD5597919F993218C894832BA54245CBC64
CFCB1B54568182650661DF0407D5A5C94BAFC29947A98557BA7C9F947903B2BD
5C3733AE60479C1F7AA58D970F9E222DA3264223AF68B00B4D00322B93F4DE7D
ADDC6FF43A83BAE2496834AB7CDC5259102C42D494842130CF1C836C059EF8CE
B0036F3218DF509284E01B38C8520C77F6EDF4265C5DA10BD0E446132BE55121
1B4EE8657A3977D8ED13B9C769E58BD1294AE0996F117CCD0CB3578F91764AB0
86C1090B39BE2037C3D033F946C91845428561EE0AD7390D5C230818518398BE
CF1432743CA5C70D179350E35761B6970A4AFFDDDC243B1CE9C0DC341F27F071
48C6878443FA5278D3C45C68C95599776889FDC65BEC5D6F515E9026EB177DD5
0EAD5ACC4F83D6119F79872A8BD7C9A7E43669D28BEC0270ED8B0293BA8287FC
1561B6269839279E66B7163C2DA7C35FFD10E9F36986AF77C4983444BF75CB52
5B8E07159A90737E4A0ADFCBAA049DAA8AEE0D5A200E5B16221C5610B740FF97
26DA475493A3D4F5473CA523757B0C5C33CD2774B110DF98A16D96724820E2CA
709D0D7BAB126277CADE0FC938D3BDE3E416E13D6B9A382B860C3C23B56EA07D
B9B6825C5DF054AF15A39FB59F5634B1855377AE52F69C31D44765C3EFEDDAED
286368F7234365CC338B222B3ED9AE9FA24DC23AC7A64D5A00323659DAFF6B11
F7665625B972B06AB8EB4D784ABC7A26257DF09D3CAC1CB75C4F85D197B91511
BF29AD545623DA63F083110C06EB7AA87FEDEF6B002FBDDC83052508BE4B9C59
BAF1C8CB0931AB371FC2FA08240D80648EDB9333F711E34930BAE6186413EB48
E7A830B3411F7A9CAD71BCDAF7796EBB0BE092C9FDF8167D4C1E1FFAF506579E
3DDCC0DEBF8707B287170D086BCAD5077C78F1629C415C1344AAD4223C5A255B
74EC76A136E2B0D119ACF04A8EF0E166EF27CD96FCDC814221A310B31509A995
C1D6305868AFFB0CB5885D892E74AAFD5282D9A3CC8C5E5F5A5A7688B2EAC7C0
017AD7BF7A0038A37E70AB780E4DADA36734A4C88BF4EF169E0C6013D43A9344
9995C14F773925EB4AA549D2B8B4D3229A4D01265DF5C8E808A92E62E827336B
A988407C3FDD2C8BBCBE3639A2B4E7CE89BFC4654BEE5F134C43DE49225EC037
83AF4850A710760C3DEF84236B87DB6FFE385A29283A5114EAD81235D473C5DF
74D0EFB23356DA486584F0A78F9049C095F92E04F2D4EDDFDEED280F1E4535A6
D56E5FD29F4ED52C356B1FA97D1D0FED7F08BADB2F37FFE4BFB0820EA1B819F5
31A058FEC585BB0357BADFE261A4D1DA426C16A6F4A5F74BDC4345DE68309E5A
87A8721C6B07DE06EA53B588FC542876C4E997CBACFB2A2A03384D786C5B2B7A
CC07204B815F38D54D1E425F9409954DF1682C9548F3344A1813A2139C47A13E
57D2C4EF83B452B15EFFBA36B724E766F10E7C007C6F99B3A159886BA9C99CEE
0B234BD5C0CFE43582949C70EFDDF8D743DAD56D73B90517B55240C8A3D3D4FF
C03839C7A0011A348ECCDAF35AD2F86DC31FEA05EBF4B3A09A42F5525E7E80FB
38936E23E8CED7BAB6FA124A65D2484218CB438C91A20ABBD26D8F44F8A454F1
AE4D89B9982C9B3C3F8E108F596991B155B846EB16F5AD05729315EF0210B5BF
A956AD723AC2C0BB9DF5169706C52F7B62B56D16A3499EC50BE7C38F83527CD3
62CE9AADC749D0137549F1DA6D7563A718D1D71DEC516C72AAB998DFD3FF902E
FA6C9A68811B370AADB62A08E3DBEBF67A44D4209FABA01826377C3506DA5F4F
F2F8DE000AFE6106E4EC757AFC3D232210F9D81BCAD6E439A451A2B441DD1CFD
956DDEF1D299052E610C6DC85D7A011E5CC0BC9B2A8AC4301D67CE94010E74AA
E36F73224EBDA7EF4ED2A4F8AD47BAEF3ADF2DB3F319B77170F0FF28E8151D58
5746608BB5AA20A2AD700EE8357C11C37D90A1F31B5C4B02FCBE2EE534DEC1FC
404657430F1CEC533B955CBCDCA2F0C3E2DF96FF6EB729194B307C9B02D06740
C65A5369FFE18FD002C4A18B076744700A429E0EF83DAA328048FA9C4BD6872B
8169E800E7E90C13606AE5FE377715E1C45A5973F74E0A562E5EBF0371F8EBA6
F2FAA9069E35F0A5EE0F8CAFBC3E7E65BF37380E84D2D59C0016E08205A4B6DD
7600933DFA03C893B5A506134443E212787604242C68C1094938A54C39D472E9
F1DCC368A5D00F614F17FE768F27C0192FFBC1CE601A2F4B5CACFF326B30714B
9416DC6CE8F91642618758AD03EDB77DBD79686A20B471B1AA6D154A49723DCC
687EAC4DE2EB9A83B635DE98AC0C123A561AA8694EA7E758B868B34192E4FF16
AA50A455543A5C9B30F5371B1C2C800D8DA4FA0812F1F7947DCEFD628737BE0D
C987534DC53B1D8ADFE5D63DD967D5DBF501C03A0ACE0089B098E71B6BCB0A8C
63E26D201ACF47A8716D51615876DACBF84A8F490FDA566221A8AB2877FCE347
957B384776B4D480FC64A03D4DA85D98B8FFF94973785AEF1CEAEB2420A155C5
69E743769AB81EDEAB6A46823E0ADD112653224F0F40D291A8F21BE23E89FBDD
C2D83C13E84021C92D75E29511895CC9D19AFC9035791A816E104A5102865344
EC9B2CF98C86DE6A7D8D918A3CF5FD03FE2513F7DB5EB5099ADE5E20DA437556
E70403056B7D3EF94686EA5A97211906249A490FD9B2C3CBB22F81F484580B99
A0922D6A181C3019AEBD8AA7C0A7618327CF037BC46B426D7CD77D4C1301391F
8F0334FC9AE49AFF2E82B1D9580DDD25A23518272D21B04D2F4682D5CFAF51D0
CB1F418FE2CCF6DFD6EC0B4580BB9D2BBD6544EB78DC9B4C4EA0638152EB5F69
DE578ADB9110422CF2988E90163F07CC2CF669379AAD25E6C7FC5E0F307D1D06
02602858E0BA253E2EB043DE2C03F989B640EE50B2AAD9730B798835FE7CEDCA
87A42C435F247B1E5A9B23DC9FEDBAEDAA82FFA9B96BC84A63AC324F28778D6E
3AC43C96BA65EEF08576C173D39A3C2C82C8C8EE1C1E67E7A44996FA6E2BD4D7
0534311DBB3BF291F98DEAE5FCD6329A407BF9345BA3599AC28A4E208AAD2B67
EA66DFF73CFCAC654C7B11B29C956498E0726D51EFF8C986E817E53E6E1D41DB
721E752F2FC8892F9D2A268BA7D5186FD7D1C60CA3937144811EE82054058B03
005B37AC837244EEF4534F81A8AA907A4B9BCB4F167DA0888650CA696FD73AE9
C6C46DF13595D65C18676C363436146D3CF26D3503BB10F21D81B4051820709F
3D4C2CB294E443D20D7CFCCEB0E9338A62E6AF75092FFB9DE0F7C1D849D43706
433D297AA2760488BD210CBDD0D5757DEF272C068B150CEAB61BC9E18CE2A3FC
72059D40ACFE002BEAE2BDD7E994B919AECA39F510507389516FE55B6BCFE80B
727C817C7355803BC9CB956D7B848E0224C36D011972B61DC3D6733FF82E996D
4FD79E34BA7A5296C70604AA233734E295AE388A8A1F89F381BE9648641B746C
D57FDAEA919A248206B019B5C1AB6FBDB83FEC8B671DE8C83D61D4BFB90DEC30
06DD32DD725760B5D4AA6BD2AC693590F0124D38619CFD099DFB3C86270D3C60
221124DB140DB76E987854670D806574B3FA2025EF42920866DFD85A0FEEC3AB
D96E1687DC7D22D20C240A8B7C57B62E991F12FC90A17856D28A4A3AEA670898
F6A12847CFC25935F94956B85B8E886655D93EE99C369AE90ED6EEAD2A37E1AC
2DB0E6B723C319CDBA5104F2BDB996FE0B5E0F1C4DA1362EF15DBE2542EB20C1
4B21048C8F71AA854CEC96EE8529D879AF1D7CBEBBA0B511639255A285B8E1A6
AC2614A59E154AA3178FC333A33099838BA6FB51139049390EFCED776478D797
74B204115402F15933F559BA0C425F89B62D0E35F5D676F0474C0800AC3699E4
7A7D3BFAEF2BEA7762EC4CAE342F8FE8010B2A05893C5CA6E856005BBE439612
753E3B373D0EE5CBD6C62EF545415413FC678D77B9833A21C9AE9A6B2B48E163
CEDD482E05AE528E58CB048AC41AF9ECFEE1586C06BE64245130B06C69057171
BA0411BA70767F624E7642E28D0B66D540D9A7486721B49389D42548AA0F8109
85A5BF0E32F6E85B9426A97700ECD9BE6F4EACA4F8394D86E4CEA862613F637A
99A0CD7D7E736017A8ADFC40961C373D0946E1CA8433C823F5F4FD9E00891F3F
3B8ADC77708BC76FB440050F9D2CBD5484B718B3B29D1C2C326A61E7632BCFDE
C91F8FB02594A12C919CA71439614A2D15B4647D9CFCAE110989BE2CD8D34FDD
A6C03860433F8B0162F2E682EC0B8F9C2B0FEF6F4D3D2F73D2E72B8C38A3C41E
9937AC15F576F422AFAC84AF41B28982025212F19808A8CAD07AF4B368CFAC3F
B48C97379060F058E98B9489DAE1A24BAEC98F87EE9270C3F3847D988AA37D01
06EB9B3276612BFB521765E662825C7D225023470E6640CD6944C724F36E31B6
766851402A99ABD8CBB461D86CA5CD8D76C0BBDF9F012309791602CC1662F1FA
BCB173357C81BCC246301291B8AF851A7792026778B5C6EC93B0F35D073403A0
182D860CC72DA8BF6780ABFB74E0D7B10EC1EE9F5D1BD504FC7B019F95D250F2
C58FC998B94BD5A79EB0139E792B08BC45DED21162C66275F6B6B52B40EAF969
73C58348AB75373680537F2552DAEE89165D671BDEAE011F84ABCFE9A9694044
B0390EBF7FF628101BF50045115949AAE15D7A761980CE1A6FE01DC6FEEE5B8D
8919E0D1486AAD72D36D1C7D09438F91795168564BFE7A667F51B38ACF7790A7
D2654459A17E71A9206EB121526C196C85FC60A7C7854C968EDC6587FC08FFED
32C33E4BAA6624C865439DB466B6334E04DB3FCE4A9E89450CC8D24D0AC55E88
2AD4181F313B45C52BA1586D0E1CCFD7BC7C905B4D052D64EC734A5350E3FF0B
D4357BE22DAD56532C782136482F8FF162E4B5B0BBFBC5F41973C9869E9AE0A6
AE7B11C3EC76E3D25EA5869CE5B592DA9274F6894D4758851F32D217226E0801
ECC0B568D0F2494ECBBB712971805DDFD8FAB42E71F32272EE3E1AF4522BDC31
87ADEB03DC21E4AF6695279EDAF5DA340165D164EDD8181C29C88F2EE3286450
6B242D43D633B708871A41B74D693BA285D4A4D0AC7233EB2BB2C5D03C5DD51C
DE82313F262601D54E3B462FBC5297C68BBF8EE6D2244A3DDFA20F481E10F7BA
3EE0BDD935D339C768CD7098DAE8B07B6DC680BAA85141EBDD5F16B366594CFC
80BDFB8AC0711D284AA9899693C86FE4FE0F183BE9B5BF1628D7A5BA884B8B1F
B4848DE03076B2152250F56A7CA8C8AA37BFA3CEBC8ADFBF37230EED74284E16
0E4E599C4FF43D7D3EC4DDA449A1932B4C996AE404CB0288C0E0D80A4A9DDA5B
A1279A2C4BCA4FC9C63A8554A7C39370DB4FE9EE6CECE6F7F844D5153D0FFB30
60D4A2E19D759AE6595591624F7056B2CFD5739947B9E6DFCF4CA6B1E39FFB4D
8DA972F5001985D1C1999BB3D9A6EBD887BBF431251C55D98E86CE639F66FA6A
1F6994BC5F4923
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 18321973 21192927 1000 600 600 (tmpPSFile)
@start /Fa 136[64 3[35 36 1[49 44 49 4[25 1[44 1[41 49
39 11[91 87[{}12 74.7198 /CMBX9 rf /Fb 196[20 59[{}1
58.1154 /CMMI7 rf /Fc 137[30 31 22 4[28 31 46 3[17 1[28
18 25 1[25 1[28 31[41 65[{}13 41.511 /CMR5 rf /Fd 134[35
35 1[35 37 26 26 26 1[37 33 37 55 19 1[21 19 37 33 21
30 37 30 37 33 9[67 3[37 14[50 47 1[49 19[22 45[{}28
58.1154 /CMR7 rf /Fe 141[33 1[46 42 46 3[25 23 3[37 46
1[46 39[23 58[{}10 83.022 /CMR10 rf /Ff 136[69 50 53
37 38 39 1[53 48 53 80 27 50 1[27 53 2[44 53 42 1[46
13[53 72 1[65 72 75 4[36 4[73 69 5[74 17[74 3[27 39[{}29
83.022 /CMBX10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-720 -576 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720
-576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -595 2061
a
tx@Dict begin CP CP translate 1.0  1.0  scale NET  end
 -595 2061 a -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   238.6716
12.31218 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 248.63023
22.27081 228.71297 -14.71783 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   238.6716
-4.75919 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   141.93202
12.31218 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 151.89066
22.27081 131.97382 -14.71783 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   141.93202
-4.75919 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   45.19286
12.31218 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 55.15149
22.27081 35.23422 -14.71783 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   45.19286
-4.75919 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   238.6716
-27.52147 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 248.6298
-17.56328 228.71297 -71.62332 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   238.6716
-44.59329 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   238.6716
-61.66467 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   190.30203
-44.59329 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   190.30203
-61.66467 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   141.93202
-27.52147 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 151.89066
-17.56328 131.97382 -71.62332 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   141.93202
-44.59329 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   141.93202
-61.66467 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 103.52107
-17.56328 83.60423 -71.62332 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   93.56244
-44.59329 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   93.56244
-61.66467 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   45.19286
-27.52147 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 55.15149
-17.56328 35.23422 -71.62332 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   45.19286
-44.59329 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   45.19286
-61.66467 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -568 742 a
tx@Dict begin { 30.39905 -96.0927 } PutCoor PutBegin  end
 -568
742 a Ff(cream)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin { 133.39784 -98.29124 } PutCoor PutBegin  end
 -568
742 a -16 x Ff(put)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin { 227.57506 -96.0927 } PutCoor PutBegin  end
 -568
742 a Ff(c)m(h)m(urn)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
238.6716 -71.63634 238.6716 -88.70816   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
141.93202 -71.63634 141.93202 -88.70816   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
190.30203 -71.63634 190.30203 -88.70816   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
93.56244 -71.63634 93.56244 -88.70816   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
44.9024 -71.62332 45.02441 -88.69513   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 742 a
tx@Dict begin { 84.31668 -98.93814 } PutCoor PutBegin  end
 -568 742 a -16 x Fe(dob)5 b(j)-568 742 y
tx@Dict begin  PutEnd  end
 -568
742 a -568 742 a
tx@Dict begin { 175.2234 -98.93814 } PutCoor PutBegin  end
 -568 742 a -16 x Fe(prep:in)-568 742
y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin { 25.27733 -138.7718 } PutCoor PutBegin  end
 -568 742 a Fd(the)-568 742 y
tx@Dict begin  PutEnd  end

-568 742 a -568 742 a
tx@Dict begin { 48.18202 -138.7718 } PutCoor PutBegin  end
 -568 742 a Fd(soured)-568 742 y
tx@Dict begin  PutEnd  end

-568 742 a -568 742 a
tx@Dict begin { 136.67006 -138.7718 } PutCoor PutBegin  end
 -568 742 a Fd(W)-5 b(e)-568 742
y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin { 26.27328 -118.85497 } PutCoor PutBegin  end
 -568 742 a Fd(det)-568 742 y
tx@Dict begin  PutEnd  end

-568 742 a -568 742 a
tx@Dict begin { 50.17348 -118.85497 } PutCoor PutBegin  end
 -568 742 a Fd(amo)r(d)-568 742
y
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 33.17807 -112.75858
42.96999 -98.77446 42.96999 -98.77446   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.56917 SLW 0.4 0.4 0.4  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 56.62718 -112.75858
46.83527 -98.77446 46.83527 -98.77446   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.56917 SLW 0.4 0.4 0.4  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
141.93202 -132.51216 141.93202 -119.99289 141.93202 -119.99289   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.0
 mul exch 0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED
/y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos
arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub def
n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2
y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.56917 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   0.19256836
true 272.26604 -84.34924 11.48338 -158.84407 .5 Frame  gsave 0.56917
SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   85.02654
86.85866 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 94.98517
96.81686 75.06833 42.75682 .5 Frame  gsave 0.85355 SLW 0  setgray 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   85.02654
69.78683 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   85.02654
52.71503 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   113.47928
86.85866 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 123.43791
96.81686 103.52107 42.75682 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   113.47928
69.78683 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   113.47928
52.71503 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   141.93202
86.85866 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 151.89066
96.81686 131.97382 42.75682 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   141.93202
69.78683 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   141.93202
52.71503 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   170.38477
86.85866 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 180.3434
96.81686 160.42656 42.75682 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   170.38477
69.78683 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   170.38477
52.71503 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   198.83751
86.85866 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 208.79614
96.81686 188.8793 42.75682 .5 Frame  gsave 0.85355 SLW 0  setgray 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   198.83751
69.78683 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   198.83751
52.71503 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 27.40034 324.75357 } PutCoor PutBegin  end
 -568 742 a -568 742
a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   176.07697
148.6766 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568
742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568
742 a -568 742 a
tx@Dict begin { 10.32896 307.68175 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   159.00514
148.6766 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742
a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { -6.74284 290.60992 } PutCoor PutBegin  end
 -568 742
a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   141.93375
148.6766 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   0.12077131
true 212.5151 100.0244 71.80348 39.75638 .5 Frame  gsave 0.56917 SLW
0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742
a
tx@Dict begin { 40.28171 277.729 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   159.00514
118.72342 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742
a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 23.21033 260.65718 } PutCoor PutBegin  end
 -568 742 a -568 742
a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 151.89195
145.75345 131.97511 91.6934 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -568
742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568
742 a -568 742 a
tx@Dict begin { 23.21033 260.65718 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   141.93375
118.72342 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742
a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 6.1385 243.58536 } PutCoor PutBegin  end
 -568 742
a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   124.86194
118.72342 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742
a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { -23.81422 273.53854 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   124.86194
148.6766 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin RotEnd  end
 -568
742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568
742 a
tx@Dict begin { -40.88605 256.46672 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   107.79054
148.6766 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742
a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { -57.95787 239.39534 } PutCoor PutBegin  end
 -568 742
a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   90.71873
148.6766 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742
a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { -75.02925 222.32352 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   73.64691
148.6766 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin RotEnd  end
 -568
742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 220.1788
158.63698 63.6887 138.72014 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 61.54399 358.89677 } PutCoor PutBegin  end
 -568 742
a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   210.22017
148.6766 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742
a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 44.47217 341.82495 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   193.14877
148.6766 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin RotEnd  end
 -568
742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
141.93202 39.74422 141.93202 28.0099   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial -568 742 a
tx@Dict begin { 144.13579 31.36765 } PutCoor PutBegin  end
 -568 742 a -11 x Fd(W)-501 739
y Fc(c)-471 731 y Fb(;)11 b Fd(b)-403 739 y Fc(c)-568
742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 236.49301 278.78616 } PutCoor PutBegin  end
 -568
742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742 a
tx@Dict begin { 257.63937 21.14679 } PutCoor PutBegin  end
 -568 742 a -15
x Fa(Windo)n(w)29 b(pro)r(cessing)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742
a -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
141.93375 109.16595 141.93375 100.35478   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
141.93375 138.7566 141.93375 128.80753   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 742 a
tx@Dict begin { 143.20496 101.16231 } PutCoor PutBegin  end
 -568 742 a -11 x Fd(max-p)r(o)r(oling)-568
742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin { 144.13579 129.95674 } PutCoor PutBegin  end
 -568 742 a -11 x Fd(W)-501
740 y Fc(f)-475 731 y Fb(;)11 b Fd(b)-407 740 y Fc(f)-568
742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -270.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { -106.74858 -124.95831 } PutCoor PutBegin  end
 -568
742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742 a
tx@Dict begin { 9.10507 -115.85323 } PutCoor PutBegin  end
 -568 742 a -16
x Ff(SDP)33 b(Represen)m(tation)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a
-568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742
a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 305.0447 -231.33788 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   268.19107
36.85362 2 copy moveto 5.69046 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin RotEnd  end
 -568
742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742 a -568
742 a
tx@Dict begin { 278.01468 -204.30742 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   241.16104
36.85362 2 copy moveto 5.69046 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742
a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 291.5299 -217.82265 } PutCoor PutBegin  end
 -568 742
a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   254.67627
36.85362 2 copy moveto 5.69046 .5 CLW mul round sub dup 0 rmoveto 0
360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742
a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 287.40413 -200.89322 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742
a -568 742 a
tx@Dict begin { 244.1489 43.25523 } PutCoor PutBegin  end
 -568 742 a -11 x Fd(W)-5 b(ord)22 b(em)n(b)r(edding)-568
742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568
742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 314.43416 -227.92325 } PutCoor PutBegin  end
 -568 742 a -568
742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742 a
tx@Dict begin { 271.17891 43.25523 } PutCoor PutBegin  end
 -568 742 a -11 x Fd(Dep)r(endency)d(em)n(b)
r(edding)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a
-568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742 a -568 742
a
tx@Dict begin { 300.91936 -214.40845 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742 a
tx@Dict begin { 257.6637 43.25523 } PutCoor PutBegin  end
 -568 742
a -11 x Fd(Augmen)n(ted)h(information)-568 742 y
tx@Dict begin  PutEnd  end
 -568
742 a -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   93.56244
-27.52365 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 200.26022
-17.56328 180.3434 -71.62332 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   190.30203
-27.52365 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin { 33.37518 146.2601 } PutCoor PutBegin  end
 -568
742 a Fd(Softmax)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin { 47.60155 116.30519 } PutCoor PutBegin  end
 -568
742 a Fd(Con)n(v)n(olv)n(ed)i(features)-568 742 y
tx@Dict begin  PutEnd  end
 -568
742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 103.29097 -93.83379
117.51735 -93.83379   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 175.37146 -93.83379
163.9901 -93.83379   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
70.09596 -93.83379 83.37413 -93.83379   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.56917 SLW 0.4 0.4 0.4  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
215.96402 -93.83379 204.7724 -93.83379   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.56917 SLW 0.4 0.4 0.4  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -568 742 a
tx@Dict begin { 132.68669 -119.99506 } PutCoor PutBegin  end
 -568
742 a -11 x Fd(nsub)t(j)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 141.93202 -112.80199
141.93202 -98.57562   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.56917 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin { 218.75607 -138.7718 } PutCoor PutBegin  end
 -568 742 a Fd(the)-568
742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin { 242.2295 -138.7718 } PutCoor PutBegin  end
 -568 742 a Fd(butter)-568
742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin { 219.75203 -118.85497 } PutCoor PutBegin  end
 -568 742 a Fd(det)-568 742
y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin { 243.65222 -118.85497 } PutCoor PutBegin  end
 -568 742 a -11 x Fd(comp)-568
742 y
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 226.65681 -112.75858
236.44873 -98.77446 236.44873 -98.77446   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.56917 SLW 0.4 0.4 0.4  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 250.10593 -112.75858
240.31401 -98.77446 240.31401 -98.77446   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.56917 SLW 0.4 0.4 0.4  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
59.41924 -132.51216 59.41924 -119.99289 59.41924 -119.99289   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.0
 mul exch 0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED
/y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos
arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub def
n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2
y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.56917 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
30.96649 -132.51216 30.96649 -119.99289 30.96649 -119.99289   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.0
 mul exch 0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED
/y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos
arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub def
n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2
y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.56917 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
224.4448 -132.51216 224.4448 -119.99289 224.4448 -119.99289   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.0
 mul exch 0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED
/y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos
arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub def
n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2
y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.56917 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.56917
SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
252.89754 -132.51216 252.89754 -119.99289 252.89754 -119.99289   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.0
 mul exch 0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED
/y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos
arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub def
n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2
y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.56917 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742 a -568 742
a
tx@Dict begin { -39.03482 -85.42899 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742 a
tx@Dict begin { 23.19687 -62.23169 } PutCoor PutBegin  end
 -568 742
a Fc(A)o(tten)o(tiv)o(e)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742
a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742
a -568 742 a
tx@Dict begin { -39.60399 -97.37909 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742
a
tx@Dict begin { 28.88776 -68.49132 } PutCoor PutBegin  end
 -568 742 a -8 x Fc(augmen)o(tation)-568 742 y
tx@Dict begin  PutEnd  end
 -568
742 a -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0.09937355 true 31.82133
-26.09875 17.59497 -71.62332 .5 Frame  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742 a -568 742
a
tx@Dict begin { 58.2735 -182.73732 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742 a
tx@Dict begin { 120.50563 -62.23169 } PutCoor PutBegin  end
 -568 742
a Fc(A)o(tten)o(tiv)o(e)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742
a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742
a -568 742 a
tx@Dict begin { 57.70476 -194.68742 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742
a
tx@Dict begin { 126.19609 -68.49132 } PutCoor PutBegin  end
 -568 742 a -8 x Fc(augmen)o(tation)-568 742 y
tx@Dict begin  PutEnd  end
 -568
742 a -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0.09937355 true 128.56093
-26.09875 114.33456 -71.62332 .5 Frame  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742 a -568 742
a
tx@Dict begin { 155.01309 -279.47647 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742 a
tx@Dict begin { 217.24478 -62.23169 } PutCoor PutBegin  end
 -568 742
a Fc(A)o(tten)o(tiv)o(e)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742
a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 742
a -568 742 a
tx@Dict begin { 154.44391 -291.42657 } PutCoor PutBegin  end
 -568 742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742
a
tx@Dict begin { 222.93524 -68.49132 } PutCoor PutBegin  end
 -568 742 a -8 x Fc(augmen)o(tation)-568 742 y
tx@Dict begin  PutEnd  end
 -568
742 a -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0.09937355 true 225.30008
-26.09875 211.07372 -71.62332 .5 Frame  gsave 0.56917 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.4 0.4 0.4  setrgbcolor   0.13442096
true 71.25732 -108.96971 23.64275 -141.08064 .5 Frame  gsave 0.56917
SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.4 0.4 0.4  setrgbcolor   0.12886123
true 165.1532 -108.96971 120.9528 -141.08064 .5 Frame  gsave 0.56917
SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.4 0.4 0.4  setrgbcolor   0.13442096
true 264.73607 -108.96971 217.12148 -141.08064 .5 Frame  gsave 0.56917
SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   0.17813516
true 255.19421 28.32336 11.48338 -76.90002 .5 Frame  gsave 0.56917
SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 273.66835
158.84407 230.98924 138.9268 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -568 742 a
tx@Dict begin { 234.54584 144.61769 } PutCoor PutBegin  end
 -568
742 a -16 x Ff(Output)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
231.18591 149.02306 219.805 149.32263   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 742 a
tx@Dict begin { 53.95584 -154.70528 } PutCoor PutBegin  end
 -568 742 a -16 x
Ff(Input)32 b(=)h(SDP)f(+)g(its)f(no)s(des')f(c)m(hildren)-568
742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -270.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 72.50465 34.94725 } PutCoor PutBegin  end
 -568
742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742 a
tx@Dict begin { 18.7789 53.72617 } PutCoor PutBegin  end
 -568 742 a Ff(Neural)i(Net)m(w)m
(ork)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin RotEnd  end
 -568 742 a -568
742 a
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin  gsave STV CP T /ps@rot -270.0 def grestore  end
 -568 742 a -568 742 a
tx@Dict begin { 66.24544 52.58781 } PutCoor PutBegin  end
 -568
742 a -568 742 a
tx@Dict begin ps@rot  RotBegin  end
 -568 742 a -568 742 a
tx@Dict begin { 6.82881 59.41663 } PutCoor PutBegin  end
 -568 742 a Ff(Con)m(v)m
(olutional)-568 742 y
tx@Dict begin  PutEnd  end
 -568 742 a -568 742 a
tx@Dict begin RotEnd  end
 -568 742
a -568 742 a
tx@Dict begin  PutEnd  end
 -568 742 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  222.48198 -0.51837 /y ED /x ED
/r 4.29465 def /c 57.2957 r Div def /angleA 90.0 0.0 c mul 2 div add
def /angleB 180.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 218.18689 0.11113 218.18689
-26.17776   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
228.74162 3.77626 222.3296 3.77626   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  29.00325 -0.51837 /y ED /x ED
/r 4.29465 def /c 57.2957 r Div def /angleA 90.0 0.0 c mul 2 div add
def /angleB 180.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 24.70859 0.11113 24.70859 -26.17776
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
35.26288 3.77626 28.85129 3.77626   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
132.00247 3.77626 125.59044 3.77626   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 121.44774 0.11113 121.44774
-26.17776   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  125.7424 -0.51837 /y ED /x ED
/r 4.29465 def /c 57.2957 r Div def /angleA 90.0 0.0 c mul 2 div add
def /angleB 180.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  28.85173 -92.0785 /y ED /x ED
/r 2.03835 def /c 57.2957 r Div def /angleA 180.0 0.0 c mul 2 div add
def /angleB 270.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 26.81337 -71.26123 26.81337
-92.32466   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  126.16049 -92.0785 /y ED /x ED
/r 2.03835 def /c 57.2957 r Div def /angleA 180.0 0.0 c mul 2 div add
def /angleB 270.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 124.12213 -71.26123 124.12213
-92.32466   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  222.33046 -92.0785 /y ED /x ED
/r 2.03835 def /c 57.2957 r Div def /angleA 180.0 0.0 c mul 2 div add
def /angleB 270.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 220.29211 -71.26123 220.29211
-92.32466   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 126.01591 -94.11685 132.13098
-94.11685   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 221.82077 -94.11685 226.57736
-94.11685   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  24.29962 -123.94543 /y ED /x
ED /r 2.03835 def /c 57.2957 r Div def /angleA 180.0 0.0 c mul 2 div
add def /angleB 270.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 22.26126 -71.26123 22.26126
-124.1916   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  121.0392 -123.94543 /y ED /x
ED /r 2.03835 def /c 57.2957 r Div def /angleA 180.0 0.0 c mul 2 div
add def /angleB 270.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 119.00085 -71.26123 119.00085
-124.1916   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  217.77835 -123.94543 /y ED /x
ED /r 2.03835 def /c 57.2957 r Div def /angleA 180.0 0.0 c mul 2 div
add def /angleB 270.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 215.73956 -71.26123 215.73956
-124.1916   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -595 2061 a
tx@Dict begin  CP CP translate 1 1.0 div 1 1.0 div scale NET  end
 -595
2061 a 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
%%EndDocument 
countdictstack InitDictCount sub { end } repeat 
cleartomark restore grestore 
