%!PS-Adobe-2.0 EPSF-1.2
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 3 2 294 320
%%HiResBoundingBox: 3.492000 2.718000 293.471991 319.643990
%%EndComments

%%BeginProlog
%%BeginPreview: 291 318 8 2544
% 00000000000000000000626300000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000001199bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb550000000000000000000000000000000000001067
% 7b867b6f180000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000099cc554444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444488ff0000000000000000000000000000000000427fbe
% ecececc5815600000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb55000000000000000800080000000000000000000000000008080800000000
% 00000000000000000008080000000000000000ff000000000000000000000000000000002c89e4ec
% ecececece49948000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb4400000000086579828280774e0000000000000000106a7a82827d77410000
% 000000000000236d7b82827d73310000000000ff0000000000000000000000000000000079d5ecec
% ececececece47f105544886655330000004466000000000000000000000000000000000000000000
% 00004466000000000000000022660000226600335500000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb440000003b7dacd9d9d9d9cca5771800000000004f81b2d9d9d9d9cc987710
% 00000000005b81bfd9d9d9d9c68e6d08000000ff00000000000000000000000000000020a6ececec
% ececececececae483300884400331111000088000000110000000000000000000011000000000000
% 00000088000000110000000000880000008800000000000000000000220000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb4400003189ccd9d9d9d9d9d9d9b97d080000004f8ed3d9d9d9d9d9d9d9b279
% 080000005b9fd3d9d9d9d9d9d9d9a577000000ff0000000000000000000000000000005ebeececec
% ececececececcd5e0000884400554444550088664455336622339922880000005533664e99229933
% 88000099228855336622554433885544338800228833992288555588220000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb4400087dccd9d9d9d9d9d9d9d9d9ac7700001081d3d9d9d9d9d9d9d9d9d9a5
% 6800002a89d9d9d9d9d9d9d9d9d9d9985b0000ff0000000000000000000000000000005ec5ececec
% ececececececcd610000884400bb0000bb00aa8800bb445522008800bb000000bb4455228800bb00
% 880000880088bb4455229900008899000088000088008800bb555577000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb44005facd9d9d9d9d9d9d9d9d9d9d98e310072b9d9d9d9d9d9d9d9d9d9d9d9
% 86180077c6d9d9d9d9d9d9d9d9d9d9d37b0800ff00000000000000000000000000000028aeececec
% ececececececb6510022997711554444554499667755664422229922cc1100005566443f9922cc22
% 991100884477556644225555449955554499002299229922cc508888220000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000005544
% 88665533000000446600000000000000000000000000000000000000000000003355448800228844
% 5544002288445555bb440079d3d9d9d9d9d9d9d9d9d9d9d9b968007bd9d9d9d9d9d9d9d9d9d9d9d9
% ac4f1086d9d9d9d9d9d9d9d9d9d9d9d9a53b00ff000000000000000000000000000000087de4ecec
% ececececece481100000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000880000880000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000003300
% 88440033111100008800000011000000000000000000111100000000000000008811004400008800
% 00664400880000bbbb440082d9d9d9d9d9d9d9d9d9d9d9d9d377209fd9d9d9d9d9d9d9d9d9d9d9d9
% c67320a5d9d9d9d9d9d9d9d9d9d9d9d9b95b00ff000000000000000000000000000000004893ecec
% ecececececa656000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000114444110000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 88440055444455008866445533664e99228800000055444455339922880000001199995500008800
% 0044880088445555bb440082d9d9d9d9d9d9d9d9d9d9d9d9d97720a5d9d9d9d9d9d9d9d9d9d9d9d9
% d97720a5d9d9d9d9d9d9d9d9d9d9d9d9bf5b00ff00000000000000000000000000000000005689d5
% ecececdd936a00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 884400bb0000bb00aa8800bb4455228800bb000000bb0000bb008800bb0000002200009900008800
% 0055660088000000bb44007dd9d9d9d9d9d9d9d9d9d9d9d9cc77188ad9d9d9d9d9d9d9d9d9d9d9d9
% bf65209fd9d9d9d9d9d9d9d9d9d9d9d9b25b00ff0000000000000000000000000000000000002c76
% 83ae8679330000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb50d000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000022
% 99771155444455449966775566443f9922cc11000055444455229922cc110000774433550022aa44
% 55660022aa220000bb440077ccd9d9d9d9d9d9d9d9d9d9d9b2540079d9d9d9d9d9d9d9d9d9d9d9d9
% a541087fd9d9d9d9d9d9d9d9d9d9d9d9992000ff0000000000000000000000000000000000000000
% 08201000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb533000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000001100220000000000
% 0000000000000000bb44004198d9d9d9d9d9d9d9d9d9d9d38110005ba5d9d9d9d9d9d9d9d9d9d9cc
% 7d08006aacd9d9d9d9d9d9d9d9d9d9c6790000ff0000000000000000000000000000000000000048
% 7ea88b590e0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000044000066770000008cb533000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb44000077b9d9d9d9d9d9d9d9d9d9a5620000087bc6d9d9d9d9d9d9d9d9d98e
% 450000087fccd9d9d9d9d9d9d9d9d989350000ff00000000000000000000000000000000001da7a4
% 7148719bb42b00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 114499444444880000008cb533000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb4400001079acd9d9d9d9d9d9d3a571000000002a7fb9d9d9d9d9d9d9d3986a
% 00000000317fbfd9d9d9d9d9d9cc8e54000000ff000000000000000000000000000000001dc2713e
% 3e3e3e3e67ce2b000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 1177eeffffffaa0000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb4400000008778eb2d3d9ccac8162000000000000107794b9d3d9c6ac7d4f00
% 0000000000237a9fb9d9d9c6a57d4500000000ff00000000000000000000000000000000a7713e3e
% 3e3e3e3e3e67b4002288445544000000000000000000000000000000000000002266000000000000
% 00000000000000000000000000000000000000000000004466000000000000000022660000226600
% 3355000000000000000000
% 000055000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb44000000000020627777775410000000000000000000316a7777774f100000
% 00000000000000386a77777247080000000000ff0000000000000000000000000000002bae3e3e3e
% 3e3e3e3e3e3e9b4b0088000066440011000000000000001100000000000000000088000011000000
% 00000000111100000000000000001100000000000000000088000000110000000000880000008800
% 0000000000000000000022
% 000044888888bb0000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb66000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff00000000000000000000000000000069863e3e3e
% 3e3e3e3e3e3e71890088000044885533662244993388553366223399228855443388005533664e99
% 2288005555666b8811880000005533664e9922993388000099228855336622554433885544338800
% 2288339922880055558822
% 000088bbbbbbdd0000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000077eebbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc0c9bbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccdd0000000000000000000000000000007c673e3e3e
% 3e3e3e3e3e3e677c008800005566bb44552200880088bb445522008800bb9900008800bb44552288
% 00bb0099000000995500000000bb4455228800bb00880000880088bb445522990000889900008800
% 0088008800bb0055557700
% 000044000000550000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000003344444444444444444444444a666666534444444444444476cd4444444444
% 44476266665944444444444444444444444444110000000000000000000000000000005b913e3e3e
% 3e3e3e3e3e3e7c7c22aa44556600556644220099448855664422229922cc60554499005566443f99
% 22cc11556644224477000000005566443f9922cc2299110088447755664422555544995555449900
% 2299229922cc1144888822
% 000022444444880000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000008343e32000000000000000044bb0000000000
% 00001d3e3e1e00000000000000000000000000000000000000000000000000000000001dc33e3e3e
% 3e3e3e3e3e3ea4480000000000000000000011880000000000000000000000000000000000000000
% 00000000000044331100000000000000000000000000000000000000000000000000000000000000
% 0000000000000088000088
% 000088ddbbbb880000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000004213e2d3e0c000000000000000044bb0000000000
% 0000002e293a3210000000000000000000000000000000000000000000000000000000007c913e3e
% 3e3e3e3e3e71a7000000000000000000000033440000000000000000000000000000000000000000
% 00000000000044220000000000000000000000000000000000000000000000000000000000000000
% 0000000000000011444411
% 000044000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000015363610000c00000000000000000044bb0000000000
% 000000040404213e290800000000000000000000000000000000000000000000000000000eb4913e
% 3e3e3e3e86c11d000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000088eedd330000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000c2e3a210000000000000000000000000044bb0000000000
% 0000000000000008293e2104000000000000000000000000000000000000000000000000000e7cc3
% 916786b9980e00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000055aa5566bb0000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000004213e2504000000000000000000000000000044bb0000000000
% 00000000000000000010323a1d00000000000000000000000000000000000000000000000000001d
% 5b7c691d000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000088000000550000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000004444
% 44444444444444444444444444565432100000000000000000000000000000000044bb0000000000
% 00000000000000000000001936434f44444444444444444444444444444433000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000055664444994499008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000228844554400335500000000110000000000000000000000000000000000000000
% 0077660000000000000000000000000000000000000022660000335522660000002266000044eebb
% bbbbbbbbbbbbbbbbbbbbbbbcbecfc000000000000000000000000000000000000044bb0000000000
% 000000000000000000000000045ceebbbbbbbbbbbbbbbbbbbbbbbbbbbbccbb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000088ffffffffffff008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000008800006644000000221111880000220000000000000000111100110000000000
% 0088000000001111000000000000000000000011110000880000000000880000000088000044bb00
% 000000000022aa00000000000044bb00000000000000000000000000000000000044bb0000000000
% 0000000000000000000000000044bb00000000000022aa00000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000044000000000044008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000880000448822888800666699224433881133992288005555666b336622000000
% 3399508855554444553399229933880000005555662200992288228800880055443388000044bb00
% 000000000000aa00000000000044bb00000000000000000000000000000000000044bb0000000000
% 0000000000000000000000000044bb00000000000000aa00000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000008800005566008844997744881133558844008800bb00990000bb445522000000
% 0088008800bb0000bb008800bb008800000099000000008800bb008800880099000088000044bb00
% 0000000044448800000000000044bb00000000000000000000000000000000000044bb0000000000
% 0000000000000000000000000044bb000000000044448800000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000668888bb0000008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000022aa44556600229988446611884477448888229922cc115566446b664422000000
% 229944990055444455229922cc229911000055664422229922cc319922990055554499000044bb00
% 0000009911885511553300000044bb00000000000000000000000000000000000044bb0000000000
% 0000000000000000000000000044bb000000009911885511447711000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000066bbbbbbdd0000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000011000000000000000033550000110000000000000077660000000000
% 1100226600000000000000000000000000110000000000446600000000000000000000000044bb00
% 0000666600991100444400000044bb00000000000000000000000000000000000044bb0000000000
% 0000000000000000000000000044bb000000666600991177114488000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000077000000440000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000001188000000111100000000000011880000221100000088000022000011
% 8800008800000011000000000000000011880000111100008800000011000000000000000044bb00
% 0000883300aa2200444400000044bb00000000000000000000000000000000000044bb0000000000
% 0000000000000000000000000044bb000000883300aa2200007744000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000033884444990000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000006699220055444455000022880066992288006600003399114433881166
% 9922009922885533662244885500000066992255444455008866445533664e99228800000044bb00
% 0000554444aa5500444400000044bb00000000000000000000000000000000000044bb0000000000
% 0000000000000000000000000044bb000000554444aa5500553311000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000088ddbbbbdd0000008cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000044881100bb0000bb000000880044881144997700000088003355884444
% 8811008800bbbb445522008800000000448811bb0000bb00aa8800bb4455228800bb00000047bb00
% 0000000000000011778811000044bb00000000000000000000000000000000000044bb0000000000
% 0000000000000000000000000044bb000000000000000055aa8866000044bd000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000044000000440000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000001188440055444455000022990011884488446600002299007744888811
% 8844229922cc6066442244990000000011884455444455449966775566443f9922cc1100156bcc44
% 44444444445d8f44444444444477bb00000000000000000000000000000000000044bb0000000000
% 0000000000000000000000000044dd88888888888898b788888888888899c4250800000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 880000000000880000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000082e3a3ebbbb
% bbbbbbbbbbcdedbbbbbbbbbbbbbb8800000000000000000000000000000000000044bb0000000000
% 000000000000000000000000001188888888888888a8df888888888888885a2e3a21040000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% bbffffffffffff0000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000004213e2908000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000001036361900000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 998888888888bb0000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000193632100000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb00000000000000000000001d3a32100000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 660000000000660000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000c2e3a1d00000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb00000000000000000000000004213e2908
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000002113213e25040000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb000000000000000000000000000008293e
% 21231500000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000c3e38321000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000010
% 333e3a04000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000001144444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444442211444444444444444444444444444444444433323e3e190000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 253e3e3c444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444111144444444444444444444444444444444442200000000000000
% 0000000000000000000000
% 000000000000000000008cb13300000000000000000000000000000000000000000000ccddbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbffdaddbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbee901010040000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000029efccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbccf0f0ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbff55000000000000
% 0000000000000000000000
% 0000000000000000000085b13300000000000000000000000000000000000000000044dd00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000a8ef000000000000000000000000000000000055bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044cc000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000dada000000000000000000000000000000000077bb000000000000
% 0000000000000000000000
% 000000000000000000007eb13300000000000000000000000000000000000000000044bb00000000
% 0008315b77735418000000000000000000083865776d4f18000000000000000000104165776d4710
% 0000000000a8df00000000000e4b7ca8a77c2b000000000044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb0000000000104165776d4f18000000000000000000104168776841100000000000000000
% 00184f6d776541100000000000cdcd00000000000e5b8ba8996b2b000000000044bb000000000000
% 0000000000000000000000
% 000000000000000000007eb13300000000000000000000000000000000000000000044bb00000000
% 3579a5b9d3ccac8e72080000000000003b7da5b9d9c6ac866808000000000000577da5bfd9c6a581
% 5b00000000a8df000000003dc19b71485386af9c0e00000044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb00000000457da5bfd9c6ac816200000000000000577ba5bfd9bfa57b5700000000000000
% 6281acc6d9bfa57d4500000000cdcd0000000050c291713e5d86c37e0e00000044bb000000000000
% 0000000000000000000000
% 000000000000000000007eb13300004466446644226600003355226600000022660044bb00000054
% 89c6d9d9d9d9d9d9ac7b2300000000658eccd9d9d9d9d9d9a57910000000006f98d3d9d9d9d9d9d3
% a577080000a8df0000006bb95d3e3e3e3e3e3e86c22e000044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb0000006a8eccd9d9d9d9d9d3a57708000000086f98d3d9d9d9d9d9d3986f080000000877
% a5d3d9d9d9d9d9cc8e6a000000cdcd0000008daf533e3e3e3e3e3e91c10e000044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300448800002244008800000000008800000000880044bb00002a89
% d9d9d9d9d9d9d9d9d9bf7a000000458ed9d9d9d9d9d9d9d9d9b9770000005ba5d9d9d9d9d9d9d9d9
% d9a5680000a8df00002ec4483e3e3e3e3e3e3e3e67c10e0044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb00004f98d9d9d9d9d9d9d9d9d9ac7200000062a5d9d9d9d9d9d9d9d9d9a56200000072ac
% d9d9d9d9d9d9d9d9d9984f0000cdcd00006ba63e3e3e3e3e3e3e3e3e869c000044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300884400000000009922882288008800554433880044bb000079c6
% d9d9d9d9d9d9d9d9d9d9a55b00087dccd9d9d9d9d9d9d9d9d9d99847001881d3d9d9d9d9d9d9d9d9
% d9d9892a00a8df0000c1673e3e3e3e3e3e3e3e3e3e917c0044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb00107dd3d9d9d9d9d9d9d9d9d9d98e3b002a86d3d9d9d9d9d9d9d9d9d9d3862a003b8ed9
% d9d9d9d9d9d9d9d9d9d37f1000cdcd001dc2483e3e3e3e3e3e3e3e3e3eb04d0044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300666600001133008800bb0088008800990000880044bb00319fd9
% d9d9d9d9d9d9d9d9d9d9d3790047a5d9d9d9d9d9d9d9d9d9d9d9cc770062b2d9d9d9d9d9d9d9d9d9
% d9d9b96d00a8df003a9b3e3e3e3e3e3e3e3e3e3e3e3ec20044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb0054acd9d9d9d9d9d9d9d9d9d9d9c673006ab9d9d9d9d9d9d9d9d9d9d9d9b96a0073c6d9
% d9d9d9d9d9d9d9d9d9d9ac5400cdcd006b863e3e3e3e3e3e3e3e3e3e3e53a70044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300008855224400229922cc3199229900555544990044bb005bb2d9
% d9d9d9d9d9d9d9d9d9d9d9941872c6d9d9d9d9d9d9d9d9d9d9d9d9800877d3d9d9d9d9d9d9d9d9d9
% d9d9d97b00a8df007c7c3e3e3e3e3e3e3e3e3e3e3e3ea42b44bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb0077ccd9d9d9d9d9d9d9d9d9d9d9d97d0077d3d9d9d9d9d9d9d9d9d9d9d9d977007dd9d9
% d9d9d9d9d9d9d9d9d9d9cc7700cdcd00a85d3e3e3e3e3e3e3e3e3e3e3e3ec20e44bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300000000220000000000000000002266000000000044bb0073d3d9
% d9d9d9d9d9d9d9d9d9d9d9a52077d9d9d9d9d9d9d9d9d9d9d9d9d9a5207dd9d9d9d9d9d9d9d9d9d9
% d9d9d98200a8df007c673e3e3e3e3e3e3e3e3e3e3e3e913a44bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb0077d9d9d9d9d9d9d9d9d9d9d9d9d9820082d9d9d9d9d9d9d9d9d9d9d9d9d9820082d9d9
% d9d9d9d9d9d9d9d9d9d9d97700cdcd00a83e3e3e3e3e3e3e3e3e3e3e3e3eac0e44bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300000000000000000011110000000088001100000044bb006dc6d9
% d9d9d9d9d9d9d9d9d9d9d9a52077d3d9d9d9d9d9d9d9d9d9d9d9d98f1879d9d9d9d9d9d9d9d9d9d9
% d9d9d98000a8df007c673e3e3e3e3e3e3e3e3e3e3e3e913a44bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb0077d9d9d9d9d9d9d9d9d9d9d9d9d982007dd9d9d9d9d9d9d9d9d9d9d9d9d97d0082d9d9
% d9d9d9d9d9d9d9d9d9d9d97700cdcd00a83e3e3e3e3e3e3e3e3e3e3e3e3eac0e44bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300000033992288005544445555443388553366220044bb004facd9
% d9d9d9d9d9d9d9d9d9d9d9830862b9d9d9d9d9d9d9d9d9d9d9d9d97b0072c6d9d9d9d9d9d9d9d9d9
% d9d9d37700a8df006b913e3e3e3e3e3e3e3e3e3e3e3eb91d44bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb006abfd9d9d9d9d9d9d9d9d9d9d9d9790077ccd9d9d9d9d9d9d9d9d9d9d9cc770079d9d9
% d9d9d9d9d9d9d9d9d9d9bf6a00cdcd008d713e3e3e3e3e3e3e3e3e3e3e3ecd0044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000008800bb00bb0000bb99000088bb4455220044bb001881d9
% d9d9d9d9d9d9d9d9d9d9c677003194d9d9d9d9d9d9d9d9d9d9d9b96d0047a5d9d9d9d9d9d9d9d9d9
% d9d9ac5b00a8df001dc33e3e3e3e3e3e3e3e3e3e3e5db40044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb00389fd9d9d9d9d9d9d9d9d9d9d9b265004fa5d9d9d9d9d9d9d9d9d9d9d9a54f0065b2d9
% d9d9d9d9d9d9d9d9d9d99f3800cdcd0059a63e3e3e3e3e3e3e3e3e3e3e7c8d0044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000229922cc115544445555554499556644220044bb000068a5
% d9d9d9d9d9d9d9d9d9d9892a000077b9d9d9d9d9d9d9d9d9d9d3811800007abfd9d9d9d9d9d9d9d9
% d9cc7d0800a8df000080913e3e3e3e3e3e3e3e3e3eb93d0044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb000077b9d9d9d9d9d9d9d9d9d9d37f1000087dc6d9d9d9d9d9d9d9d9d9c67d0800107fcc
% d9d9d9d9d9d9d9d9d9b9770000cdcd0000a8713e3e3e3e3e3e3e3e3e48c31d0044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300000000000000000000000000000000000000000044bb00000879
% bfd9d9d9d9d9d9d9d99f62000000107fc6d9d9d9d9d9d9d9d3944f000000237fccd9d9d9d9d9d9d9
% d3893b0000a8df00000ec1713e3e3e3e3e3e3e3e9b80000044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb0000237cc6d9d9d9d9d9d9d9d3894f0000002a89ccd9d9d9d9d9d9d9cc892a0000004f89
% d3d9d9d9d9d9d9d9c67c230000cdcd000020c35d3e3e3e3e3e3e3e48af6b000044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300000000000000000000000000000000000000000044bb00000018
% 77a5d3d9d9d9d9c6896208000000002a7ba5d9d9d9d9d9bf81540000000000317dacd9d9d9d9d9b9
% 7f4f000000a8df0000002bb49b483e3e3e3e5db97e0e000044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb0000002a7da5d9d9d9d9d9b9814f00000000003b7facd9d9d9d9d9ac7f3b00000000004f
% 81b9d9d9d9d9d9a57d2a000000cdcd0000003dc2913e3e3e3e3e71ce6b00000044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300000000000000000000000000000000000000000044bb00000000
% 005b798aa5a57f742a00000000000000085b7994a59f7d722300000000000000086a7b94a59f7a6d
% 1000000000a8df00000000007ac1ae9191b8b43d0000000044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb00000000085b7b94a59f7d721000000000000000086a7b98a5987b6a0800000000000000
% 10727d9fa5947b620800000000cdcd000000000e7cc2a4919bc29b2b0000000044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300000000000000000000000000000000000000000044bb00000000
% 00000010202008000000000000000000000000182020080000000000000000000000001820200000
% 0000000000a8df000000000000001d3a3a0e00000000000044bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044bb000000000000001820200000000000000000000000000020202000000000000000000000
% 00000020201800000000000000cdcd000000000000002b3a3a0000000000000044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300000000000000000000000000000000000000000033ff55444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 4444444444d6ff664444444444444444444444444444444499bb0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044dd554444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444455e6f35544444444444444444444444444444444bbaa000000000000
% 0000000000000000000000
% 000000000000000000005cb1330000000000000000000000000000000000000000000088bbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc9dfbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbaa80bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb440000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000099bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc9dfbb
% bbbbbbbbbbbbbbbbbbbbbbbbbb9999bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaa22000000000000
% 0000000000000000000000
% 000000000000000000002eb733000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000044bb0000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb00000000000000000000000000000000000000000000000000009bf70000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb0000000000000000000000000000000000000000000000000000d3ff4400000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb0000000000000000000000000000000000000000000000000088eea0cc22000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000000000011505d4444444444444444444444444444444444
% 444444444476cd44444444444444444444444444444444444444444444447adddd5511bbff905044
% 44444444444444444444444444444444444444444476cd4444444444444444444444444444444444
% 4444444444445d33000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 0000000000000000000000000000000000000066eee4d6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbcdedbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbd6881100000044bbc9bb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcdedbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbd6ff992200000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000055ee6600000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000022bbbb00000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000000dd880000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000000000000011ee66000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000050e4110000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000090c9000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000001100000000000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000050c9000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000050c9000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088bbcc00000000000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000220022005c1700000000000000000000000044bb000000000000000000
% 000000000000000000000000000000002276cd440000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000002276cd440000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000099889900ac9500000000000000000000000044bb000000000000000000
% 0000000000000000000000000000000022ffffbb0000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000000000000044ffff990000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000033002200ac9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000099ff440000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000000000000000bbff220000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000055bb5500a49500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000005dcd220000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000001176b4220000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000626300000000000000000000000000000000000000000000000000000000
% 0000000000000000000011440044008c950000000000000000000000005dd6000000000000000000
% 00000000000000000000000000000044ddf1dfff9922000000000000000000000000000000000000
% 00000000005dd6000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000005dd60000000000000000000000000000000000
% 0000000000000066dde4e7ff881100000000000000000000000000000000000000000000005dd600
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000668888bb00008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000011440044008c9500000000000000000000000069fa220000000000000000
% 000000000000000000000000000088ee8850bb33bbee220000000000000000000000000000000000
% 0000000000a8ed000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000076f61100000000000000000000000000000000
% 00000000000099ee7744bb44bbee1100000000000000000000000000000000000000000000b4e800
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000066bbbbbbdd00008cb500000000000000000000000000000000000000000000000000000000
% 000000000000000000000055bb55008c9500000000000000000000000044ed990000000000000000
% 0000000000000000000000000011ee550044bb0000bb990000000000000000000000000000000000
% 0000000011f3d6000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044f68800000000000000000000000000000000
% 000000000022ff440044bb0000dd8800000000000000000000000000000000000000000022ffcd00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000770000004400008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000005500888899008c9500000000000000000000000044c9ff9911000000000000
% 00000000000000000000bb992299bb000044bb000033ff2266dd0000000000000000000000000000
% 00000044cccdbb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044d2ff88110000000000000000000000000000
% 0000aa8811aa99000044bb000044ee1188ee000000000000000000000000000000000066ddb4bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000338844449900008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000003300220022008c9500000000000000000000000044bb44bbf1d6bbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbd6ffffdbffffffffffffffffe5e6ffffbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbc2ff8850bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb44ccf1c9bbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbd6ffeee1ffffffffffffffffffeeffffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbd6ee8844bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000088ddbbbbdd00008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000000221144008c9500000000000000000000000044bb0000415d4444444444
% 44444444444444444444c4ee88b088000044bb000011ee76bbff4444444444444444444444444444
% 44444e220044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000505044444444444444444444444444
% 4444c4dd66bb77000044bb000022ff66ddff4444444444444444444444444444444450110044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000004400008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000001188998888008c9500000000000000000000000044bb000000000000000000
% 0000000000000000000055110044ff220044bb000088dd0000440000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044000066ee110044bb000099bb0000660000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000001166440000008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000011664421008c9500000000000000000000000044bb000000000000000000
% 0000000000000000000000000000bbbb2244bb0055ee440000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000000000ccaa1144bb0066ff330000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000011eeffff8800008cb500000000000000000000000000000000000000000000000000000000
% 000000000000000000000088bbcc008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000011bbffa6c0bbee88000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000033bbeea6c0ddee55000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000771100008800008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000000220022008c9500000000000000000000000044bb000000000000000000
% 0000000000000000000000000000000044c1ed881100000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000000000000055cded881100000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000770000006600008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000000998899008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000033cc8899aa00008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000000330022008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000044aa881100008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000000222222008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 003322224444448800008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000000665544008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00dd8888ccbbbbdd00008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000011334466008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 002211440000004400008cb500000000000000000000000000000000000000000000000000000000
% 000000000000000000000055bb55008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000667700008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000000221144008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001144994444448800008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000001188998888008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001177eeffffffaa00008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000011664411008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000550000000000008cb500000000000000000000000000000000000000000000000000000000
% 0000000000000000000000221144008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000668888bb00008cb526000000000000000000000000000000000000000000000000000000
% 0000000000000000001188998888008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000066bbbbbbdd00008cb533000000000000000000000000000000000000000000000000000000
% 0000000000000000000011664411008c9500000000000000000000000044bb000000000000000000
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000770000004400008cb533000000000000000000000000000000000000000000000000000000
% 0000000000000000000000114488008ca800000000000000000000000044bb000000000000000000
% 0000000000000000000000000000000066ffffee0000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000000000000077ffffdd0000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000338844449900008cb533000000000000000000000000000000000000000000000000000000
% 0000000000000000000000888888008cba00000000000000000000000044bb000000000000000000
% 0000000000000000000000000000000000ddff880000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000000000000011eeff660000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000088ddbbbbdd00008cb533000000000000000000000000000000000000000000000000000000
% 0000000000000000000022335544008cb7000000000000000000000044a0c8880000000000000000
% 000000000000000000000000000000000066ee110000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000088dd0000000000000000000000000000000000000000000000000044a0c866
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000004400008cb533000000000000000000000000000000000000000000000000000000
% 0000000000000000000000443377008cb5000000000000000000000022ffffbb0000000000000000
% 0000000000000000000000000000006699bbd2bb8822000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000000000006699c0cdbb77220000000000000000000000000000000000000000000044ffff88
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb233000000000000000000000000000000000000000000000000000000
% 0000000000000000000000002200008cb500000000000000000000000099ff440000000000000000
% 0000000000000000000000000022bbee88554477aaff880000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000000033ccdd88554477ccee7700000000000000000000000000000000000000000000bbee11
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000001199aa226600008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000000000008800008cb500000000000000000000000022c9000000000000000000
% 00000000000000000000000044eeaa11000000000044ddcc00000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000066ff8811000000000055eeaa000000000000000000000000000000000000000000509800
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000774444007700008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000007700116600008cb50000000000000000000066aaffffdd8822000000000000
% 000000000000000000000011dd88000000000000773331dd88000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000022ee7700000000000077333fee7700000000000000000000000000000000000077aaffffcc
% 88110000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000660044007700008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000007788998899008cb500000000000000000088f7a0331155bbf7330000000000
% 000000000000000000000088cc0000000000000088aa1144ff330000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000bbbb0000000000000088aa1155ee2200000000000000000000000000000000a0f180221166
% d6e01100000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000033cc9999bb00008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000000000330022008cb5000000000000000000eeb4ee330033eecc990000000000
% 0000000000000000000000ee55000044440000665555000099880000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000011ff220000444400006655550000cc7700000000000000000000000022000033ffd0cc110066
% ffe07700000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000055aa881100008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000006688888899008cb5000000000000000055dd0099ee5cee6644ee0066dd0000
% 0000000000000000000044ee00009911228844000000000066cc0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000066dd00009911228844000000000088aa000000000000000000000000bbbb4488aa11cccc70ff
% 6677cc00000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000667700008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000002200000022008cb5000000000000000099990000adfe840000ffe6ffffbbbb
% bbbbbbbbbbbbbbbbbbbbcddf0066660000bb44115533000011ff0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000088880066660000bb441144771100a8ffffffffffffffffffffffffffdfffffd2660011e0ff70
% 0022ff22000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001144994444448800008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000000000222222008cb5000000000000000077aa0033eec2ee3311ff5dbbff4444
% 4444444444444444444476d60088440000dd11004444000033ee0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000088aa0088440000dd11771144880066bb000000000000000000000000bb9922aa880066ffe0cc
% 1155ee00000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001177eeffffffaa00008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000000000665544008cb5000000000000000022ff40ee660099ee84cc0000440000
% 0000000000000000000022ff11446633338833004444000088aa0000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000044ee004466333388330000774400998800000000000000000000000011000066dd66ff6611cc
% cca09900000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000550000000000008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000000011334466008cb5000000000000000000ddd066000000a7e7770000000000
% 0000000000000000000000cc880000000000000044440011dd770000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000ee660000000000000055331111ee5500000000000000000000000000000011ffe466000011
% d6f45500000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000055bb55008cb500000000000000000033ddeeb0a0ccff99000000000000
% 000000000000000000000055ff3300000000001177881188dd110000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000077ee11000000000055aa8866aabb000000000000000000000000000000000066eeeea0a0dd
% ff880000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000667700008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000008844559955008cb5000000000000000000000033a8ed772200000000000000
% 00000000000000000000000099cc220000000000000077ff44000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000bbbb110000000000000088ee220000000000000000000000000000000000000055b4e866
% 11000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001144994444448800008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000004400990022228cb500000000000000000000000044bb000000000000000000
% 00000000000000000000000011aaee771100000022bbee6600000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000011bbee660000000044ccee4400000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001177eeffffffaa00008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000005511990044007eb500000000000000000000000044bb000000000000000000
% 000000000000000000000000000055ddffbbbbddffbb220000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000077eeffbbbbddff99110000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000550000004400008cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000338811227711229000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000336644551100000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000335555550000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000088bbbbdd00008cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000668899888800008cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000660066005500008cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000066ee55aacc00008cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000003300886600008cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000001100000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 000000002200220000000088bbcc00000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 000000116600440000000022002200854100000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 000000115500660000000099889900ac9500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000114400000000008cb133000000000000000000000000000000000000000000000000000000
% 0000000055995500000000330022009c9500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000077aa00000000008cb133000000000000000000000000000000000000000000000000000000
% 000055008888990000000055bb55008c9500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000335544449900008cb133000000000000000000000000000000000000000000000000000000
% 0000330022002200000011440044008c9500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000088ffffffff00008cb133000000000000000000000000000000000000000000000000000000
% 0000000022114400000011440044008c9500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000004400008cb133000000000000000000000000000000000000000000000000000000
% 000011889988880000000055bb55008c9500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000001199aa226600008cb133000000000000000000000000000000000000000000000000000000
% 0000001166441100000000000000008c95000000000000000000000044a0c8880000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000044a0c866
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000774444007700008cb133000000000000000000000000000000000000000000000000000000
% 0000001166776600005500888899008c95000000000000000000000022ffffbb0000000000000000
% 00000000000000000000000000002299ddffffffbb66000000000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000000003399eeffffffbb550000000000000000000000000000000000000000000044ffff88
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000660044007700008cb133000000000000000000000000000000000000000000000000000000
% 0000002200993300003300220022008c9500000000000000000000000099ff440000000000000000
% 0000000000000000000000000055eebb5511002277eebb2200000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 000000000077ffaa5500003388eeaa11000000000000000000000000000000000000000000bbee11
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000033cc9999bb00008cb133000000000000000000000000000000000000000000000000000000
% 0000000088448800000000221144008c950000000000000000000000006cdb330000000000000000
% 00000000000000000000000077ee7700000000008841aaee11000000000000000000000000000000
% 000000000044bb000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044bb0000000000000000000000000000000000
% 0000000088ee550000000000884ebbdd1100000000000000000000000000000000000000118fc022
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000055aa881100008cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000001188998888008c950000000000000000001199eeeebbffdd66000000000000
% 000000000000000000000022ee55000000000000880000bbaa000000000000000000000000000000
% 00000000005dd6000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000005dd60000000000000000000000000000000000
% 00000044ff33000000000000880000cc88000000000000000000000000000000000011aaffddccff
% cc550000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000661100000000008cb133000000000000000000000000000000000000000000000000000000
% 0000550088889900000011664421008c95000000000000000000aaf599000011adff550000000000
% 0000000000000000000000aaaa00000000000000aa228822ee660000000000000000000000000000
% 000000000088aa000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000033ee1100000000000000000000000000000000
% 000000dd8800000000000000aa228833ff3300000000000000000000000000000000d3f45c000022
% d0ff3300000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000888888110000008cb133000000000000000000000000000000000000000000000000000000
% 000033002200220000000088bbcc008c95000000000000000011ff7aff660066eea0aa0000110000
% 0000000000000000000011ff33000044440000227711880088990000110000000000000000000000
% 0000000022ff44000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000bb9900000000000000000000000000000011
% 000022ff110000444400002277118800aa8800000000000000000000000011000055ee99ee330099
% eebb8800000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000022998811008cb133000000000000000000000000000000000000000000000000000000
% 0000000055000000000000220022008c95000000000000000066cc0066ffa3ee3333ff2188ee0000
% 0000000000000000000044dd00009911228844663344772255dd2299bb0000000000000000000000
% 00000088ee9900000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044eebb330000000000000000000000000044
% dd6677bb00009911228844663344772277bb000000000000000000000000bb992288990099eeaeee
% 3366dd00000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000006644bbee8877558cb133000000000000000000000000000000000000000000000000000000
% 0000000088889900000000998899008c95000000000000000099880000a3ff840000fff3ffffffff
% ffffffffffffffffffffffed0066660000bb44000000000000ffffffdfffffffffffffffffffffff
% ffffdfdd660000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000002299ffffffffffffffffffffffffffffff
% ffffe7900066660000bb440000000000a8ffffffffffffffffffffffffffdfffffd2660000d6fe5c
% 0022ff22000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000077dd66110022888cb133000000000000000000000000000000000000000000000000000000
% 0000000044005000000000330022008c95000000000000000066cc0066ee84ff6622ff3199ff0000
% 0000000000000000000044dd0088440000dd11115533000055dd2299bb0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000044
% ee8880bb0088440000dd11114477110077bb000000000000000000000000bbbb4488990099eeadee
% 3366dd00000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000660000004455888cb133000000000000000000000000000000000000000000000000000000
% 00000000bbbbcc00000000222222008c95000000000000000011ff7aee330066ffadaa0000220000
% 0000000000000000000011ff33446633338833004444000088990000110000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000011
% 110033ff114466333388337711448800aa8800000000000000000000000022000055ee99ee330099
% eebb8800000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000088bbbbdd00008cb133000000000000000000000000000000000000000000000000000000
% 0000000022003300000000665544008cb0000000000000000000bbe077000011a3f5550000000000
% 0000000000000000000000aaaa0000000000000044440022ee660000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000dd880000000000000000774433ff3300000000000000000000000000000000ccd75c000022
% c8ff3300000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000668899888800008cb133000000000000000000000000000000000000000000000000000000
% 0000000088888800000011334466008cb70000000000000000001199eef1dfffdd66000000000000
% 000000000000000000000022ee55000000000000444400bbbb000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000044ff33000000000000553311cc88000000000000000000000000000000000011aaffe4e7ff
% cc550000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000660066005500008cb133000000000000000000000000000000000000000000000000000000
% 000000003300000000000055bb55008cb500000000000000000000000082db330000000000000000
% 00000000000000000000000077ee7700000000117790b0ee11000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000088ee550000000055aa98d6dd1100000000000000000000000000000000000000118fdb22
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000066ee55aacc00008cb133000000000000000000000000000000000000000000000000000000
% 0000000022222200000000221144008cb500000000000000000000000044bb000000000000000000
% 0000000000000000000000000066eebb5511002277eebb2200000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000088ffaa4400003388eeaa1100000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000003300886600008cb133000000000000000000000000000000000000000000000000000000
% 0000000066554400001188998888008cb500000000000000000000000044bb000000000000000000
% 00000000000000000000000000002299ddffffffcc66000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000003399eeffffffbb55000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 004444444444449900008cb133000000000000000000000000000000000000000000000000000000
% 0000001133446600000011664411008cb500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000001100110000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000001111000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00bbbbbbbbbbbbdd00008cb133000000000000000000000000000000000000000000000000000000
% 0000000055bb5500000000221144008cb500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 004400000000004400008cb133000000000000000000000000000000000000000000000000000000
% 0000220000002200001188998888008cb500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000033110000008cb133000000000000000000000000000000000000000000000000000000
% 000088888888aa00000011664411008cb500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000000bb4400000082b133000000000000000000000000000000000000000000000000000000
% 0000220044002200000000114488008cb500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000000bb440000007eb133000000000000000000000000000000000000000000000000000000
% 0000220044002200000000888888008cb500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000088330000007eb133000000000000000000000000000000000000000000000000000000
% 000088888888aa000000223355440088b500000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 003322224444448800007eb133000000000000000000000000000000000000000000000000000000
% 000022000000220000000044337700229000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00dd8888ccbbbbdd00007eb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 002211440000004400007eb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000667700005cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001144994444448800005cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001177eeffffffaa00005cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000550000000000005cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 004444444444449900005cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000044c4d6aa0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000066c4d688
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00bbbbbbbbbbbbdd00005cb133000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ddff880000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000022ffff66
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 004400000000004400005cb133000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000066ee110000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000099dd00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000044888888bb00005cb133000000000000000000000000000000000000000000002244444444
% 4444444444444444444444444444444444444444444444444444444444448f444444444444444444
% 44444444443322444444444444444444444444444444444444000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000224444444444444444444444444444444444444444444444444444444444444444445d8244
% 44444444444444444444444444222244444444444444444444444444444444443300000000000000
% 0000000000000000000000
% 00000088bbbbbbdd00005cb13300000000000000000000000000000000000000000011eeccbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbeff5ccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdd990000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000022ffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbffffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbee88000000000000
% 0000000000000000000000
% 000000440000005500005cb13300000000000000000000000000000000000000000044dd00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000a8ef000000000000000000000000000000000044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000cdcd000000000000000000000000000000000066bb000000000000
% 0000000000000000000000
% 000000224444448800005cb13300000000000000000000000000000000000000000044bb00000000
% 00104f7777776a3800000000000000000010547777776a3100000000000000000018627777776220
% 0000000000a8df00000000001d6b9ba8a88d59000000000044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb0000000000105b777777622a000000000000000000186277777762180000000000000000
% 002a627777775b100000000000cdcd00000000001d7aa8a8a87e3d000000000044bb000000000000
% 0000000000000000000000
% 00000088ddbbbb8800005cb13300000000000000000000000000000000000000000044bb00000000
% 4f7dacc6d9d9b99f77230000000000005b81acccd9d3b99477100000000000086286b2ccd9d3b28e
% 7208000000a8df0000000050c2915d3e3e679bb52e00000044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb000000006281b2ccd9d3b98e77080000000000086289b2ccd9ccb2896208000000000008
% 778eb9d3d9ccb2816200000000cdcd000000007ec37c533e4871af9c0e00000044bb000000000000
% 0000000000000000000000
% 000000440000000000005cb13300000000000000000000000000000000000000000044bb00000065
% 8eccd9d9d9d9d9d9b97c2a000000006f98d3d9d9d9d9d9d9b27d230000000877a5d3d9d9d9d9d9d9
% a579080000a8df0000008baf533e3e3e3e3e3e67c34b000044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb00000071a5d3d9d9d9d9d9d9ac79100000000879a5d9d9d9d9d9d9d9a579080000001079
% acd9d9d9d9d9d9d3a571000000cdcd000000b391483e3e3e3e3e3e86c21d000044bb000000000000
% 0000000000000000000000
% 004400000000004400005cb13300000000000000000000000000000000000000000044bb00003b8e
% d9d9d9d9d9d9d9d9d9c67d0800005798d9d9d9d9d9d9d9d9d9bf7700000062a5d9d9d9d9d9d9d9d9
% d9ac770000a8df00004db93e3e3e3e3e3e3e3e3e53c20e0044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb000062a5d9d9d9d9d9d9d9d9d9b97700000072acd9d9d9d9d9d9d9d9d9ac7200000077b9
% d9d9d9d9d9d9d9d9d9a5620000cdcd00007e913e3e3e3e3e3e3e3e3e71b4000044bb000000000000
% 0000000000000000000000
% 00998888888888bb00005cb13300000000000000000000000000000000000000000044bb00087bcc
% d9d9d9d9d9d9d9d9d9d9a56500107fd3d9d9d9d9d9d9d9d9d9d9a55b002a89d9d9d9d9d9d9d9d9d9
% d9d98e4100a8df000ec15d3e3e3e3e3e3e3e3e3e3e868d0044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb001081d3d9d9d9d9d9d9d9d9d9d9984100318ed9d9d9d9d9d9d9d9d9d9d98e31004198d9
% d9d9d9d9d9d9d9d9d9d3811000cdcd001dc3483e3e3e3e3e3e3e3e3e3ea6780044bb000000000000
% 0000000000000000000000
% 00aabbbbbbbbbbdd00005cb13300000000000000000000000000000000000000000044bb0031a5d9
% d9d9d9d9d9d9d9d9d9d9d97b004facd9d9d9d9d9d9d9d9d9d9d9d3770062b9d9d9d9d9d9d9d9d9d9
% d9d9c67200a8df004b9b3e3e3e3e3e3e3e3e3e3e3e3ecd0044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb005bb2d9d9d9d9d9d9d9d9d9d9d9cc77006abfd9d9d9d9d9d9d9d9d9d9d9bf6a0077ccd9
% d9d9d9d9d9d9d9d9d9d9b25b00cdcd007a7c3e3e3e3e3e3e3e3e3e3e3e53b40044bb000000000000
% 0000000000000000000000
% 004466440000008800005cb13300000000000000000000000000000000000000000044bb005fb9d9
% d9d9d9d9d9d9d9d9d9d9d9982077c6d9d9d9d9d9d9d9d9d9d9d9d9801077d3d9d9d9d9d9d9d9d9d9
% d9d9d97b00a8df007c713e3e3e3e3e3e3e3e3e3e3e3e9b3a44bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb0077ccd9d9d9d9d9d9d9d9d9d9d9d97d0079d9d9d9d9d9d9d9d9d9d9d9d9d979007dd9d9
% d9d9d9d9d9d9d9d9d9d9cc7700cdcd00a8533e3e3e3e3e3e3e3e3e3e3e3eb70e44bb000000000000
% 0000000000000000000000
% 000000228855000000005cb13300000000000000000000000000000000000000000044bb0077d3d9
% d9d9d9d9d9d9d9d9d9d9d9a52077d9d9d9d9d9d9d9d9d9d9d9d9d9a52080d9d9d9d9d9d9d9d9d9d9
% d9d9d98200a8df007c673e3e3e3e3e3e3e3e3e3e3e3e913a44bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb0077d9d9d9d9d9d9d9d9d9d9d9d9d9820082d9d9d9d9d9d9d9d9d9d9d9d9d9820082d9d9
% d9d9d9d9d9d9d9d9d9d9d97700cdcd00a83e3e3e3e3e3e3e3e3e3e3e3e3eac0044bb000000000000
% 0000000000000000000000
% 000000000011aa8800005cb13300000000000000000000000000000000000000000044bb0068c6d9
% d9d9d9d9d9d9d9d9d9d9d99f2077ccd9d9d9d9d9d9d9d9d9d9d9d98a1877d9d9d9d9d9d9d9d9d9d9
% d9d9d97d00a8df007c673e3e3e3e3e3e3e3e3e3e3e3e913a44bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb0077d3d9d9d9d9d9d9d9d9d9d9d9d980007ad9d9d9d9d9d9d9d9d9d9d9d9d97b0080d9d9
% d9d9d9d9d9d9d9d9d9d9d37700cdcd00a8483e3e3e3e3e3e3e3e3e3e3e3eac0e44bb000000000000
% 0000000000000000000000
% 0000001177dddd6600005cb13300000000000000000000000000000000000000000044bb0041a5d9
% d9d9d9d9d9d9d9d9d9d9d97f0862b2d9d9d9d9d9d9d9d9d9d9d9d979006dbfd9d9d9d9d9d9d9d9d9
% d9d9cc7700a8df005b913e3e3e3e3e3e3e3e3e3e3e3eb80e44bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb006ab9d9d9d9d9d9d9d9d9d9d9d9d3790072c6d9d9d9d9d9d9d9d9d9d9d9c6720079d3d9
% d9d9d9d9d9d9d9d9d9d9b96a00cdcd007e713e3e3e3e3e3e3e3e3e3e3e48c10044bb000000000000
% 0000000000000000000000
% 002288eebb55000000005cb13300000000000000000000000000000000000000000044bb001081d3
% d9d9d9d9d9d9d9d9d9d9bf7200188ed9d9d9d9d9d9d9d9d9d9d9ac6a004198d9d9d9d9d9d9d9d9d9
% d9d9a54f00a8df001dc2483e3e3e3e3e3e3e3e3e3e67a70044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb00318ed9d9d9d9d9d9d9d9d9d9d9a55b0047a5d9d9d9d9d9d9d9d9d9d9d9a547005ba5d9
% d9d9d9d9d9d9d9d9d9d98e3100cdcd003daf3e3e3e3e3e3e3e3e3e3e3e86890044bb000000000000
% 0000000000000000000000
% 00bb99440000008800005cb13300000000000000000000000000000000000000000044bb000062a5
% d9d9d9d9d9d9d9d9d9d38123000072acd9d9d9d9d9d9d9d9d9cc7f08000077b9d9d9d9d9d9d9d9d9
% d9c67b0800a8df00007c913e3e3e3e3e3e3e3e3e48c42e0044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb000077acd9d9d9d9d9d9d9d9d9c67b0800007abfd9d9d9d9d9d9d9d9d9bf7a0000087bc6
% d9d9d9d9d9d9d9d9d9ac770000cdcd00009c863e3e3e3e3e3e3e3e3e53c20e0044bb000000000000
% 0000000000000000000000
% 00998888888888bb00005cb13300000000000000000000000000000000000000000044bb00000077
% acd9d9d9d9d9d9d9d394540000000879b9d9d9d9d9d9d9d9cc893b000000107fbfd9d9d9d9d9d9d9
% c6832a0000a8df000000b4863e3e3e3e3e3e3e48a47a000044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb0000087db9d9d9d9d9d9d9d9c68931000000237cbfd9d9d9d9d9d9d9bf7c230000002a89
% c6d9d9d9d9d9d9d9b97d080000cdcd00000ec1713e3e3e3e3e3e3e53b94b000044bb000000000000
% 0000000000000000000000
% 004400000000004400005cb13300000000000000000000000000000000000000000044bb00000008
% 728ec6d9d9d9d9b2814f0000000000107798ccd9d9d9d9ac7d3b00000000002377a5ccd9d9d9d3a5
% 7d2a000000a8df0000000e99af5d3e3e3e3e7cc36b00000044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb000000187798ccd9d9d9d3ac7b3100000000002a7ba5d3d9d9d9d3a57b2a000000000031
% 7bacd3d9d9d9cc9f7718000000cdcd0000001da8a6533e3e3e4886c24b00000044bb000000000000
% 0000000000000000000000
% 000000000000000000005cb13300000000000000000000000000000000000000000044bb00000000
% 003b737d82827a6a10000000000000000041777d828279650800000000000000005477808280795b
% 0800000000a8df00000000004ba7c2acaccd8d1d0000000044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb00000000004e77808282795f0800000000000000085b77808280775b0800000000000000
% 085f79828280774e0000000000cdcd00000000005bb4c2acacc1890e0000000044bb000000000000
% 0000000000000000000000
% 000000000000000000002eb73300000000000000000000000000000000000000000044bb00000000
% 00000000080800000000000000000000000000080008000000000000000000000000000800080000
% 0000000000a8e700000000000000000e0e0000000000000044bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044bb000000000000000800080000000000000000000000000008000800000000000000000000
% 00000008000800000000000000cdcd000000000000000e000e0000000000000055bb000000000000
% 0000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000022ff88444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 4444444455d3ff8844444444444444444444444444444444aaaa0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044ee664444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444466f1f36644444444444444444444444444444455cc99000000000000
% 0000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000055bbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcdedbbbbbbbbbbbbbbbbbb
% bbbbbbbbbb8860bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaa330000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000088bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcdedbb
% bbbbbbbbbbbbbbbbbbbbbbbbbb8888bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb9911000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000044bb000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000044bb00
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000005de0000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000007ad600
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000011ee660000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000dd8800
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000088dd2200000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000088dd0000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000aaff995d4444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 444444445d4411000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000334e44444444444444444444444444444444
% 444444444444444444444444444444444444444444444444444444444444444444447adddd440000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000044aad6bbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbd6dddd660000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000002299ffb7bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbd68811000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000077ee5500000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ddbb220000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000088dd00000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000066ee11000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000011eb5d000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000d67a00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000c950000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000c95000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000000b0000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb44000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000804100000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000aad6c4550000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000aad6c455000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008caf0d000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000088ffee110000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000088ffee11000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000011ee88000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000011ee8800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000008888888888888888888888888888888888888888
% 8888888888888888bf90888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888bf9088888888888888888888888888888888888888
% 88886600000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff88888888888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 8899bb00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0044bb00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0044bb00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000668888bb00008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0044bb00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000066bbbbbbdd00008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff00000000228888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88a8df88888888884400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000770000004400008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044dd88888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888bb8800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000338844449900008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000088ddbbbbdd00008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000004400008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000001166440000008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000011eeffff8800008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000771100008800008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000770000006600008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 004499bb8800229988220000000000000000000000000000000000000000000044bb440000000000
% 558888aa1144bb440000111100000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000033cc8899aa00008cb500000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 000088ff0000666600000000000000000000000000000000000000000000000000bb440000000000
% ee1100bb2200bb440000774400000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000044aa881100008cb526000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 000088ff0088440000000033667711004488337750883377660000003366771100bb440000000066
% ff8888882200bb440055ee9944003366771144883377111166555500000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 003322224444448800008cb533000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 000088ff88ff6600000055cc0044990000ff55aa44dd8800bb660055cc00449900bb440000000000
% ff4400bb4400bb440000ff440055cc00449900ff55aa448833006600000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00dd8888ccbbbbdd00008cb533000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 000088ff1188ee330000aa994444aa0000ff440000bb4400bb8800aa994444aa00bb440000000000
% ff4400bb4400bb440000ff4400aa994444aa00ff44000055eedd8800000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 002211440000004400008cb533000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 000088ff0000aacc110088990000220000ff440000bb4400bb8800889900002200bb440000000000
% ff4400bb4400bb440000ff4466889900002200ff440000440044cc11000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb533000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff0000000044bb00000000000000000000000000
% 0044bbff880077ffaa4411bb7777660044ff990044dd9944ddbb0011bb77776644dd990000000044
% ff8844dd9944dd990000aa887711bb77776644ff9900008877448800000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000667700008cb533000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff4444444476bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001144994444448800008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bbbbbbbbbbcdbb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001177eeffffffaa00008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000550000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000228800226600008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044bb00000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000888800006600008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000044cc44444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444998800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000881100008800008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000033bbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbdfc9bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdfc9bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbb6600000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000022ddbbbbbb00008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb44000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000004488771100008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb44000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000001199aa226600008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb44000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000774444007700008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb44000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000660044007700008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb44000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000033cc9999bb00008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000088c8a0330000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000077c8a033000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000055aa881100008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000099ffee110000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000088ffee11000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 004444444444449900008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000022ff88000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000011ee8800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00bbbbbbbbbbbbdd00008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000008811000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000771100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 004400000000004400008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000011dd
% ffffffffffffffffffffffffffffffffffff55000000000000000000000000000000000000000000
% 00000000000000000011ccffffffffffffffffffffffffffffffffffff6600000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044dd
% 000000000000000000000000000000000077bb000000000000000000000000000000000000000000
% 00000000000000000044dd110000000000000000000000000000000077bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000001199aa226600008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044bb
% 000000000000205656563e10000000000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000000000000205656563e10000000000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000774444007700008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044bb
% 00000000287688979e9e907a560000000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb00000000217588979e9e907a5b0000000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000660044007700008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044bb
% 000000507da2acacacacaca9907208000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb0000004a7d9eacacacacaca9907510000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000033cc9999bb00008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044bb
% 00003180a9acacacacacacacac9471000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb00002880a9acacacacacacacac9771000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000055aa901100008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044bb
% 000876a2acacacacacacacacacac86440044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000876a2acacacacacacacacacac89440044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000556677cc8800008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044bb
% 003e90acacacacacacacacacacaca5720044bb000000000000000000000000000000000000000000
% 00000000000000000044bb002f90acacacacacacacacacacaca9720044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000005500cc444400008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000044bb
% 00649eacacacacacacacacacacacac790844bb000000000000000000000000000000000000000000
% 00000000000000000044bb005f9bacacacacacacacacacacacac7c1044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000006633ee007700008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000022220022881100004488a888888888888888888888888888a8df
% 8881acacacacacacacacacacacacac9084a8df888888888888888888888888888888888888888888
% 888888888888888888a8df8881a9acacacacacacacacacacacac9084a8df88888888888888660000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000118855448800008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088778800441199ff99a888888888888888888888888888a8df
% 8881a9acacacacacacacacacacacac8c84a8df888888888888888888888888888888888888888888
% 888888888888888888a8df8881a5acacacacacacacacacacacac8d84a8df88888888888888660000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000445588003388dd2200000000000000000000000000000044bb
% 005b9bacacacacacacacacacacacac790044bb000000000000000000000000000000000000000000
% 00000000000000000044bb005697acacacacacacacacacacacac790844bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000005555448821ee550000000000000000000000000000000044bb
% 002f86acacacacacacacacacacac9e6d0044bb000000000000000000000000000000000000000000
% 00000000000000000044bb002086acacacacacacacacacacaca26d0044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000110076f1000000000000000000000000000000000044bb
% 0000719bacacacacacacacacaca97d280044bb000000000000000000000000000000000000000000
% 00000000000000000044bb0000719bacacacacacacacacacac80280044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000088bbcc0044bb000000000000000000000000000000000044bb
% 0000197aa2acacacacacacacac8d5b000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb0000107aa2acacacacacacacac8d5b000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000001199aa226600008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000002200220044bb000000000000000000000000000000000044bb
% 000000287890acacacacaca2805b00000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000000287990acacacacaca2806008000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000774444007700008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000009988990044bb000000000000000000000000000000000044bb
% 000000000864778d90907e74280000000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000000000860788d90907e74280000000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000660044007700008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000003300220044bb000000000000000000000000000000000044bb
% 000000000000002020201000000000000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000000000000002020201000000000000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000033cc9999bb00008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000055008888990044bb000000000000000000000000000000000044bb
% 000000000000000000000000000000000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000000000000000000000000000000000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000055aa881100008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000033002200220044bb000000000000000000000000000000000044bb
% 000000000000205656563e10000000000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000000000000205656563e10000000000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000114400000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000066888888990044bb000000000000000000000000000000000044bb
% 00000000287688979e9e907a560000000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb00000000217286979e9e907a560000000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000077aa00000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000022000000220044bb000000000000000000000000000000000044bb
% 0000004a7d9eacacacacaca9907208000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb0000004a7d9eacacacacaca9907510000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000335544449900008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000055bb550044bb000000000000000000000000000000000044bb
% 00003180a9acacacacacacacac946b000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb00002880a9acacacacacacacac9771000044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000088ffffffff00008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000114400440044bb000000000000000000000000000000000044bb
% 000876a2acacacacacacacacacac86440044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000876a2acacacacacacacacacac89440044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000004400008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000114400440044bb000000000000000000000000000000000044bb
% 003690acacacacacacacacacacaca5720044bb000000000000000000000000000000000000000000
% 00000000000000000044bb002f90acacacacacacacacacacaca9720044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000055bb550044bb000000000000000000000000000000000044bb
% 00649bacacacacacacacacacacacac790844bb000000000000000000000000000000000000000000
% 00000000000000000044bb005f9bacacacacacacacacacacacac7c1044bb00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000044888888bb00008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000044bb0000000000000000006688888888888888a8df
% 8881acacacacacacacacacacacacac9084a8df888888888888888888888888888888888888888888
% 888888888888888888a8df8881a9acacacacacacacacacacacac9084a8df88888888888888888888
% 88888888b86600000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000088bbbbbbdd00008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000055bb550044bb0000000000000000006688888888888888a8df
% 8881a9acacacacacacacacacacacac8c84a8df888888888888888888888888888888888888888888
% 888888888888888888a8df8881a5acacacacacacacacacacacac8d84a8df88888888888888888888
% 88888888b8eedd330000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000005500008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000114400440044bb000000000000000000000000000000000044bb
% 005b9bacacacacacacacacacacacac790044bb000000000000000000000000000000000000000000
% 00000000000000000044bb005697acacacacacacacacacacacac790844bb00000000000000000000
% 00000000001199dd0000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000224444448800008cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000114400440044bb000000000000000000000000000000000044bb
% 002f86acacacacacacacacacacac9e6d0044bb000000000000000000000000000000000000000000
% 00000000000000000044bb002086acacacacacacacacacacaca26d0044bb00000000000000000000
% 00000000000011f07a00000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000088ddbbbb88000088b133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000055bb550044bb000000000000000000000000000000000044bb
% 0000719bacacacacacacacacaca97d280044bb000000000000000000000000000000000000000000
% 00000000000000000044bb0000719bacacacacacacacacacac80280044bb00000000000000000000
% 00000000000000c8c800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000000000007eb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000008888880044bb000000000000000000000000000000000044bb
% 0000197aa2acacacacacacacac8d5b000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb0000107aa2acacacacacacacac8d5b000044bb00000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000440000667700007eb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000004400330044bb000000000000000000000000000000000044bb
% 0000002f7994acacacacaca2805b00000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000000287990acacacacaca2806008000044bb00000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001144994444448800007eb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000009988998876bb000000000000000000000000000000000044bb
% 000000000864778d90907e74280000000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000000000864778d90908074310000000044bb00000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 001177eeffffffaa00007eb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000004400001169bb000000000000000000000000000000000044bb
% 000000000000002020201000000000000044bb000000000000000000000000000000000000000000
% 00000000000000000044bb000000000000002020201000000000000044bb00000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000550000004400007eb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000044bb000000000000000000000000000000000044ee
% 220000000000000000000000000000000099aa000000000000000000000000000000000000000000
% 00000000000000000044ee330000000000000000000000000000000099bb00000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000000088bbbbdd000067b133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000044bb00000000000000000000000000000000000099
% ffffffffffffffffffffffffffffffffffdd33000000000000000000000000000000000000000000
% 0000000000000000000088ffffffffffffffffffffffffffffffffffdd3300000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000668899888800005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000044bb00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000660066005500005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000005500770044bb00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000066ee55aacc00005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000005566770044bb00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000003300886600005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000aa55660044bb00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000004400440044bb00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0000001199aa226600005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000001144880044bb00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000774444007700005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000008888880044bb00000000000000000000000000000000000000
% 0000000000000000000000000000000055eeffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffaa00000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000660044007700005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000223355440044bb00000000000000000000000000000000000000
% 00000000000000000000000000000000bb8800000000000000000000000000000000000000000000
% 0000000000000000000022ee44000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000033cc9999bb00005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000004433770044bb00000000000000000000000000000000000000
% 00000000000000000000000000000000bb440000000000002050563e100000000000000000000000
% 2056563610000000000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 0066886655aa881100005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000110044bb00000000000000000000000000000000000000
% 00000000000000000000000000000000bb4400000000447786979e907e7119000000000000005678
% 8d979e907c670800000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00aa11000000000000005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000008888990044bb00000000000000000000000000000000000000
% 00000000000000000000000000000000bb440000086786a5acacacacac9b7a4400000000087189a9
% acacacacac947a2f000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000888800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00880077ee99002200005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000003300220050c900000000000000000000000000000000000000
% 00000000000000000000000000000000bb4400006090acacacacacacacaca97c210000007197acac
% acacacacacaca57a190000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000989800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 008800006600008800005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000099bbcc0069ef00000000000000000000000000000000000000
% 00000000000000000000000000000000bb44002880acacacacacacacacacac9e7508004489acacac
% acacacacacacac9b710000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000a8a800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00bbffffffffffff00005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000002200220011ee66000000000000000000000000000000000000
% 00000000000000000000000000000000bb44006da2acacacacacacacacacacac8d360076a9acacac
% acacacacacacacac831800bb44000000000000000000000000000000000000000000000000000000
% 00000000000011ee5500000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00998888888888bb00005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000998899000077dd440000000000000000000000000000000000
% 00000000000000000000000000554400bb440079acacacacacacacacacacacac9b641080acacacac
% acacacacacacacac945600bb44006666000000000000000000000000000000000000000000000000
% 000000000022aabb0000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 004400000000004400005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000033002200000088ffdfa8888888888888888888888888888888
% 88888888888888888888888888b7ffbbcd442088acacacacacacacacacacacacac712090acacacac
% acacacacacacacaca56a00bb8fddffb7888888888888888888888888888888888888888888888888
% 88888888c8eebb330000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000022c8a8888888888888888888888888888888
% 88888888888888888888888888b7ffbbcd442088acacacacacacacacacacacacac712090acacacac
% acacacacacacacaca56a00bb8fddffb7888888888888888888888888888888888888888888888888
% 88888888c84400000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000554400bb440079acacacacacacacacacacacac9b641080acacacac
% acacacacacacacac945600bb44006666000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000bb44006da2acacacacacacacacacacac8d360076a9acacac
% acacacacacacacac831800bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000bb44002880acacacacacacacacacac9e7508004489acacac
% acacacacacacac9b710000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000bb4400006090acacacacacacacaca97c210000007197acac
% acacacacacaca57a190000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000bb440000086786a5acacacacac9b7a4400000000087189a9
% acacacacac947a2f000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000bb44000000003e7786979e907e7119000000000000005678
% 8d979e907c670800000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 000000000000000000005cb133000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000bb440000000000002050563e100000000000000000000000
% 2056563610000000000000bb44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000006619000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000bb8800000000000000000000000000000000000000000000
% 0000000000000000000022ee44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000055eeffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffaa00000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005544886655330000004466000000000000000000
% 00227700000000000000000000000000000000000000000000000000000000000000000000110000
% 00000000226600000033550000000000007766000000000000000000000000000000000000110033
% 55000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000003300884400331111000088000000110000000000
% 00003300221100000000220000000000000000002200000000000000001100000000000011880000
% 11000000008800000000000000000000008800111100000000000000000000000022000011880000
% 00001111000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000088440055444455008866445533664e992288
% 00111188006600000044338811338822bb55558822339922993388005533664e9922880066992255
% 33666b44338800000022883399228800339960444455448855339922993388004433881166992222
% 88554444553399228800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000884400bb0000bb00aa8800bb4455228800bb
% 00000044997700000033558844008800bb55557700008800bb008800bb4455228800bb00448811bb
% 4455a70000880000000088008800bb000088bb0000bb008800008800bb0088003355884444881100
% 88bb0000bb008800bb00000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000002299771155444455449966775566443f9922cc
% 11000088446600000077448888008844cc50888822229922cc2299115566443f9922cc1111884455
% 66446b5544990000002299229922cc11229955444455449900229922cc2299117744888811884422
% 9955444455229922cc11000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000008800008800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000001144441100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000
%%EndImage
%%EndPreview
%%Page: 1 1 
%%BeginDocument: C:\Users\canca\AppData\Local\Temp\latexdraw\latexdrawTmp154416215780687265\tmpPSFile.eps 
/InitDictCount countdictstack def gsave save mark newpath 
userdict /setpagedevice /pop load put 
%!PS-Adobe-2.0
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%Title: tmpPSFile
%%CreationDate: Fri Dec  7 05:55:59 2018
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 295 323
%%DocumentFonts: CMR7 CMMI10 CMMI7 CMBX10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -T
%+ 10.396349620123344cm,11.386697230140369cm tmpPSFile -o
%+ C:\Users\canca\AppData\Local\Temp\latexdraw\latexdrawTmp154416215780687265\tmpPSFile.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.12.07:1255
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 45 /hyphen put
dup 70 /F put
dup 73 /I put
dup 75 /K put
dup 77 /M put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0AB25B56BCA5D899F1575E61ADF75676
F48EE26C054AD9A75FD88A3E17498AC26FD4DC8000A125D6DD423540B8A98779
B28CE97C9CAFAC45693FF43249E4B559E7F19FB349F94B60AAAAF05B5FBF244E
982B4B51D997DA5811CD43E1917DA885DD96133A5CE1A290DBBFD88AF285A879
D3136C41C839FD2276760A7B4F21F4026AADCDAB3F113FCCCA9588C7FB72643E
AB8F6D8AEAD1DC3DCA6E436B3DF24E7DC6AD37137B49327871EA80F3B8AEE932
D20D9A5B4779DFFAD7B3E5D447023D6433575F8F5AF589D7E094DA3786555D0C
046A427ADF128E00AC7B458D5A131A130D6F49A7ABF47833791F172D69FE6393
EAE0E90E7FF7BC2333D4E0215D5201E4B209591782F8A664335F67B9DDE36DBA
793EC77E5EB405862D14EAB6A99218B3F66F11EA2F345629C402BD8FD9CA0AC8
FB5A2E119DAA9F80083C9BC54F4586C44320993CB5D9CBDC8F8522001F82A16C
E307F175B794F4426E5D273581A6D2844444D82093FB03482B270D693391DEA7
CB26D4A418E48A2989167B7DCE251F0D53D5C9B29D359A568FEDB965DF31CBF3
900392FE739A2B43BFA2363CA74FA72668FC761D1A17B9C0B56D6172499CDDCC
90EA538A5526FD5AFF81D04BFEA703E37185A14FE17F1D42B924A7799A82D7EB
BA2E4FCA1CB15E82286A1A7FAC8FB6B47C80B4555FE3406F3EE8E6192E8598D1
3746B031AB6DB7538DDFCE97D53816923D1A9357316971D85CB36EEBD34EB348
1CB198B553DFFF535A7E5C6F41AA7D14736CF32569B567A4F965AA2AFB566969
6B08202B034852C673ECC2D54412312CCCD8E06297A576398B0ACAA04C99BF39
542F529CD5EC1517FAEA5DD8FE805F33EF3FC77FB86711B33EA2D57539AF4AA1
4612F04C54D59077B880811B932DC90880BCB4BD955057E2C94BD8F6B16BBF08
1CA012094938952793C03F6195A204957D175AD27EB505D8299B2AAA7A05FCEF
74AADC754D33163A4DE7C21219B9438692C501C75C62BA84B70334512ED24A79
EF60984DBB147C7E2FC1F46751480BFA1B9D92C2F5E299E0C0F7F1D0C83ECE88
8457C900E82C413238956C3EDD05BE74CC57E6AD93A6A8549ADEEA0BC8297F98
1236E31F14BC8FA2BC3BAAD162DEA2677D434511BF6D56A1F0B72D203A7C5FF3
017508DF9821E07B127612C7EF5F32A8A3C6A4E7C3BC8F04EF6C58A6705F30BF
915A60F7C027C153000E975E7513D0156D2738013865ABAEBE8A6A32DF7D9C1D
968238CADDE3DE2818FFC776DD40D3CDFD8BE52F1D15141F83FFE3025AE75FD5
A8955F09EB5CFEAF9C0DB75F5239E01200FBB38725EE7FF097F769C017F16598
B835A0B93B1B2DF00014433A1D8E062D5207D5E38FC52F40EEBD788ACEE9F19D
CDFC2F1E54AD17895F8182865520414E334D267FAAE6B6C25173FE0CD61A8195
4576B52637E33D16251FD20BEE1A157257C03F31969EBD9763E442932D3C479D
503D8DF2DA9A0EA58B35C74EDB42B62AA66B4978717C037E9F36DF72D0F27846
4C317DE4FEAF0D86C019CB6D89A9254B5CB19B83C8063AEFB564F4B77C153EF2
4C817D33A96AD5D4759E5B655C405F561E2CAC2E32267C08D88992A3D6F73A5B
46F22C29698D0739003C1D8A041DB1EDB1CF471B02B6C8B47BF4CEAD88713B28
9E12D7842C2A3A9861C89A2283B3FD8695CC7E4D624573A635B65951DC366F76
FC514C1D19CE476848430A7A0484D174958D6492C0C8A210E1ED96936EC7D0A2
3242E9CD57FA87C8A16D5906A2AC1C14F625BC58A707DE151974ED3A1E201392
228125B95375FEED0688F7A829518952E2D7D758F475780C5C1031B1549089FC
76A00B4D0739019E61F6A96721D6E8D87B447AE6C7E5FCB35D0E4A8C0DFE90BD
2AB4370BF03E8058B5A0E098913DBB1D259FE3EA7584E7C1B3D19AC0B4F8781E
3DFEA832F00F18F5E9B669ADC7CE66F042F7A5179B5A0CAB47170797203C1423
23DF8F57DE85C6C8AE8026AFD09D468F70D787A5A9E6FA0D8EB2C071AE30A0AD
FBF7B5252C0274C501C6892EBEEFA7DCD289338A25527C5A205C3A527CCEE7CD
999DF0B92664EAD10C6F0DDF513A93549B8C6DA02DBDD64576A8EFA417E43E8F
1D0C7FF875BBA9E474804EB77C3EB784D93CEFED8768DABF8F43B81F67E3D26F
E7D8AB8C9C358E55CCC4D7B8D105D6CB67FC2F45D3649774F361DFEFA485386C
301769F9E0E1A6FF19F6882A2CC910A787A5AA51B79CAFDCD501C1A5CC0B61F4
B036FB1F36569CD507130E8F1A3D885BCE9B34384EAF94F8D651FC0F250B0CEE
D0050C709C5F3E68600B22568949E624D8FEF8E96D81BFD5970BE2E62A5B1D90
2545CE593AD065201A7943854D12DF1C5262D130801F34E16C4EC08C826E7B58
C9F7D6B59FA7D264E7027B3CFB43CFEB5CD7B28F6C683E6CCC89ACF2A1AE89C6
18CC7ACA7A743230CF3B0EB6528FD6D2338146CFA103E4BBC9F61347F594AE5F
EFE26DEE78E3C1722C689A61A8F655CC238605E4D80CF558708478E491B9DBCB
905ED833E2A2ECD0976DC6C92487D971FC45BA004C08E07384845942D4077981
6B1B5578F86FEB25C1ACB394183F31D783711AE45C4ECAC0936B813E3BE2A930
3C579CA1031E1026549AD20076E703450958CBC3FD7EF62008D6CD41F5E9AF04
388424ED0F364B17475063C529A1A718E0D96AA802BDB2F6CD710C0894656FF4
6B08B5E1AC5CBE68FD0FAE83D64B8612E1A953D4F3BA2A12300B226CC6418D74
2FDE62986988B5EBE3EBA0C7901A362981D05A5AA40640038DAAAA1897A0F984
F440B9BB0EFDD09656C615245BC9F16EEBFE36A6E658BD6D9B72486CD5D51EDE
B3149DE6DA0B2F5191C2C721CA94A3F62DF5D6AED3AD27503852C2AE0E9177DB
0B86627B9DE43A7CAC25E8A1D1D4469FE1972C57A0BAA11AEE113C47E330A280
77B6F871B6C390BE93C0C5D42C0912CBF14A1982227AB214371C060C93832787
9D0886B9A070830EA0C3BC5E71E25AC400A9EA3B1EB7916EF1BF5AB35BE20CB1
294DE2DBDEC668AA1F31F5B4A2345F01A0130086BF9E75BE43E74D15ACF02A2C
9C6111BA142D41B6EEA18A1378286CEF4CF5245911C25C240B0ABE9F8A399571
8D295E0B26F1F0BDB775895C47464DCF77A5B563E5B71C207E228F06021B1732
70EAD66A33671C7892EE9CEB2C5A17C722D611A851753F5CE7B6BB2A72424877
0311B7C8D0559F73794F68F5BB8EEF470CBF35D092F8E92AA21415F90E14D291
25BA1EA4AADCC290D9309F2D53EF9159E9DB5243BDB5B3A4E13A99500005ACC2
0A4D19A46554EFBB273350E330D3C7DE7783606496FA79141922DD8686E114E9
DB888A5111E64C06AD8867D2AC25411C5D18D793BB5A38DD9AAF2D2C3FBC5BF0
2DCACEED2D5BB1812AE71CAD1C2639624781C6918F53407FAA602E2A4CC7F2C5
93DA2EFDFDE21ED36968488718BE003D4E05E8307FE9DF775464EDAFE60B5835
FDBFCFFEC25E0AC5219E3AE77455FC8F0BAEC0BBE3AA655C7F54752030E04484
9DEDF233BB063E845C7DD20559749736C774FDEC78CDE2E61D796F19FA5926DF
6F22564DDA767E5CA3FB68984D5FE0921FD6DC09506C48B15D891191B86CB7BA
90208F5913579AF4E6E6347152652C33A6B1D5758DA166826FBCF4CEEA5CA7B9
A2740E40F4FAADF3547A191E66548AD064A644069FE8C14DAABF91A9DE7A4A43
59A8ADE2BA3D4BAC0F195DCA0E74B4EB99304F22B4BC7CE5BD2251B0B90E8E3C
BAFC79E537E0BBD669EB0D45115ECBA1024CB97F7542AECB5D6D62FC2ED62788
864F7D95D3AF40CED140AC0D6BFC04842F830ECAC3F611C378C14E294BB5C1E5
2C4BCB877F1776FE1BD118065C2A14C78C4353DB70C0976F1565FF35FA7BCDE1
24C6992E463B2D6065F65E757E1CFE2B48C090870B03F8943ABE858CEA69F61B
D54E3E255DC176A43E75436277D984277A328B1A36962767CD2E39ADCA979514
7FB011971CB98ED23D40FF899F54124C742F8F4D22AAE73E5B54BA77C22645DE
FBD3E891E6929087CF77FBAD659BDE6FC4F9A991B262B3A2A869196F7924417B
242FF7F7C78627253CB15C844F03366AD813C871D5EED1825B345D89D89192CD
C1317FF80AE764C4D2E6A4F47D5310FFE038CFB98680D83AC81B33B0E777FCA0
ED61D9970B5DCCD53F403D092296CE04287916C748C26174C9DF9BD1FEC7A237
F828CE4D593D0EFCCFF0C0B692CA6405DB09A87809078135F38341F050C4F291
CDC30DC77944C7786C3EB25AB8CA862953A84A6A4452E28330E6CF28F4DC2862
D80C7783A1C28C765EE67B3C99112F93547EF9B732894A4FD203371873019BB4
E094BC31861A4230D23E8ECFD2B14E369310D0665BD778CFD57E1C70A64F1532
C7FA3D00CFBE2A72475C090344E6E5627D613B1A38C127E11CFB29DB693E6ADC
87FFF3CE4F1ED6E51EBD0ADDE85B2933D068F45DBC83B18B846891DBC8528354
3C99951EE3D773EE1B0DBEBA08E16F6031C2EEFFC33F7C2DB690A3116C48FCB1
828E8FCF32E1B475C614FC56F3189E80A97DA37ABACB6560F2CEFEB983FB2A84
6EACAA6D0941D73FC89E00DCF7993237382F1C536922EE6A3E160BD6EFDA879C
B08413803B351515A35A9C27F4AB8F04498048C117F0D0567386D29AB6389456
B2857B01721F235B916BF7370BE5D0990B1B1F50D5F92342EED8F4ECA5FE0C0E
C7BC6A7A1450EBDF3378EC1211176D1F18D1420B3AAA93F91355A69AB70994BD
01F909C84B76D9BC63A1CB1C34B70A65BC232AF1154CAE36D26CEE0B8B1ACF51
83E42340C1780E1C0507420053C17AFF7CEF0AC6117458602928EC4F9D31026C
52725B5A39BCA20B1F5557C3DC7FA58D6F9CB89533E42524596658D3F6AD9738
7342335CDAA96947E18C342092950C93A22E519FEAD7CEB8C987411339050018
D61E5A4F89A8B0F653F8987E50BC7651A98F08E1CE94E97897DDA06471F1FDA4
0715DAC2B2D9090A4B43664EF00BDF3336EEFAE59D07C618C47102838CAE8822
3CBDF46C0618FE65BD2447EE8C49D5B763769D5B9140C6DBEC3FEFA57F90C8BC
DAF9CCC867DC870DACCA896FB2108B06F0F548EF0820CDDE15075C474250E9FE
30FE074979EE85EDD696D73A16492569D333481BCDA8150D4937F78089F39E3F
8CEB93014287B91553790303BC2B34664CA99D91F890634E292D1E3D47753F17
656596341C7E05A356F57ABE794A7D916F085C3B78A7D279E174627108C371E1
EF5FC807DFCAAE0781E552D5540F49AB33E91D4F862A174A1830348B202BD8DD
61D07BB1793848541FC596EB36F01EEFEB9BE100029FD4E8CF637CBC3C1BC324
BCF91DC052E1863929564188F490D485A4DFF8B239874FFE20C382311701FAF5
90649F7E55835239A26D800E2F5B0E67FA244E723191048C2E81BD908BEA45F6
B82B200AA68415403AC4E518DC4D483303C17560B49377ADCCAEE78B860A2D80
98427B52A84FCEE228655C344CB7C73FFC24F3B723F09C609173BD3D0625F2B5
8E0607E6B326DEE1D977786F696705D9C4FA2579DF1949473A312606B80408D1
2BDDCC47E5B6E49A4EF9FBBFDA80CED7CAAD294554032009CD85A9D4D71E030F
98A7BBF23A9CB30DE1F9DBF5AB7A6EA721D9ED5247B78BE09FDF78757995E91A
7ACFB625881D68F4E8AB2F0E04D7626641E61CF1B4D7E4ADF586B90E8E6203EA
6D534104DC78249CF7FBD02ECF027FC3F2E401A65C8EC35D4032A5E35ADA1265
CD00D0473B78BF6C3FF8A50614948EF5BE0D2C25E17D06C9BBF42B43E910CEC8
26BC5BDB334A069238F1CFC728FD714A5E74202639E19EBF3CF297B75117E75E
77A7ACB4B3BB406FF7181F940E34A40AFE69B70251CDF0505B1DC30FBD1918D7
74E40E24C30CF1B0AD38F3352376DE51A1F062A31814BD6B5E1E6CAE2C065F59
F2700122A2B02C48A07D2DA93D52682DFE980ECBE5E6D986FA288BB4E84A2506
51F877CCC8C2339747B7A9BFF35EE5AB0B789B4A55F56FD2BFD13E7899833A22
D0B038F0274F90605EF6283222A4FEFEDFB36E6974A7BC6A84521825B384D2B1
F310E2E17BE06EF9B5E8E89F8A886B512A9427004D7CE17C1B34F245B037F596
926D24BC6D5D842D211EC5B40B573364BE79FDC03AB9A294A5281F81793C9BA5
412118C418DC1A3DB3071E290E39ACFB8BB0135E034C67CC5A3B40521864EECF
250D896E2B21AB36749CE2C1A4F43D8A4066006BE14827B729E2D6238A724F60
8CFA3679247CC9FA05DEE22E4A3B554438D6582889B405E334974DEDC661918B
E254CE19C252B4435C6E995638251532FC6FF33C8E7A81734D6AFFA7284150CE
67094B56460053D74D2AFA1DAF6E9D7B5215EAF8A0E566A91E47AA5A82A2EDC9
96A3975AF84DEC3BB8BB18FCD4B239A64DB55D753E2D1ED4EAF8DCF0D7F89031
DED00A9FD20256262EC642569FE83883BB5792EB2A706A6EBC7F03ECC2DCB002
C5FE46CD6ED443EC4F30A1261A0096114AB1BF799C704F6E9EC485E54C81D586
9EFEEFFD016B312C102ED66CF9A0DB5880C0C7AF29DA2B33E63ECDE90EF258CC
AFAC5E89E8D98E816F60FB4C7BC1B6393120B8F325F5A2DA8273EE714E2218DB
FD41B1EEDFD308C0A27C3FB35F153AD8B8DB4927942809E263F5CB07BAE2A360
064DF5B0F32462F25E6FDCBAE49CE4B92C129212767EA116E5F72325F50DB960
99AC9F19067D4B22712417599D182A90D75A5C74C893B21D77CF02670F42F50A
D19EC083242019C2C67F6C2037E4FEA012F949891DF6A8445939C1AA44DFA641
61DB889F50CB3F3D1CED45940F572099F69974D53B2F55B55D977F183663526A
DF0EB2C522D58397E5E42163B71C2E87394308278B4B0900241A76E1A6F9A4D3
AF842E3869BC3699B8EFF9884F5B9A2F3F13278C90B58799E86D3BC4EFE70E1B
4911657FA95FE2F538093ECC38EFF26A8EBF5763671BAEAB360AA2A4E2223BDB
8F8DDCC108853E76ABABE2E80F319AFBF27417A230B2C7A7E78949D292EB320C
0281289F044903E75DCAE189A6EDD220CF79D9A29CC858785F2D7FA010F797A9
A6D15802264C7015531EC3E47E203B0BB5076CDE56CF8092E9A275E95D733D96
FBA2CA4295EF7B4DB74DDE3C05C256D22882599945F000D3ABB6656D67B19597
E87E150015265C7EAE2025A783DD50D712C06A7EF0C17EB017FFF9CA7F3D4EA7
0208DDC46DD0C9E14376AC78630793D4AF25BAECBBA0283508DEB72B97FF75DF
56D7C4ECCEAEC2D260C03B6D908CDCB74C1B058155215959FFCE262526B22664
00B272F8875A65257BB4C7BE379156D41CE7E35A6830FF1D95B40E95C9DF242D
B3F9EF24528A31787A524CE60E9C0A60E033D12C617FE60DAB2D94E7B2A4310D
32DBBA7FDD13ADB4B8F7EB6341436C69047A865E96BD020A0B9B0AFB9348DA03
21831AC760690A02E081057BFF03EBA4F5F22165737782FB036108CE409B277E
6C8D48EB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI7
%!PS-AdobeFont-1.0: CMMI7 003.002
%%Title: CMMI7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI7 known{/CMMI7 findfont dup/UniqueID known{dup
/UniqueID get 5087382 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI7 def
/FontBBox {-1 -250 1171 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI7.) readonly def
/FullName (CMMI7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 104 /h put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBBAAB71645535A2B
6F0F22458E1429F4A67307E01F0BCF6F337E0E2AD89658D880B04C26306F8179
C8121B958459B923AC3B05B594D8AB95F75870019130442FD29578D44F5690BC
7281357A5041C8A809A59D0DEE108E2A07D406656BC74A9F3317CB887E712318
46B2ECAA341F8692ACC2D14ABABDFBCAC6F35858355F1D3228B0223EC73AC56F
3C987464DB829F243E304F4C59CDE3EF6EB53A4EF9BA91510CB89A3407261F58
A2AE66880BA98FC1EF546112892494C85A2C39F9DCCAC5766725894A7AA148E9
42360AE64BF3A4F1F9F0A0D0C1AAFDC4D50C52233AA595B7D0CE557D4A010D86
6E6B76A7E9523E8A6633DA9348BC3F59302F72F492A30782AE7EF220516893D3
DE836CDE311DED9262AF01C506040541EE84AAC539B404B23033EF56D4BCE6BE
B05F79CD633FE75C6728114D2749E39FD7454050F67763AB636377BA8E1867C3
996C7D7D4A4A02BC49D1AD7FF174C1F49F1F205BC9D5AE42BCB02CF8554E8F5A
D1876C9285B6CCD7B8C165F75843B0AA11D8462B57077AFE75BAD086E9D9F91E
30ACFF91776132F3CACAD1CA5E08B17B36A0E45ACBAC52393B9AF9089BD821D9
CD5A9CD9BECA59F7445D63DECC1B4502D299DB85B6E2EE7C69A1DAB91E22A3A5
89B524FA20AF6005E7A586B90A2C6E5A93C9EFA4ABEF5F7E4C7B81363FE8D2B3
0AD637FA863DE787581ADD7CBE463F7866C40F4E280260ED0E9C8453E5C7E668
FFF058B9742DD3F131C264F8FA102CD0DA05F3114D13D34D422799181453FE23
2FC6EFB01BE420C930B879D671F3DFB036197874725220644A5A52DFB467BB75
8089E4F40CE9401777B9FE1D0AEE02E782A6EB2A185A454AE9394094CDFE7CFA
C03C23A78EAF242E4F811E4C83B59EF4DC5ACE4AD37B41616B46C263358710B2
6137314545CA6CE89119B42A3518EC85C68DC07D26839C68B1FF55C4A9CD518B
A1FB32F9C475BB6110839FCCB94156E7B3648F27245A00D2966FC4DDE3996BFA
F463A663CB6935B596B1582ED0ABBC648AAA8A86068BF0038001C753C8BAFA0D
2058041DFA720B528E2D4B16196DB1CF30C779D3F4800FE662D5B60B208341F2
A66EFCB8448C2FCD12DF0DD899911A8BD96C9B670054D328790E5D388518B146
8CE92E368EB1DB3CAAFCA4834CC9D9D9DCC80FB1F34F39DACDE643052C977A7E
A95C5FA8DFED9B4DCE769E4E46256D6DA8FB18FD7FA4E4CED5D486803538F3B4
6D3F5B3C03184F5C26C66DBB4C724918EBB6A89C4602E4EDDA81EEE2BD18B683
FDB459F2CE0A9CED23DC208EAA8BEDB304B00E093DEE926A7B32FDB2EC70DD85
94B9137856DDDABB402B2C76DBA87149051ADC6007018EBDD571BE1D092EBD95
76D4E063AD7D5F62E6C26EDB88D38678F2806A1F4900B0ABC4ED034A818119A4
E618F1A902315BC98F26775E59555A3DCEA1D0F8B20A9084920ECBE3F7F245AC
1182A40B518B194669D95DE968542BFF80FDC89669BC256C44CB66A2AB8CD7A9
E42C69956CCB6BDE8C09AD22EF3196939B3B84EB23A6E071A36D702909E019FF
058F27562441EB5CAE87A4407F67C4390810BE89BBE867D636468E73677B84C8
5A1228DD7DC8EADA221B1BAD5F43E832F20ADE7ADBFF170AB306F5B711816FD1
39B7882556E30F002977FB88D8B28826A75DE0D20354A2D41F2DA8578376F7DD
F27B0F59D4DDDF5790E11E3957491DC74EEB7625CA49FAD90FA47AD8E0BDE824
FF326A84846A47A21B70FA549BEE307F9C6970009F963B49A504F0115777826F
1D81203F655C242FFF15BA97E3BDDFBF435B10E74CE8543C98966223818839B3
6BF3BC63F882B0AD0FDACA8C56A570277952E1D83F18BEDF084D2AC004E2B09D
70DE1740D7D220E92B54D2FD0DDEAF1E08C41FD321A8D474982DD105B23166A7
AA9E0129DC88065B1E0F9382BEB4B4E1DAAE3EA5489BDCA921AD5A8175F2841F
9400478DFA99C5E5553F383882664D73FBDFA29BF32E52C28DCE80DAF4839434
022FA515679DBC13FE98968D2894DF5DD69C49BD23D00F5D858B69D1F220F968
F0700E13873579B3CFB658972098DC61F1DD580105BC27795DB4AF11A871CCD6
2E1B9AF7F0DAAD4CE315379A7B42CECB983DAC5A2B9426B4E5E0A7F7978504C1
DD7E30063AE3CBDFB24EA2BCCDC478AB82084FD30A4793F4707D9F8F9647B413
F8A5C5AC6D5EA0E35628CE1096A434FB8286F4617CB4D0AD30A4A0B255A5A356
25AA5A947FD3C4FA44B4AA80BAB44C48CC1E2C6D0A711365A37A58C3483D07ED
301A83D2650A2E8CBA9EE62FF5C2736EC82C1402959F64527F9B640619F112D9
8E0F4A8A3078C72ACF3F34AD855AA4008C96E30D9E8C414607C34E06E29AC5B9
2EE5DDB823E8C3EEE6A8DE228313D476A7F39B5DFBFBDEDDF7C45C1C88EE6D01
7FB4F7BB2CBBD5DF7F0CBD98DC287FA6940FBFE1B3B136613A3CF16634CA7B90
53D5FD5776515EFF5D37F8FCC62D8BEC8EE2216503D54D6F2032D3C2BF861E15
FD1B45B71576F15852EEA65DD372E911EF4CC18283CD2FF4196A3F1A9D81137F
F1820EC604D6C61AF318C6C5AB6DA1EDF305CADEF7CC0183B86D31310A09972C
A4BC37D110C77ECCA614D1A281EE1C2040B4A5ECB31A3FC61760F608E44332D1
D2C53C7891B505A3020E9E4915F3618588FCEC80B9ECC5E637D8D0F3C94B1F2A
C53FC46CAE0AFAA7E12266C212A73AAE60199752C042BD55A5DF1CD07FBDB830
C83E7832D8554AD9C9CAEEC7CED1DAEE622090897641CF2E5B34A353D83264D4
4687522DB290D3BA927BA315EA5D25B0D7B69350C6C180AB0C322B05E01F7C7D
F2F48651567F0C1B49AF3950E43C94D78F7B184BF2946B924BC4279AED28F3A0
17A7D8B235698A516D3FB5DF0B18A422B2410C385E7E9439C6D60917EB3299AD
E31471616251FA40C9FA098109BB31A54D9C03B2F12947E4E9252A0851B81C4D
F39E7FC44752504B589C3911571B1D3EC3BD1E1807F99CED1DB20270E483A805
CA2A016E7283550D1B1D35C226FAB63F983CED41A4D02A2F228FA9EF065027B3
CC69D6F2E278C0A2D238D3A37154B0D22281F62C61D9182A69657B027BBDED64
11E261E47620602F865221A534C5A32E2BF5B93A187911A146F2E96538B47DBB
7BFA7EF406FE940F4DAD17E6E4B80C4F031D71F65657C2F5C8233EEAC68DE8A7
E1FC3055C122C1795D0C71A0284F89A9BF04837F61C9E08DB42644A490C97D34
A5D3CEE475B8D578205005A0D68AF94AD27C0E855BB8EDB74775690A4EDD6543
BCC10CF13283D6FA8A7CF3FE6C4F96470A11FF0B0160D3F9816B13B0BAE0D8F9
B84C7631063FE658D13D108D6FE24A89799FABA72E6A6D1C943922CBE676C1B6
11A4106ECB4F1A7F8A84B2783C2E6A109C58D63FC0B74D8C8A1CB62D527441AE
E656D94B1AA8581B4F07B653ED6486AAE1F8ADB30FA8D8914AF24721C74B0908
D84F2EBB91144ED4BD7EF533F2584048DEE37E17CDE5FBC2992A6F924FEBAF07
B626F988599DECDAB43C931CFECF99FC6EBB72F8E542765C26295902DFF60B7C
7B9ADDB4858BC9D808B7F0909690CF8DFBC59A786D48B891937C31A219842A43
234425B4963062DB4C4E9F534C77F4243408805B5A6B8BBF428632CA4AC03A7A
E336DD181CE0CF3E742079E2919EAFABE16A63299771BF276EFA8D85C920F995
5B9D4E8F1ADFCC5C29AA89BF90C186C5DE7679906B2FD4DB279D245D27D08837
D3A8D541FE37415B706EC585C05804108C1D938E543B8B63E275EE85CE9DD843
0A8B9163144B77DA1A552A25D5E77E94F29CF252BE9950F4E627D5F72536B6F3
3278D4A45D10759F16AE42BAE8460865FEE84537F8EC9BF4813570E883B826FD
1ABF3F4E66DB6FEF8366E07BCF290EA67D39C9D81B2A7EA48E0A228FE3D5AA50
1A56CCBF229C9AF2537A8FA70EEF41096ACED34CC7BEECA4EA1F23B39FBC39D8
CCEA93E63F508CBE6722C11467A3D0D5C4C52031DE43C449333E4295104651CE
E13B821D7904653346067E971BE0042C571ABF40C3A1079A675FE4264B784D46
1B8FAA4CDE9851C4EBF69ADF51A7B68CC8706C08D13A44909D4C1D78DB0E0B2D
0E0318304B229DD2FDC968027CDFF65722059C62154304D6F9C3F06DE22914EE
928B7D1BF1FC7E74B4D882998D59BC086AA2D4EAD0AE39F6B75B5A3FB9994506
E21731E1A15F0F2D12F88724BA72898197A80FDAC00243A3038871EBD2F2BAB1
C616278BB78490CB86F552CBE5DD0862F3793D72C68AC16AF8E38FE1A523A5FA
9B0428745B1455671CFA1F6BFBCCF9CA23C833113C2948E7A6AEFFF1A83509FF
C559BB5EE7F92BB43F7F37A371E661C826F63DD0C1B25E34A8119E71EC82FB66
23C7B126FB6554E7560B1B69F2EDBB742F3B20D1648C151C37A8570CBD330A9E
7592A8607D2D727F3AAA0FF2057DF4E2A4C7D3B658C6CED38824A770420D89E7
F6AD385DBCE9C9A9095CF0042052A67AB804A6675BB9373A99390CBDFB715984
A069DE543E4C6ADD7F1EC7A15392EF834EAB4584679A43443953427DB13E6959
0F2F5061C99C6D00FA5327FDB5330AEDE19A53DE3AE092634DC6AEEAF63A5BED
990F8A117AEB1CA0E7F7DBE02CB3D86465F1613B976D1CF6F3A1E69740A2FDC8
062ACC45EDA6B863B60015F276860FB79C31D28F97A799568E66D0A8757B2C41
E939337B467303041D0F4C59390B2E41E5F298F275DCC699D27C459ED4D5ADBD
02539F00095D7E1872862142B46BE06513D3EB1A406E6BAA64BE795122100F09
C37E5D1834218EC1D11B031C7DFC9F5AB071A8F4DC08203821366959E9191D4B
289682D915AF28CE5858F83338DC51B6B0DD052A181D9133FBA50CF18F70EE65
C33726A0450EBA9D0E0C3662AF6C2121AB7911AA9880D6BB6811D6D7515888E7
199A0E632104059A88C9D85B19BB35EDF4AB95E1515BB2339572928BD5FE8CBD
2D4DAF55DCFE29FBC4C3D56336277BA0C9A889A129F9FA7052AD1420B8705163
1A808EC1284C888D78CEA2B4BAB71AD76289F5F4986008FA9BF328E8537E6C91
E11DBDD8447E1C9ACE18DB0EC3D5742C264C8EFA445C5D16C2930FB43669774F
A2CA52144D99EFA8FC427DB4128CD4C036A8C611B087335C780740FAA419D39B
5DD68EA89C95275F9254D947EB3683D0130255269B10C6CFF29EA0BE484C9949
96188FCB747618A8044E2E37DFFD2DB8ABB621B34DC024259340677095B6937A
78EDCF508AC91D4CEFD872AD73F50582DC8807143CEB9F109C84DC5DA30B64E2
E56DE973088A9D32583D6946DB4F3523902FB1781D993B89D5F56D79D5D98CC1
7FEE73FC3A7D1BCCE90179AE450829E228B4DEAD3B2B4C79A400CFF899AB26F9
048B0875EBC871AD23BA96F88CDA8B87FE5809A13889A6AC349ABB25E54ACAA9
C213C5DE2D01BCB9CC0D7BBD384D23AE12E289FF8FDF1F611F5E14D4B20B15A3
42D9B3B37A83A9CA39B5DB6C8316C51B70F211530A56CFE54D63E88169CF5233
D1A7B2388025B3EBD2BEE0716C3A2D589EBC7A42B3DA602AC4E2FD9C9052C922
711E44408DEEA1FE0C9FD50A39AD46D437F61F284A2EFD42EF158EDD71A1486D
4865D6B5E20E60F4F4FC3D646909FF1EE2D7573665E4CD8340A1B232CAC0202C
C35BA9BB3D2267C7E78518F6711633F888EBEF72DC750AC2CB362D528CFC8B2E
A1AE1C05456F50EED8CAA768DEF47FF85C4322F02D7F9D188C6F285C674EF589
251B0B913339FD701FDB281338D96704ED7ED908BC113B4275A24D058955890B
12CCDD5572D63688426B0E1E9A40D6AAECFA5555C1CF9DBEF8C04CE1E5A63F14
969D39B6DAE8A91F6AF4CD1E2DA89A4661DA34E272B6032C442C031F081F5DF5
858F4620885773D8A2B2F5EB6DDA74C1408DF279900450E4A3E80BA9A9B1295E
F24EDC3F6EFD81A741EF74B0202820516C4FB720687BDD915EB2396128C3B262
20E3075DA153D6FD36E1C05B855929DAA4DE694B6F15EF2145C63250B24B031A
4CF0AFDB225E91D99828B83BD90F1702D3906D45872587A3A116B138AD9627CE
E778A949C392202823C670FDBC56F1896FFFFBCF52C4B400F67BA36B5FCE44A5
F18EEB8ADFC088C99DFF8E0A593E81A5ACA2E3693005F723C7D3E0AE2BDD3805
8C6007A00542DEB2539709558A88B21003CE4B2C7817AF207ED576B25A41DEA0
FC55A459BEB00ADB01309B35920F04F84B7B64F95AA99EBCB843A06CED900D99
97BEFD7CCB9F4D85876F10160C8D63E2FDE82B7A8D945F37CC9933ABE0FD1D76
268296B1A5AB06B2E814691128771694224781171DC6266BCC290FCE1AB59416
85530368115BABD4F1DE45952918D1945D51EB713C283DAE8EDD559F437CD886
A4B1DA6120D685C284673A3EE489FC1AE4297A3623B339B7D886B6B4B8F9F4A3
7BF85E320A52FDC6323B51879B98A14C33C567BC069D9B44616514EE1BE36F90
EC5FA33E1B6B0A46945D876EF0085E74935DF2560A03321861A752E59742B9FC
5C501FBC64BFB1602459885B63873DC857ED37F8BE1A9C6E9517B9BF5A6161BD
DEB6DB0381FFB34A8A96AB4AD48BEC40D4C198ABC599C3758AFF638AA75BBDA4
8545D5F95FA426FB25587301A43E176F6CED7851E815AD907F2443E70740DD2D
4FBD5D978B9B37F59D6DCF0ADD0F90825DD23558FCB858513602C8BC82BFA383
7AA6DCEA4009961D06DF233C5381A7F9541259926446B2F03664BC5978A1B6CD
EA6EBC9FE6100A65959513EEE32E69D47B55BAF30A893D77142F943982019C01
715CE29923795EA01C58A798979939B507C5B29A32881877EF7EF0C5CB3DE591
6B9A6C3F3FFA847F396A396F078860B59850BA4CA3115CA2376AEE6B30C05DC1
6F9DB6781ED0F9D45D10E096C33B1B7CD12A9D57C6E49AD833C4B093DC82811F
16B3BD902BE764A1680831EC5A6C1CED84AE0DC0A65678EA5270BF20931E6409
7AA44EACB22CCA11098F8A51096BE83A1ABA56C9EED4195D5CCF24FDAD92E823
C439DAAFBFD652157D728F2754F28304710D3CB33763156D76A259D446647A11
493FAC70DD28063A4CDDA162F72542368E1AC2826C4BFF7109208F66371910C1
068F21779FC39DE03AECF1C9FB2F417930C22791961D801284DCC89B0833B6A8
D63F153ACBFB7B7D547924613BBCCAED37D90BAC5B0264ED31C7B9DA5A2BC620
9B20CA48424D0FF58905BCD6190BF4B5FC6ECCA1BCEF13426920197CAB41C4E6
E82E8EE7BCB23C6BA6F8B58001533B225ED721D6CE3D6E89116EC33CAA6E905A
649F8C6A1AA187A48E20DB864596481976216DB78F0F57543DFAE3CDC0A6FC77
2CAA49442527A5D94DC54BE93C875690CBE52EAA4EDD9F2A511361BC0F0807EE
96AD0D26B62D809E82EC14EDB158EF48A748A6FE0C3A7EE5D4479B35425F35AD
3EC7444F6FA75CEA5011AD571078293448A33C7647611CAEE87974B0A756DAC9
4E1BA78DEE477FA59AD50BF5C52E068A5E044A4A4994D5B24CC5045F768A3C51
D4F65E2A5AFD271A7666C6835E28C60751EE528C0742433165AFBE71562A3016
F59676D56B0B5F7E4984D664BC3ADDAF24B4205752EE21D4B57057A943018466
09C3FA5D2C5BCBFC22A643586BC9E7A965DC34C0A7D76A470B0602AE45106417
0701ACD2C764DDE218B924E38B5A13CB82678372E743A8B3CC300BCBBB878978
D9847F0640A031D5E76B5AD07699C3B2FC6C1DBBF79938BA649C152FFB2B5BBA
D18B9570670B99907506494F362B124790A17D4F415D8447ECF70B67DBD46643
91AD465A1852B804CBE65206EAAA38FFD2B4180AF00DBC62903A5E59ED93861B
243B7A845469B9DC5E291C87011BB364ABF5FD618EDF8B9BB56654C1B8F9DE4C
AAC5765BA2BEDDEF30E9D4A8E707FDD5EC67289BCD7F7ABE230D77E9EBB1FB38
AEBD75945A1476FC266E6CB5E949D85DF7D414C7E38278D461F22E9D7BF5541B
CCDD12EA7B1E49271B9B9C461DB326EB290AED7B8A500BA1841B7E60BA7B4A0A
C98C4AEA3077C4473AA804B1CD52E6DEC89542F00F845DD1795E880F1F7A7995
055E95BE0B22A8B947877C781860725269649C110D63E55BAD543E377EDCD4F8
8BDD0DB470D3D7F62994F271D274B73741E69950F969A9C40FE26DF98A4496D1
C14A2FCE3BB5FF3D828B561725EF7403AD04EE526A482F3D3A28E76F4579D5F4
5F181EE7F97F9B4C99FF8DD63BDD817EDFF64AC62D0E5A82372EE5B315A2457D
C82DBBFC7895D1CF5842FD1B5C5D5927A51B607D99354597CA75D4E486E42788
09C4906464F12ECA0B4777F8443C62A89342D0252CDC1F5AB881B63F77158630
B2F6735BAEC338026759324C29D082E76CB5238BC7D7BA5C95B3B26F43042D8D
DF4D5B6C0D6EC30700E1767E96CF8E38D9639789337B2F035C164B4D60DF5F3E
C7CFB38ADAB45438BFC455CD7E489BF7478B893823151129A253ACDD4B188DDE
8A5F7E234D96A9831FFC19CA1D4C9BD4E03AFA3F713D5BAA5E80F97E0C1D26AA
AA49CAB5FEA0BB322EDDEA27A67A17B0D93871F92239CC78B9068258929E40A2
2BB02FDAA9B21EC06F82A22F3D3DD0D0727C8F13685822F9D6A35295CACE1D1F
BFE50CE57AD2C10212
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /alpha put
dup 100 /d put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A90B8A9EE5C613CDB822F07B
115D4C174FB7945535F2F9C2875C9675143B8D98DEFD3898170FBCB19B4C29CE
1E6883E0F68B5D42751BD7AD09E3EB745F0A6338BA2148B769B5E1EB21109414
C1615EC1A1FEAD5831938F74E26E1F6BF51136E5C76F823D29D35078412923DB
B3A32176ED7935058ED16528D28E50E37BBEB1D1554503645DD6809FA22A0DC3
112E7888A499450162B7373CC8855953B351E8873A4D7DCC40EEEE5A8A2D00E0
EDD8CFE7153824BF94833ABE10FA64768E457D5395519937705DAD2FFC5E71D4
521F01213B7DF82426867DE914CC9866E428F614F18078B4367187426E2260AA
AD0175A79A91BF261002356650249ED10D27634E9F72EE128DD357C3A03A9863
0D674AC5510E1AA39B6260A63A5FAF99F17C7A0D500C37BDA7FE0DA6ED4BD658
2E099ABC11DEFDFFF0B69CE9C56B927E4AB03E8AD4A0C7396F20C491F745C5EF
32379895C8B617CEB8AE0EA656BBC9D3F4680628F8650A0BC45EA9234E3F24E9
7A4837770599C6A8D8721372E2C86F5ED19E2C0C84B6933CC09BE4A8840A1EDA
15D288EB5EB86CBC879CD427C9084BA0EA7C5515AB046A79E2BCC4C363F433FE
28FCA097E91476D8F5E5A51FAB3258FA37A33B940FA157A61F57680C72075E0E
62F503E605A91717C86B4489125B1A053218D2A15072E61E39663DCCF3209C7C
21F391B28A78A47F08E45ACDFB7CA424BA52AD10C02AA92F5274E693B920B24D
A67DE25EB63229D3821DBAFEC0164D9B11EE1CFE897AFB47FD06E8F67D3A67DD
9954A6BDE186DF94B1264DCF77D9E3C71DF888CDAA3C66BF59E3AA7E0CAD8056
F807DCFF3F412B103AB6019A1765390802ACD06B1D771EA1D297FF443805CB39
5F2525977A6EE3F5F2AA4A472A887B03A00DFD388FBF6D3E602147C489679795
7875857E6EF346EAF4328949B974C29175F972D509E6389825E9E43F069EF4BD
0A825CB8B158B4CC9070E68D6F06D8DB6776F368EAC0A857F0338708A8DEF0C1
2C9433B40B7E70CA016C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 39 /quoteright put
dup 45 /hyphen put
dup 49 /one put
dup 50 /two put
dup 67 /C put
dup 68 /D put
dup 72 /H put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8BA7EA8FAD7BDC32ECD6F22EAE4B5A0B8645606BE9A25E02AA976997AC49AA07
15613C340D6B7E7B091F8536740938ECA1A02C2BF0494B922F933448F7555EED
3BB2A04E4CE8669DA70201985A28F7FC99AAED0834C0B57F6B0404398C9FA814
121E2B5DFC7732E2FCA60B9A203E6BB52A0BE6153B390C030FE6FDF2F3E38A9F
907C93BB677774408CD94DB0AA8DD8DA1FAEBC9263DBB3C5287622B3655D2AD5
151CD72A5836CA448E139EF8FB87D55CC27E5859EA562E211A70BDD212BBF5C8
3AB7AFAD9FBEDC388D8DDEEF29E5BA5830B9E88A4857D8894876F46A2A4BAC73
AD3C0FD804C49181C9EFCDAEA25114CE2484465A56A684012053B3D0781710CB
B79A5BCE21BFA46CCFD6B4158BE06C768C73F0358C40A487ED95860B98050A8C
53A75BB461D32E37208D09E1CA8A979105D528F46923FF8EB1F262505F24F03B
208BE5BB7602483A34DE4C123D2173DEF7C3BD51C8A9F415E568CF95E47036E2
639F4583DBE226F3026A03A159885D0053A0199D05C9776948F88712A1E0A33C
55E67CBC3BD00D592EDFE87D399B65090F5C5E53CFFDEF6DB36862DAD0711F35
F92E22BA677C70FB136674568119F590902B02A0B05476B0C8DFD61854539B5F
858512AAD5FF704C38F27EB63FD6ACF136C9206BCFFEDFAD0F9CB652BB6B1840
44D9992A7DCA91D1DE5B2FCBBA9B9B3F29C5A3067D2256065898A9155070CE86
DE905F04E640375A9CAA5245F23AF1541E27C2B50006DB2BEA8A3EAC769BD628
74B59885CF20F782BC5A0732CE3EF01CD10EBE04D5C3397721361BCDC057D1CE
F9054F7F95AEB816DCCCD090E08D705EABA5D1A7AC779F8ECA4480E2C56FF791
2DAF1DAFF1938A5CE16BB126F027396C160886E8A9C7E4D0EE63FBB322A95874
B96CD60E694D2E068BBCC0200170B4E829EF6432012328C7322F0DEF6495E203
F89C7F006249E06EA04D2205A656BD489BCE6A7547CA1EA003CAAC240F6D49E4
E5DAF96FB846E371F36EBCD6FC18F9EC9E981FB9F681FF31464BF7576F59C583
0D6ACEE3024CDDABEC008EBA80E2A25E427E6F4A8F059B17A037B919DF788ADB
995C63B12FB02222285A1DAA90BEA0EBD213BEC4805DE6344D9874F5AF791F90
5AFC9133BC22A1559D1854873B664CABEB2A35A30528E32A9BFD76BF6783091B
F8826605EDAD3970BFDDC403B490ABECCCAB1F227CD0D8EF741BE1497EB04EFC
FB7A6F74BB147BDDA1A41359B3154BD277291489068AA770CCA4F5D4534D1A52
45EDD8E9AC9D6111E0317C344B58AAFF4E4248354D05EF71A513F7028A2731D5
201D505E67AC77B80D90B5428A515C01A6BF4A9A423A0248DC38D44D87DA9C30
8948E23FC6CFAA5E553B7FA0295C84E02D894B1C0801C65455EFFD4BEA16C93E
E8DFB136AA45BE1911E6ABE1932C4CDC8038B9168F135F90CE0BD000B17E967E
B99E76D39977774E0C345478541C06AF5D2C066F0D1CC2C3E9E2E3EE3878380A
D766EBD99D04BA9C24BEDDC76DF47A32C7D2E3A2DD47A93B86784B2EA4C82899
3953DA7086BF70352DFB1A5016C006994431C770303C2965D753277B232EA594
2ACE88AE4DA204DC18C6B8D6F33D1048AA0101ADA7C8E6F6BB1ED95259965E11
3C136AE8FFC8AE3CC7A0D57BAC4BE56599FD1FB942F34F961D670C0AF2F1B0F1
0B2C799131F08E8C580404C4568E791C6F971F7EBB2854852F20BA606BD14B30
92D460E30610C48DC2CAB102DB612672DA2C3685A35F7B48224BF1B88D2E87FB
850CD348A4B1A7F7F47686B4D6CE053938A1933EF4E87951B32E2B7C2195868C
F3F9FC8F0CE8BE80CDAD6E355157E18D78CF0B7014F2541D49D9472771C27F58
AB77A7E68B982DFFEC8AE56AAF70EA44322506F081351DA8CB07CD2BBFD1A994
E5C6AB3962B5E1C2E502FDCAA4FACACBEE7340DBD0DB4B01D219AF55D0CF1E8D
57EB4ED5CC5CB77709932CF5592547B619437B8E19011333661490A4E6A96E3C
3FD30E3440ED4693A4C7EFF680A7BA6857CAAFE36D95F91485D4C57E549D3DD9
77A13E5BEB8E0026B088DF4AAF3ABB28ACFAC33AE4262B10457035411698A7A5
F661158183AEFE896C76DC8FFE4E2482F66A4F5FFE89D0492C0D47E0DBDA1512
15BFFF319D4838A7A5866CC014C8AAD06BBC981340C658BDDC52403E0EF0BAF2
7B5831E2609990658C6E755674D1AE053BF01E8E34EAA3CD4E06E302ACCB4FFA
23C4F24022E31CBC646AB84DEA5293E923FDE0BC3C06759827E2DC2A7E1DFCC9
D343EDE452B6B5531BD06DC802FD855E90DA3978D18FB31335CF4A6076B4254C
95FA6152F157DC9AFFA15D0C22370874D89D72ED06E316219ECE13ACF25C9E20
55341B4A36D1C341747349705DA7C2E1B3025EAEC3DA6C26DD4CCAC901ADB80B
C3C0D5D8A69397C90CE641D842F1DDD54A7249DCFEB99ECCAD76ABF7E581542B
0C0D6A285A9D09AB4835A61B50D9CA235F09DD28FFE3E2F5D361314EDECA212E
391823BCF319C44A593AB8FAF23AA1F73658A541D18AD172DE6FD0FB8404095D
F70C2B2F56A22DA49AE367D2099EB81A7A62AAA2CB9F5F0C263CA6E2CB533199
B53C8BB50C663110BA5509021E134161F542A65EF50B531E7B9FF94694F8C569
574B8785374F3C0916EB21037640805C7F584E1473F0A5E60819D2ACA4483D4F
C7894DCE095819DAF6BD7A2BCCE98EF5688E90DF9494A6F32390BDF0627231EE
C331073426AAA13FB89BEB537992F739C60BB175CE319A5C772C28627BE2E1E3
2C70E1E869D5EEA1A1A1C00D2F755E084C0D2C7AD81B3921A1BD13F96F6317C9
BD700703DA12000E0C3B252643CF0ADBC961F5FBF9AE042BCDC6D124E216ED08
7E22915CD76C40FC35898900BC535183BA7255A608004621F2E5E161A8908416
66CFF4A43C0B97BA7A2A0B365EA620FEAAF5A1CEE07F57685BB8314F6C2CD8B5
5FE0139D31C90E70BB3C35F04FEE93C8089EAF7EC411D919F4C36AE501156DAE
2E0E68C470185646B00D5C520D76D2AEDC9A183A51F6F4B39F5DE7E00A6F4702
5306A2FA7BDCD315276E21F361120C843404FCA067BD5377B573F4BF95B263F0
765992A7E6E7086BE7F3BCD5265616832036E3EDB4D9E52D9B38139141D52F48
F082C8AC0BB294EE623C87CDDAF6096D66687D799090D359E588D93546367CB1
7429B4B04F6FEBBF01913C7849C4B9DD651F4FA33B9EA8DF6D58DF34F33D9F81
520DE813ACA578B8E073BABE2DC91991335CBF78199D77DE080013645BC29A46
F2DBA4FA83EDF614D3F66D0E3BBF9F0A24FCAD8DA88A15DBC605B5B3D9960B95
B87B5484AA4377E4DFD604B3A4052DF1D3668A74AD9EB93A038AF52E5EEBCE2A
510C93BBE6C0A3468508B841813FB126F3B0825F227A989EBAD5228F1E96714D
BD4D792AA74FFA29F0B8531C489B8C503D59362CAB96B5421352A35A19294C6F
57D4D2004F7295D860101D8EEEE3B252DDA9BFD282D24B64A0FBF0B6C702F075
84D747D4507599BAF2F429E36BFAA3412650E155C2D19750CABEAEEF97BB2C2D
F760867B7CE37CE6B3EC4F9914EE5811AF6C92FFCDC189A749EF05332F506C5A
86DA9B421588B142E9A7E12CF21EFC864F40FA8B6B7ACA5B1CBF54743EC84A7E
E426CD88D25E3DC9E4303F7081A71751D7836C4988405957E65136817F18667B
975BF873F4073BD8EEDDD66507693DE3A6A1E181D87136FCBA88D9C8D84A0460
01BE0AA3D81D70BE6A6BAE5F53B5700D8601EFC699627B23C46B143572EBEE2E
2E1EBEBAF7EAEE30265DC61CED90FC8E7F2214BE8AD508696562A4AEF63EACD9
BB9C5978AC01F654B24E22129B3F704F457DF67BED9A9A428732090CFBA943C2
3C413785AAD19F4E39A73DC253CCFFA0F85EA2AF10F1B986CE01CE90538CA882
C61D82A3FE56B5CBE4CC082AC278D1DF731BC1E24276FEF2B71009A78B2BC710
0E0513C15CAA25F39195BA331E5BE3A4E643C50D7DF1B9B3C94214EF90E7402E
FC41B41C564B819F7DC580936B2612FB7013A153E72982895CC54100CE8868D0
19CFC25860629BBCE2FEF5973261818DCBDEEE4630D2A91C0E337846411D4FAF
4C9060787978249576B01F27CDA169A6EBCB15182FFE035F8C4980F729DE0305
9A37FBF6850FC03E3D75EC549A087691BDAA79055FB488FCD137098248DF0C4D
FC5F217A812F49125A5698C10969A1EDE06149C7C811074AED78286C734817E3
16DB0150F8529B9D7C369CEFC58277B7265A04F6181A8B3763A87020D2F039E5
13E3EDF15C8960AA674533D19715EF34F3E5DAE9E0B377D97A34067C5FC8A8CE
4E7A976968C3E89BD4C98C830F2EB6F581D8AA771D37412F51E13E83061703CB
657ED5777C5C5C34B9FD2CBA7E27899FD6413C7EE92695689F48869E1228AFA9
6C7F886A49503EFCA85C68236E9071D491DBCD357DA75F5BDAB03FAF53F0813F
64EECE95BBB08B681E323E596BECE16A9689725C074B3742304E6194093E2277
46DEC9633EC9D672027866DC7BA6C8EEFB23404B2CBA11B3B0F137CA400B6D47
698BD0AA3C90FCD34D9F81D7231ADC7D436E64495B6751D12E79744EA01C109A
75632D244FEB7F6A4480A140987C9E413CD1E4BD3B7BB22013FB94C5B9D2D0EA
90C40A82E51954846198FF5AA45A4B710AAE943C73F1186126A37E13938C6B15
967406B5899B8132D14830B37543FC749A9099354AC95C182E5A07DB95D45B25
B472A69AEE86C3EDAC4808F88A9228D22CF0A12F74B047DE88FB2E656FCC1FC6
72DD6985B36433C15C8EC48765A98CA9E1CB491AD7479F16301973144320B4C0
E8817A506CFAD557F0338FBD9BBD6ED83440E68E560F7C51EAFAF843C40135C9
E6CC66B00732F1F19BDED630820B5822E8587F2F968A24A56D5523EDAA3BB5FE
16D1A0107C3EE81261D64A685DC1AB14B1C3138EC4976CA766EF628EAD0E9DB5
9D8CAF97D0C9BB53A2380F41D7040B189D3D76E5F0A329C239FFAF7CE5FCB0B2
09B09000203F1629507D15C49FE30EDA14A78D0DB60B67C0E97A6FB43F475635
59F9DD4B41E9185B6C8A18FE7AF3493EC1D7D43FA042C1A74D705FA8C3357583
D2501F6607BE2328C554AED0803742EE300EE5AF6619AAAB8072C06EC9741730
5D5503115CA9B05D2AB2DD139AB5613AC0C08F76D39F0DDB7CA9979DF1FC68DA
6187BB91C111B4C4D2308EC9991EAC802D37F5B5CA40AABD99B43C4591F49E53
D3DACF8D74634DFC656B6120BAC96F90A2F32BE7E65468941C377218B8DC2B99
B822874D806489252A40707960CC742D60568831D0CAEB2038480ED2E27AFC10
1D9EF3F96652F211FACAB572F81ACC710F6A92BC7EC5A891C0DBF4271A6992BB
3663ABFD4E04BEE4FDCAFE4E20F59010067F9BD05C1CECE8BAD38C464EAEBB6E
D626BD5C127F49DC7C6A96E96B17FB2EFD3E36D7C3A28001D90F47E347027FD3
D6F5D4703FFE99A931080A454BEFE63BE2850EEE5F4F511C26675D3A0B8E50D3
7CFBDBD1F51746656223B57E2116F980C90C4539840220B8BA2E9A5E075EE764
BD80D4B89D32AB67FB847B8703F010340FC678C0B416E77BB9B315F84DBA3ECE
C30F059CECC203188C8642ECB570931EA37CF5E6DA1FBAB074F639DA006728BC
52C6FC247D9160FFEC1C83573F90609DC4C822F8F20E5ED15ABE298F53880273
9BA03171CC3323AE40FDF8031B536E083A6F3BD2643CBFE1325F8D8FACFFB0FB
A97E2979A163BDFFDA2DC8AC58E2DCF9BBEAF7819A34A56716860A1FC576223E
9DF2863953F9A32619B4433D51921D474516779CEE9A65941456CC5B0FD3162B
31AB6B11694A78941F4903304E0254EB6683219A528CD2758645C4F24693CAC9
F7E2524986B044FCCAD9FBA736103847C203DCEC8A07E087C049851B40774F43
2E3135AC7AB4B0C149C15373E246F40CB61CF12A82E0F76F2A8178A02819E70D
D2B68EA6C154F72D1E3DA21A419250128878D2C4A78F11DD5A3A2909746DA844
8C8FA39E38FE9EACD9DB76B186FBFB6EEAF335EB3E35317471D5FDEFF3CE4F41
9213A2DC7C51D58675E1BE3C208990B72231243D3890C8CB3D6F4EA2B4B7CD80
29EDE5C86CCA953565D0E5AD08DB0581D729E0127F9720FCD8155ACC1DB356B0
AD56D3CD5ACDCCC0BBFF184EF5B86CE93C7EAC8562481A845CD82F62E4DD354F
4975B1F4585B3B37E74E2CC138E3B1475F20E3A2D3F9B3801AF3464FF1F1DC9E
683564AE2787FB60DC71C4E60A78D5075911DF2C7F74C3B36E9BE82FCD0EA309
D49336E15DC70243C5DE7BEA7D929187356ED6F94D8EF80E6418D9E4252C97AB
CFC96BBB0ED68B8851E9937E76292167F22831D610399A2B8AA277CD846C9B0E
86C0E792F76DE2F10549DE01D2FC1787AEE67EE85A04EA9853E850ACAB9913C9
F58DBD5E79B1E115F6DCFFCF820F0FFE0C69AB507C3956E4650097C6F2596885
F5FC8685F8FB5830481144A170541E9D4957D9396D54FB9B3DC7983D4AB7802A
9E1B233CBDABAA2544015BF519007B46CCAC9A763BF91A59A23FFD98E8EA4F80
64E66415F789B6E4AD9382203078102F2809469097E85B2F2D4376AFDD9E05DD
50AB1EBE97D270F50A74902CCE000A6F19FA1E43F5FF133E12EDE063ACB25B47
DEAA45E21BD6F5B433531019F101EF81F8AF9A2D77458DDBA1BCBFC7E20FBFA7
D9D2FB90A9B7F755BDF276146FB4D1E6A8D59462D759002CC4ABC6614FEC3E96
48649487E5DDF5A0CFC431E025AF72335D208CA12B5321E8DF84766DDE3A0357
DD5AD17CF38877D7EE02A5A1488967194390CD681D20D3BF8641602D12E72092
1F3BFAB31077F30E00A2D3865B2E03DA9AD66E832BABAADA0CA4683E1F8EED12
B95175FA02CC0289E0104DC81621D10A759AF88ED4DC058A709CFF0CC82537C0
E9FDC1B7391003984961B3BA413F846A887BD100F0C9CD1C74112C4EB19F8F12
AF449F50F74C3A8035023697A2C625E62D9F76ABD8C367F9CF6BC7FEBB8AE42A
BDE63C214BB60D538219CEE93F5291E03C1C91309EA9A1ACD9BE565E7B577113
52C9DDD253537647FC663DAFA3D4A6D0EEC8EBA191FA57832E79CFBFD96F46D3
9A4231F55D7BE1571292276948A92776D10C681D4694D859770C6D14A4C96786
9AD68D6F96FC4563C2318D93C16B7AF1841B32CBC4DF5B6F588FC170856602F4
B43A229676943426D065ACC5FF8AF9BD34B9C0767DFD65B2286BE8F6BC52ECE7
F96FCD413DFC4EA2EF62DF8EF48E45C284A4FD3A9D09DAC7A3039D98874B7BCD
D035E7A2EA0348482EC7203F19D19E205EBE67460B621E0592C628C5F6AEFF0E
ECEAD710FA89516C87213C7225EABD4250DD4313E4E95EF7C879A256A1E20A87
65359B4EF946FA8DDC7E2385B10C7525923C3CFA862B7953F2994CF567B585BA
AFCAE20A606902608E76E6DA031DE7FC9223E5459E6CFA9C3B1D34560EB4745E
4B1FCD09A1439B8B4591965FE491CD91EFE2BB80E05424BCAE5024166A69B5F5
5BD530F47194B0B3A247E901490408E896EF9B4A5B8DC4C9E96D7B297FA0C975
379ACC7218DF21DEE8E7D972DEFBD7A3C2E5E4B601DAAF5D96969B58EC394321
0BC7D355C2A3FB58C7B8839F6FD59A08434AEC199205D9D9DD802546CF165D46
24771C90F275FC702AC6FFCF03C84DB380785626C4DE1C48727982A14AC36135
DA7DDF45DD92600CC856C99EF8718C6BEBCD70CB88C388C3242C0AE646EB88E3
ABAAE12E3675FDA8A7D7CD43A6579D1BA2DF55DD78F6356B7202E0AE0068BCDC
7219ECB9839EBF6516CD8A007E31458D5210C8B0DF5531FD3852925D342588A2
DE0309F8796A310A33B3A61F70F47BC6487C1032F402E9B74E86B2CDFBE80970
906541653DBC3E3E3C3372514E600515AD8AA9D51D94A4624EB4EB6CA38FCC00
91F3D80B30C781180322D786A32F75E29F623404138EC564A67B31A1F29D6FA2
7E9384EE10B7600D4EC34426D37F242ED58E0D10611B12D28DC94C3C96EBEBFC
D07D218B1C373559BB647E4DAB5CB192E5EB4F2DAA84C13CDEF8FAB8B41C9254
233EC42DCA46F027CD8B4AEC4D5290DCA1C375FB7BD48BC719DB49F556131131
1EF06A613D428A4A12B228F708F7954D332A47F5CE0ADB1B228B06C9B9063A97
4C3325E3CCE6E9E73E4487E51A7BE5B8C8CCB99FD7FA9773AF51705562EF2562
8AAEF6F3B8FAD4136562AB4CE2FD2A31CC2FFE9AEF1AEDA4E50B81A4418B135B
54EF3A889741CD27418F50B38F0B1672117EF3B8ACE4028D42173747F43F0B8E
215A2E449D39937287055F264B62B425904E3C6EB6C61405418BC6BCF737AA91
AFA97262AA651DF4BE6705757497C375E4EBA43EA0462BA22B59C89DF81D2ED4
C93591CE6DD89C925347C54C1BF1954B599B6EBE378253DC3090F3C5153BDD2F
8706C7268D7613BA64B46E0EFFE089CF7FF01562A1285E6B8E2FB4764F9894F4
C1811B6354
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 19385773 21232459 1000 600 600 (tmpPSFile)
@start /Fa 134[50 3[53 37 38 39 1[53 48 53 1[27 2[27
3[44 1[42 1[46 19[91 1[75 1[36 2[60 24[32 32[53 12[{}19
83.022 /CMBX10 rf /Fb 140[31 10[39 104[{}2 58.1154 /CMMI7
rf /Fc 155[43 88[53 11[{}2 83.022 /CMMI10 rf /Fd 134[35
35 2[37 26 26 26 1[37 33 37 55 19 35 1[19 37 33 21 30
37 30 37 33 12[47 37 2[45 7[49 3[50 47 16[33 33 3[22
5[19 39[{}31 58.1154 /CMR7 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-720 -576 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720
-576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -595 2066
a
tx@Dict begin CP CP translate 1.0  1.0  scale NET  end
 -595 2066 a -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0. true 202.66544 -50.3237
99.58502 -71.54126 .5 Frame  gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0. true 208.35373 -55.44281
105.27376 -76.66037 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.85355 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
171.87738 -139.11913 204.69295 -139.11913   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 208.03029 -135.57426 208.03029
-115.88492   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 204.43939 -112.90271 109.91313
-112.90271   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  204.01349 -135.10233 /y ED /x
ED /r 4.01678 def /c 57.2957 r Div def /angleA -90.0 0.0 c mul 2 div
add def /angleB 0.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  204.01349 -116.91951 /y ED /x
ED /r 4.01678 def /c 57.2957 r Div def /angleA 0.0 0.0 c mul 2 div
add def /angleB 90.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
136.40567 -139.11913 102.76825 -139.11913 102.76825 -139.11913   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.0
 mul exch 0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED
/y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos
arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub def
n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2
y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 99.79646 -135.62593 99.79646
-99.01672   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 103.5901 -95.83133 197.48424
-95.83133   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  103.81326 -135.10233 /y ED /x
ED /r 4.01678 def /c 57.2957 r Div def /angleA -180.0 0.0 c mul 2 div
add def /angleB -90.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  103.81326 -99.84813 /y ED /x
ED /r 4.01678 def /c 57.2957 r Div def /angleA -270.0 0.0 c mul 2 div
add def /angleB -180.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1. 
scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1. 
scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
161.6969 138.65936 203.80684 114.75916   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0.8 0.8 0.8  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1. 
scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0.8 0.8 0.8  setrgbcolor  /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1. 
scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
145.11307 138.65936 104.46623 114.59636   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0.8 0.8 0.8  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   201.48367
139.51291 2 copy moveto 5.69046 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   201.48367
152.88573 2 copy moveto 5.69046 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.09803 0.09803 0.09803  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-568 745 a
tx@Dict begin { 207.88571 149.89789 } PutCoor PutBegin  end
 -568 745 a -11 x Fd(T)-5 b(ok)n(en)22 b(em)n(b)r(edding)-568
745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin { 207.88571 136.5255 } PutCoor PutBegin  end
 -568 745 a -11 x Fd(Dep)r(endency)d(em)n(b)
r(edding)-568 745 y
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   97.8228 73.97774 2 copy
moveto 4.45181 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 101.96246 74.08583 93.61627
74.08583   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 97.84624 70.03908 97.84624
78.38527   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   210.1164 73.97774 2
copy moveto 4.45181 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 214.25563 74.08583 205.90988
74.08583   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 210.13985 70.03908 210.13985
78.38527   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   212.58197
105.00545 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 254.40753
114.96365 202.62334 95.04681 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   228.51543
105.00545 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   244.4489
105.00545 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   263.79655
105.00545 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 745 a
tx@Dict begin  gsave STV CP T /ps@rot -180.0 def grestore  end
 -568
745 a -568 745 a
tx@Dict begin { 527.59355 210.0109 } PutCoor PutBegin  end
 -568 745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 273.75519
114.96365 253.83835 95.04681 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745
a
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   44.14177
105.00545 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 85.9669
114.96365 34.18314 95.04681 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   60.07524
105.00545 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   76.00871
105.00545 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   95.35637
105.00545 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 745 a
tx@Dict begin  gsave STV CP T /ps@rot -180.0 def grestore  end
 -568 745 a -568 745
a
tx@Dict begin { 190.71317 210.0109 } PutCoor PutBegin  end
 -568 745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 105.315
114.96365 85.39816 95.04681 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745 a
tx@Dict begin  PutEnd  end
 -568 745
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   138.03592
148.61755 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 179.86148
158.57619 128.07729 138.65936 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   153.96938
148.61755 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   169.90285
148.61755 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 745 a
tx@Dict begin  gsave STV CP T /ps@rot -45.0 def grestore  end
 -568
745 a -568 745 a
tx@Dict begin { 37.38156 181.83862 } PutCoor PutBegin  end
 -568 745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   238.1897 45.7959 2 copy
moveto 4.45181 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745
a
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 241.19318 42.94481 235.29128
48.84671   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 235.4211 42.99387 241.32256
48.89577   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -568 745 a
tx@Dict begin  gsave STV CP T /ps@rot -45.0 def grestore  end
 -568 745 a -568 745
a
tx@Dict begin { 59.1913 172.80473 } PutCoor PutBegin  end
 -568 745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   238.1897 14.95227 2
copy moveto 4.45181 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745 a
tx@Dict begin  PutEnd  end
 -568 745
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 241.19318 12.10161 235.29128
18.00307   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 235.4211 12.15067 241.32256
18.05214   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -568 745 a
tx@Dict begin  gsave STV CP T /ps@rot -45.0 def grestore  end
 -568 745 a -568 745
a
tx@Dict begin { -11.95357 62.73357 } PutCoor PutBegin  end
 -568 745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   69.7495 45.7959 2 copy
moveto 4.45181 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745 a
tx@Dict begin  PutEnd  end
 -568 745
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 72.75299 42.94481 66.85109
48.84671   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 66.9809 42.99387 72.88235 48.89577
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial -568 745 a
tx@Dict begin  gsave STV CP T /ps@rot -45.0 def grestore  end
 -568 745 a -568 745
a
tx@Dict begin { 9.85617 53.69968 } PutCoor PutBegin  end
 -568 745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   69.7495 14.95227 2 copy
moveto 4.45181 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745 a
tx@Dict begin  PutEnd  end
 -568 745
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 72.75299 12.10161 66.85109
18.00307   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 66.9809 12.15067 72.88235 18.05214
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.07237549 true 134.43199
131.9838 117.36018 121.27191 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.85355 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 745 a
tx@Dict begin { 121.77032 122.5023 } PutCoor PutBegin  end
 -568 745 a -12 x Fc(d)-525 745 y Fd(1)-568
745 y
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.07237549 true 190.57858
132.16745 173.5072 121.45555 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.85355 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 745 a
tx@Dict begin { 177.77493 122.68594 } PutCoor PutBegin  end
 -568 745 a -12 x Fc(d)-525 745 y Fd(2)-568
745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin { 204.70815 9.54662 } PutCoor PutBegin  end
 -568 745 a -21 x Fc(\013)-515
694 y Fb(h)-515 745 y Fd(2)-568 745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568
745 a
tx@Dict begin { 204.70815 41.24336 } PutCoor PutBegin  end
 -568 745 a -21 x Fc(\013)-515 694 y Fb(s)-515 745
y Fd(2)-568 745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin { 92.41454 9.54662 } PutCoor PutBegin  end
 -568 745 a -21
x Fc(\013)-515 694 y Fb(h)-515 745 y Fd(1)-568 745 y
tx@Dict begin  PutEnd  end

-568 745 a -568 745 a
tx@Dict begin { 92.55693 41.24336 } PutCoor PutBegin  end
 -568 745 a -21 x Fc(\013)-515 694
y Fb(s)-515 745 y Fd(1)-568 745 y
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   210.1164 45.7959 2 copy
moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   210.1164 14.95227 2
copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   97.8228 14.95227 2 copy
moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   97.8228 45.7959 2 copy
moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
97.8228 53.17479 97.8228 69.86673   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
210.1164 53.17479 210.1164 69.86673   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
74.18874 45.84018 91.13422 45.84018   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
233.52428 46.09286 216.57922 46.09286   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
74.18874 14.95227 91.13422 14.95227   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
233.52428 14.95227 216.57922 14.95227   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
69.7495 19.53694 69.7495 41.79343   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
238.1897 19.53694 238.1897 41.79343   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
69.7495 -11.19162 69.7495 11.06442   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
238.1897 -11.19162 238.1897 11.06442   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 745 a
tx@Dict begin { 121.10649 -69.61491 } PutCoor PutBegin  end
 -568 745 a Fa(Kernel)31 b(\014lters)-568 745
y
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
128.36209 -85.61958 128.36209 -76.30133   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
179.57712 -85.61958 179.57712 -76.30133   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   128.36209
-112.90271 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 138.32028
-85.8727 118.40346 -122.86134 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   128.36209
-95.83133 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   179.57712
-112.90271 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 189.53531
-85.8727 169.61848 -122.86134 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   179.57712
-95.83133 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   161.93611
-139.11913 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 171.89474
-129.16049 136.04445 -149.07776 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   146.00266
-139.11913 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 10.32765 -29.0041
10.06717 78.28368 10.06717 78.28368   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.73415 -45. PtoC Shadow 0.25  setgray stroke gsave grestore
 grestore gsave 1.13791 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave grestore  end
 
@endspecial
-568 745 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 745 a -568 745 a
tx@Dict begin { -18.8931 -36.53365 } PutCoor PutBegin  end
 -568 745 a -568 745
a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a -568 745 a
tx@Dict begin { 8.82027 -27.71336 } PutCoor PutBegin  end
 -568 745 a -16 x Fa(Multi-la)m(y)m(er)h(atten)m
(tion)-568 745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568
745 a
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 10.32852 -147.00641
10.07108 -48.03484 10.33156 -48.2771   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.73415 -45. PtoC Shadow 0.25
 setgray stroke gsave grestore  grestore gsave 1.13791 SLW 0.4 0.4
0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore gsave grestore  end
 
@endspecial
-568 745 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 745 a -568 745 a
tx@Dict begin { -132.29076 -145.94794 } PutCoor PutBegin  end
 -568 745 a -568 745
a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a -568 745 a
tx@Dict begin { 6.82881 -139.11913 } PutCoor PutBegin  end
 -568 745 a Fa(F)-8 b(eature)33
b(selection)-568 745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin RotEnd  end
 -568 745
a -568 745 a
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 10.32765 94.27315
10.06717 158.57619 10.06717 158.57619   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.73415 -45. PtoC Shadow 0.25
 setgray stroke gsave grestore  grestore gsave 1.13791 SLW 0.4 0.4
0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore gsave grestore  end
 
@endspecial
-568 745 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 745 a -568 745 a
tx@Dict begin { 126.41316 109.34135 } PutCoor PutBegin  end
 -568 745 a -568 745
a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a -568 745 a
tx@Dict begin { 8.5359 117.87726 } PutCoor PutBegin  end
 -568 745 a -16 x Fa(Input)-568
745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745 a
tx@Dict begin  PutEnd  end
 -568
745 a -568 745 a
tx@Dict begin { 77.00465 146.19933 } PutCoor PutBegin  end
 -568 745 a Fd(T)-5 b(ok)n(en)22 b(on)g(SDP)-568
745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin { 46.27565 127.05615 } PutCoor PutBegin  end
 -568 745 a Fd(Distance)f(from)h(c)n(hild)
-568 745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin { 13.26906 105.99966 } PutCoor PutBegin  end
 -568 745 a Fd(Child)-568
745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin { 15.54532 100.3092 } PutCoor PutBegin  end
 -568 745 a Fd(no)r(de)-568
745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 745 a -568 745 a
tx@Dict begin { -40.0668 -237.32138 } PutCoor PutBegin  end
 -568
745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a -568 745 a
tx@Dict begin { 98.62729 -138.69409 } PutCoor PutBegin  end
 -568 745 a -11
x Fd(max)g(p)r(o)r(oling)-568 745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745
a
tx@Dict begin RotEnd  end
 -568 745 a -568 745 a
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 55.28261 38.50081
55.02211 82.05475 55.02211 82.05475   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.73415 -45. PtoC Shadow 0.25  setgray stroke gsave grestore
 grestore gsave 0.85355 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave grestore  end


@endspecial -568 745 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 745 a -568 745 a
tx@Dict begin { 90.36575 -16.04764 } PutCoor PutBegin  end
 -568 745
a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a -568 745 a
tx@Dict begin { 53.20648 37.15883 } PutCoor PutBegin  end
 -568 745 a Fd(Self-atten)n(tion)-568
745 y
tx@Dict begin  PutEnd  end
 -568 745 a -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745 a
tx@Dict begin  PutEnd  end
 -568
745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 55.28261 0.19102
55.02211 30.08733 55.02211 30.08733   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.73415 -45. PtoC Shadow 0.25  setgray stroke gsave grestore
 grestore gsave 0.85355 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave grestore  end
 
@endspecial -568 745
a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 745 a -568 745 a
tx@Dict begin { 52.90866 -53.50475 } PutCoor PutBegin  end
 -568 745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745
a -568 745 a
tx@Dict begin { 53.20648 -0.29826 } PutCoor PutBegin  end
 -568 745 a Fd(atten)n(tion)-568 745 y
tx@Dict begin  PutEnd  end
 -568
745 a -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745 a
tx@Dict begin  PutEnd  end
 -568 745 a -568
745 a
tx@Dict begin  gsave STV CP T /ps@rot 90.0 def grestore  end
 -568 745 a -568 745 a
tx@Dict begin { 46.22224 -46.53397 } PutCoor PutBegin  end
 -568 745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568
745 a -568 745 a
tx@Dict begin { 46.3781 -0.15585 } PutCoor PutBegin  end
 -568 745 a Fd(Heuristic)-568 745 y
tx@Dict begin  PutEnd  end
 -568
745 a -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745 a
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  73.7663 -36.90051 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -180.0 0.0 c mul 2 div
add def /angleB -90.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  124.34529 -44.93411 /y ED /x
ED /r 4.01678 def /c 57.2957 r Div def /angleA 0.0 0.0 c mul 2 div
add def /angleB 90.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 124.49594 -40.91731 73.61 -40.91731
73.61 -40.91731   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 69.7495 -37.1788 69.7495 -30.85577
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
128.36209 -50.45654 128.36209 -44.45003   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  234.1729 -36.90051 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -90.0 0.0 c mul 2 div add
def /angleB 0.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt
{ true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  183.5939 -44.93411 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -270.0 0.0 c mul 2 div
add def /angleB -180.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 234.32051 -40.91731 183.43501
-40.91731 183.43501 -40.91731   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 238.1897 -37.1788 238.1897
-30.85577   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
179.57712 -50.45654 179.57712 -44.45003   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 125.89609 18.58875 125.89609
122.15672   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  121.87929 18.96907 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -90.0 0.0 c mul 2 div add
def /angleB 0.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt
{ true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  121.87929 77.99496 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -90.0 0.0 c mul 2 div add
def /angleB 0.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt
{ true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
105.07578 14.95227 122.02126 14.95227 122.02126 14.95227   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.0
 mul exch 0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED
/y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos
arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub def
n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2
y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
102.26247 73.97774 121.98956 73.97774 121.98956 73.97774   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.0
 mul exch 0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED
/y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos
arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub def
n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2
y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 182.04268 18.58875 182.04268
122.15672   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  186.0599 18.96907 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -180.0 0.0 c mul 2 div
add def /angleB -90.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  186.0599 77.99496 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -180.0 0.0 c mul 2 div
add def /angleB -90.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
202.9216 14.95227 185.97655 14.95227 185.97655 14.95227   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch
0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2
ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
205.45097 73.97774 185.72386 73.97774   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  149.95085 92.62163 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -90.0 0.0 c mul 2 div add
def /angleB 0.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt
{ true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  157.91975 92.62163 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -180.0 0.0 c mul 2 div
add def /angleB -90.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  101.8396 84.5876 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -270.0 0.0 c mul 2 div
add def /angleB -180.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
97.8228 78.7187 97.8228 84.78862   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
210.1164 78.7187 210.1164 84.78862   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  206.09961 84.5876 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA 0.0 0.0 c mul 2 div add
def /angleB 90.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt
{ true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 101.50356 88.6044 150.06287
88.6044   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 157.71353 88.6044 206.27283
88.6044   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 153.96938 92.12321 153.96938
139.16515   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
238.1897 50.6454 238.1897 95.41107   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  234.1729 77.99496 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -90.0 0.0 c mul 2 div add
def /angleB 0.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt
{ true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
214.55563 73.97774 234.28317 73.97774   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
69.7495 50.6454 69.7495 95.41107   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  73.7663 77.99496 /y ED /x ED
/r 4.01678 def /c 57.2957 r Div def /angleA -180.0 0.0 c mul 2 div
add def /angleB -90.0 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  gsave 0.85355
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.85355
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.0 1.0 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
93.15738 73.97774 73.43027 73.97774   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.50565 2.0  CLW mul add dup 1.0  mul exch 0.0 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-568 745 a
tx@Dict begin { 99.2885 -159.14624 } PutCoor PutBegin  end
 -568 745 a -11 x Fd(T)-5 b(ok)n(en's)22 b(augmen)n(ted)e
(information)-568 745 y
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   212.58197
-21.32478 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 254.40753
-11.36615 202.62334 -31.28342 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   228.51543
-21.32478 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   244.4489
-21.32478 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   263.79655
-21.32478 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 745 a
tx@Dict begin  gsave STV CP T /ps@rot -180.0 def grestore  end
 -568
745 a -568 745 a
tx@Dict begin { 527.59355 -42.64958 } PutCoor PutBegin  end
 -568 745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 273.75519
-11.36615 253.83835 -31.28342 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745
a
tx@Dict begin  PutEnd  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   44.14177
-21.32478 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 85.9669
-11.36615 34.18314 -31.28342 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   60.07524
-21.32478 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.6 0.6 0.6  setrgbcolor   76.00871
-21.32478 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.6 0.6 0.6  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0.2 0.2 0.2  setrgbcolor   95.35637
-21.32478 2 copy moveto 7.11317 .5 CLW mul round sub dup 0 rmoveto
0 360 arc closepath  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0.2 0.2 0.2  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 745 a
tx@Dict begin  gsave STV CP T /ps@rot -180.0 def grestore  end
 -568 745 a -568 745
a
tx@Dict begin { 190.71317 -42.64958 } PutCoor PutBegin  end
 -568 745 a -568 745 a
tx@Dict begin ps@rot  RotBegin  end
 -568 745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.85355 SLW 0  setgray   0.12914193 true 105.315
-11.36615 85.39816 -31.28342 .5 Frame  gsave 0.85355 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial -568 745 a
tx@Dict begin RotEnd  end
 -568 745 a -568 745 a
tx@Dict begin  PutEnd  end
 -568 745
a -568 745 a
tx@Dict begin { 50.82819 121.36569 } PutCoor PutBegin  end
 -568 745 a Fd(to)j(its)f(father)f(tok)n(en)-568
745 y
tx@Dict begin  PutEnd  end
 -568 745 a -595 2066 a
tx@Dict begin  CP CP translate 1 1.0 div 1 1.0 div scale NET  end
 -595 2066 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
%%EndDocument 
countdictstack InitDictCount sub { end } repeat 
cleartomark restore grestore 
